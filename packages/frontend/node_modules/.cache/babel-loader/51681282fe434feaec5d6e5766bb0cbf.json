{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar adjustBlockDepthForContentState = require(\"./adjustBlockDepthForContentState\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n\nvar RichTextEditorUtil = {\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n    var selection = editorState.getSelection();\n    var contentState = editorState.getCurrentContent();\n    var entityMap = contentState.getEntityMap();\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\n      var entity = v.getEntity();\n      return !!entity && entityMap.__get(entity).getType() === 'LINK';\n    });\n  },\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\n    var selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  },\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n    return {\n      url: uri.toString()\n    };\n  },\n  handleKeyCommand: function handleKeyCommand(editorState, command, eventTimeStamp) {\n    switch (command) {\n      case 'bold':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\n\n      case 'italic':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\n\n      case 'underline':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\n\n      case 'code':\n        return RichTextEditorUtil.toggleCode(editorState);\n\n      case 'backspace':\n      case 'backspace-word':\n      case 'backspace-to-start-of-line':\n        return RichTextEditorUtil.onBackspace(editorState);\n\n      case 'delete':\n      case 'delete-word':\n      case 'delete-to-end-of-block':\n        return RichTextEditorUtil.onDelete(editorState);\n\n      default:\n        // they may have custom editor commands; ignore those\n        return null;\n    }\n  },\n  insertSoftNewline: function insertSoftNewline(editorState) {\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\n', editorState.getCurrentInlineStyle(), null);\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n  },\n\n  /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */\n  onBackspace: function onBackspace(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n      return null;\n    } // First, try to remove a preceding atomic block.\n\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var blockBefore = content.getBlockBefore(startKey);\n\n    if (blockBefore && blockBefore.getType() === 'atomic') {\n      var blockMap = content.getBlockMap()[\"delete\"](blockBefore.getKey());\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n\n      if (withoutAtomicBlock !== content) {\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n      }\n    } // If that doesn't succeed, try to remove the current block style.\n\n\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n\n    if (withoutBlockStyle) {\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n    }\n\n    return null;\n  },\n  onDelete: function onDelete(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed()) {\n      return null;\n    }\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var block = content.getBlockForKey(startKey);\n    var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.\n\n    if (selection.getStartOffset() < length) {\n      return null;\n    }\n\n    var blockAfter = content.getBlockAfter(startKey);\n\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\n      return null;\n    }\n\n    var atomicBlockTarget = selection.merge({\n      focusKey: blockAfter.getKey(),\n      focusOffset: blockAfter.getLength()\n    });\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\n\n    if (withoutAtomicBlock !== content) {\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n\n    return null;\n  },\n  onTab: function onTab(event, editorState, maxDepth) {\n    var selection = editorState.getSelection();\n    var key = selection.getAnchorKey();\n\n    if (key !== selection.getFocusKey()) {\n      return editorState;\n    }\n\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(key);\n    var type = block.getType();\n\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    event.preventDefault();\n    var depth = block.getDepth();\n\n    if (!event.shiftKey && depth === maxDepth) {\n      return editorState;\n    }\n\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\n  },\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var target = selection; // Triple-click can lead to a selection that includes offset 0 of the\n    // following block. The `SelectionState` for this case is accurate, but\n    // we should avoid toggling block type for the trailing block because it\n    // is a confusing interaction.\n\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\n      endKey = blockBefore.getKey();\n      target = target.merge({\n        anchorKey: startKey,\n        anchorOffset: selection.getStartOffset(),\n        focusKey: endKey,\n        focusOffset: blockBefore.getLength(),\n        isBackward: false\n      });\n    }\n\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\n      return k !== startKey;\n    }).reverse().skipWhile(function (_, k) {\n      return k !== endKey;\n    }).some(function (v) {\n      return v.getType() === 'atomic';\n    });\n\n    if (hasAtomicBlock) {\n      return editorState;\n    }\n\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\n  },\n  toggleCode: function toggleCode(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\n    }\n\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\n  },\n\n  /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n    var selection = editorState.getSelection();\n    var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and\n    // set the result as the new inline style override. This will then be\n    // used as the inline style for the next character to be inserted.\n\n    if (selection.isCollapsed()) {\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n    } // If characters are selected, immediately apply or remove the\n    // inline style on the document state itself.\n\n\n    var content = editorState.getCurrentContent();\n    var newContent; // If the style is already present for the selection range, remove it.\n    // Otherwise, apply it.\n\n    if (currentStyle.has(inlineStyle)) {\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n    } else {\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n    }\n\n    return EditorState.push(editorState, newContent, 'change-inline-style');\n  },\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\n  },\n\n  /**\n   * When a collapsed cursor is at the start of a styled block, changes block\n   * type to 'unstyled'. Returns null if selection does not meet that criteria.\n   */\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n    var selection = editorState.getSelection();\n    var offset = selection.getAnchorOffset();\n\n    if (selection.isCollapsed() && offset === 0) {\n      var key = selection.getAnchorKey();\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(key);\n      var type = block.getType();\n      var blockBefore = content.getBlockBefore(key);\n\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\n        return null;\n      }\n\n      if (type !== 'unstyled') {\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\n      }\n    }\n\n    return null;\n  }\n};\nmodule.exports = RichTextEditorUtil;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/RichTextEditorUtil.js"],"names":["DraftModifier","require","EditorState","adjustBlockDepthForContentState","nullthrows","RichTextEditorUtil","currentBlockContainsLink","editorState","selection","getSelection","contentState","getCurrentContent","entityMap","getEntityMap","getBlockForKey","getAnchorKey","getCharacterList","slice","getStartOffset","getEndOffset","some","v","entity","getEntity","__get","getType","getCurrentBlockType","getStartKey","getDataObjectForLinkURL","uri","url","toString","handleKeyCommand","command","eventTimeStamp","toggleInlineStyle","toggleCode","onBackspace","onDelete","insertSoftNewline","insertText","getCurrentInlineStyle","newEditorState","push","forceSelection","getSelectionAfter","isCollapsed","getAnchorOffset","getFocusOffset","content","startKey","blockBefore","getBlockBefore","blockMap","getBlockMap","getKey","withoutAtomicBlock","merge","selectionAfter","withoutBlockStyle","tryToRemoveBlockStyle","block","length","getLength","blockAfter","getBlockAfter","atomicBlockTarget","focusKey","focusOffset","removeRange","onTab","event","maxDepth","key","getFocusKey","type","preventDefault","depth","getDepth","shiftKey","withAdjustment","toggleBlockType","blockType","endKey","getEndKey","target","anchorKey","anchorOffset","isBackward","hasAtomicBlock","skipWhile","_","k","reverse","typeToSet","setBlockType","inlineStyle","currentStyle","setInlineStyleOverride","has","remove","add","newContent","removeInlineStyle","applyInlineStyle","toggleLink","targetSelection","entityKey","withoutLink","applyEntity","offset","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIE,+BAA+B,GAAGF,OAAO,CAAC,mCAAD,CAA7C;;AAEA,IAAIG,UAAU,GAAGH,OAAO,CAAC,qBAAD,CAAxB;;AAEA,IAAII,kBAAkB,GAAG;AACvBC,EAAAA,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,WAAlC,EAA+C;AACvE,QAAIC,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;AACA,QAAIC,YAAY,GAAGH,WAAW,CAACI,iBAAZ,EAAnB;AACA,QAAIC,SAAS,GAAGF,YAAY,CAACG,YAAb,EAAhB;AACA,WAAOH,YAAY,CAACI,cAAb,CAA4BN,SAAS,CAACO,YAAV,EAA5B,EAAsDC,gBAAtD,GAAyEC,KAAzE,CAA+ET,SAAS,CAACU,cAAV,EAA/E,EAA2GV,SAAS,CAACW,YAAV,EAA3G,EAAqIC,IAArI,CAA0I,UAAUC,CAAV,EAAa;AAC5J,UAAIC,MAAM,GAAGD,CAAC,CAACE,SAAF,EAAb;AACA,aAAO,CAAC,CAACD,MAAF,IAAYV,SAAS,CAACY,KAAV,CAAgBF,MAAhB,EAAwBG,OAAxB,OAAsC,MAAzD;AACD,KAHM,CAAP;AAID,GATsB;AAUvBC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BnB,WAA7B,EAA0C;AAC7D,QAAIC,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;AACA,WAAOF,WAAW,CAACI,iBAAZ,GAAgCG,cAAhC,CAA+CN,SAAS,CAACmB,WAAV,EAA/C,EAAwEF,OAAxE,EAAP;AACD,GAbsB;AAcvBG,EAAAA,uBAAuB,EAAE,SAASA,uBAAT,CAAiCC,GAAjC,EAAsC;AAC7D,WAAO;AACLC,MAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ;AADA,KAAP;AAGD,GAlBsB;AAmBvBC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BzB,WAA1B,EAAuC0B,OAAvC,EAAgDC,cAAhD,EAAgE;AAChF,YAAQD,OAAR;AACE,WAAK,MAAL;AACE,eAAO5B,kBAAkB,CAAC8B,iBAAnB,CAAqC5B,WAArC,EAAkD,MAAlD,CAAP;;AAEF,WAAK,QAAL;AACE,eAAOF,kBAAkB,CAAC8B,iBAAnB,CAAqC5B,WAArC,EAAkD,QAAlD,CAAP;;AAEF,WAAK,WAAL;AACE,eAAOF,kBAAkB,CAAC8B,iBAAnB,CAAqC5B,WAArC,EAAkD,WAAlD,CAAP;;AAEF,WAAK,MAAL;AACE,eAAOF,kBAAkB,CAAC+B,UAAnB,CAA8B7B,WAA9B,CAAP;;AAEF,WAAK,WAAL;AACA,WAAK,gBAAL;AACA,WAAK,4BAAL;AACE,eAAOF,kBAAkB,CAACgC,WAAnB,CAA+B9B,WAA/B,CAAP;;AAEF,WAAK,QAAL;AACA,WAAK,aAAL;AACA,WAAK,wBAAL;AACE,eAAOF,kBAAkB,CAACiC,QAAnB,CAA4B/B,WAA5B,CAAP;;AAEF;AACE;AACA,eAAO,IAAP;AAzBJ;AA2BD,GA/CsB;AAgDvBgC,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BhC,WAA3B,EAAwC;AACzD,QAAIG,YAAY,GAAGV,aAAa,CAACwC,UAAd,CAAyBjC,WAAW,CAACI,iBAAZ,EAAzB,EAA0DJ,WAAW,CAACE,YAAZ,EAA1D,EAAsF,IAAtF,EAA4FF,WAAW,CAACkC,qBAAZ,EAA5F,EAAiI,IAAjI,CAAnB;AACA,QAAIC,cAAc,GAAGxC,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8BG,YAA9B,EAA4C,mBAA5C,CAArB;AACA,WAAOR,WAAW,CAAC0C,cAAZ,CAA2BF,cAA3B,EAA2ChC,YAAY,CAACmC,iBAAb,EAA3C,CAAP;AACD,GApDsB;;AAsDvB;;;;AAIAR,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqB9B,WAArB,EAAkC;AAC7C,QAAIC,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;;AAEA,QAAI,CAACD,SAAS,CAACsC,WAAV,EAAD,IAA4BtC,SAAS,CAACuC,eAAV,EAA5B,IAA2DvC,SAAS,CAACwC,cAAV,EAA/D,EAA2F;AACzF,aAAO,IAAP;AACD,KAL4C,CAK3C;;;AAGF,QAAIC,OAAO,GAAG1C,WAAW,CAACI,iBAAZ,EAAd;AACA,QAAIuC,QAAQ,GAAG1C,SAAS,CAACmB,WAAV,EAAf;AACA,QAAIwB,WAAW,GAAGF,OAAO,CAACG,cAAR,CAAuBF,QAAvB,CAAlB;;AAEA,QAAIC,WAAW,IAAIA,WAAW,CAAC1B,OAAZ,OAA0B,QAA7C,EAAuD;AACrD,UAAI4B,QAAQ,GAAGJ,OAAO,CAACK,WAAR,GAAsB,QAAtB,EAAgCH,WAAW,CAACI,MAAZ,EAAhC,CAAf;AACA,UAAIC,kBAAkB,GAAGP,OAAO,CAACQ,KAAR,CAAc;AACrCJ,QAAAA,QAAQ,EAAEA,QAD2B;AAErCK,QAAAA,cAAc,EAAElD;AAFqB,OAAd,CAAzB;;AAKA,UAAIgD,kBAAkB,KAAKP,OAA3B,EAAoC;AAClC,eAAO/C,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8BiD,kBAA9B,EAAkD,cAAlD,CAAP;AACD;AACF,KAtB4C,CAsB3C;;;AAGF,QAAIG,iBAAiB,GAAGtD,kBAAkB,CAACuD,qBAAnB,CAAyCrD,WAAzC,CAAxB;;AAEA,QAAIoD,iBAAJ,EAAuB;AACrB,aAAOzD,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8BoD,iBAA9B,EAAiD,mBAAjD,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GA1FsB;AA2FvBrB,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkB/B,WAAlB,EAA+B;AACvC,QAAIC,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;;AAEA,QAAI,CAACD,SAAS,CAACsC,WAAV,EAAL,EAA8B;AAC5B,aAAO,IAAP;AACD;;AAED,QAAIG,OAAO,GAAG1C,WAAW,CAACI,iBAAZ,EAAd;AACA,QAAIuC,QAAQ,GAAG1C,SAAS,CAACmB,WAAV,EAAf;AACA,QAAIkC,KAAK,GAAGZ,OAAO,CAACnC,cAAR,CAAuBoC,QAAvB,CAAZ;AACA,QAAIY,MAAM,GAAGD,KAAK,CAACE,SAAN,EAAb,CAVuC,CAUP;;AAEhC,QAAIvD,SAAS,CAACU,cAAV,KAA6B4C,MAAjC,EAAyC;AACvC,aAAO,IAAP;AACD;;AAED,QAAIE,UAAU,GAAGf,OAAO,CAACgB,aAAR,CAAsBf,QAAtB,CAAjB;;AAEA,QAAI,CAACc,UAAD,IAAeA,UAAU,CAACvC,OAAX,OAAyB,QAA5C,EAAsD;AACpD,aAAO,IAAP;AACD;;AAED,QAAIyC,iBAAiB,GAAG1D,SAAS,CAACiD,KAAV,CAAgB;AACtCU,MAAAA,QAAQ,EAAEH,UAAU,CAACT,MAAX,EAD4B;AAEtCa,MAAAA,WAAW,EAAEJ,UAAU,CAACD,SAAX;AAFyB,KAAhB,CAAxB;AAIA,QAAIP,kBAAkB,GAAGxD,aAAa,CAACqE,WAAd,CAA0BpB,OAA1B,EAAmCiB,iBAAnC,EAAsD,SAAtD,CAAzB;;AAEA,QAAIV,kBAAkB,KAAKP,OAA3B,EAAoC;AAClC,aAAO/C,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8BiD,kBAA9B,EAAkD,cAAlD,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GA5HsB;AA6HvBc,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,KAAf,EAAsBhE,WAAtB,EAAmCiE,QAAnC,EAA6C;AAClD,QAAIhE,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;AACA,QAAIgE,GAAG,GAAGjE,SAAS,CAACO,YAAV,EAAV;;AAEA,QAAI0D,GAAG,KAAKjE,SAAS,CAACkE,WAAV,EAAZ,EAAqC;AACnC,aAAOnE,WAAP;AACD;;AAED,QAAI0C,OAAO,GAAG1C,WAAW,CAACI,iBAAZ,EAAd;AACA,QAAIkD,KAAK,GAAGZ,OAAO,CAACnC,cAAR,CAAuB2D,GAAvB,CAAZ;AACA,QAAIE,IAAI,GAAGd,KAAK,CAACpC,OAAN,EAAX;;AAEA,QAAIkD,IAAI,KAAK,qBAAT,IAAkCA,IAAI,KAAK,mBAA/C,EAAoE;AAClE,aAAOpE,WAAP;AACD;;AAEDgE,IAAAA,KAAK,CAACK,cAAN;AACA,QAAIC,KAAK,GAAGhB,KAAK,CAACiB,QAAN,EAAZ;;AAEA,QAAI,CAACP,KAAK,CAACQ,QAAP,IAAmBF,KAAK,KAAKL,QAAjC,EAA2C;AACzC,aAAOjE,WAAP;AACD;;AAED,QAAIyE,cAAc,GAAG7E,+BAA+B,CAAC8C,OAAD,EAAUzC,SAAV,EAAqB+D,KAAK,CAACQ,QAAN,GAAiB,CAAC,CAAlB,GAAsB,CAA3C,EAA8CP,QAA9C,CAApD;AACA,WAAOtE,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8ByE,cAA9B,EAA8C,cAA9C,CAAP;AACD,GAtJsB;AAuJvBC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyB1E,WAAzB,EAAsC2E,SAAtC,EAAiD;AAChE,QAAI1E,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;AACA,QAAIyC,QAAQ,GAAG1C,SAAS,CAACmB,WAAV,EAAf;AACA,QAAIwD,MAAM,GAAG3E,SAAS,CAAC4E,SAAV,EAAb;AACA,QAAInC,OAAO,GAAG1C,WAAW,CAACI,iBAAZ,EAAd;AACA,QAAI0E,MAAM,GAAG7E,SAAb,CALgE,CAKxC;AACxB;AACA;AACA;;AAEA,QAAI0C,QAAQ,KAAKiC,MAAb,IAAuB3E,SAAS,CAACW,YAAV,OAA6B,CAAxD,EAA2D;AACzD,UAAIgC,WAAW,GAAG/C,UAAU,CAAC6C,OAAO,CAACG,cAAR,CAAuB+B,MAAvB,CAAD,CAA5B;AACAA,MAAAA,MAAM,GAAGhC,WAAW,CAACI,MAAZ,EAAT;AACA8B,MAAAA,MAAM,GAAGA,MAAM,CAAC5B,KAAP,CAAa;AACpB6B,QAAAA,SAAS,EAAEpC,QADS;AAEpBqC,QAAAA,YAAY,EAAE/E,SAAS,CAACU,cAAV,EAFM;AAGpBiD,QAAAA,QAAQ,EAAEgB,MAHU;AAIpBf,QAAAA,WAAW,EAAEjB,WAAW,CAACY,SAAZ,EAJO;AAKpByB,QAAAA,UAAU,EAAE;AALQ,OAAb,CAAT;AAOD;;AAED,QAAIC,cAAc,GAAGxC,OAAO,CAACK,WAAR,GAAsBoC,SAAtB,CAAgC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACnE,aAAOA,CAAC,KAAK1C,QAAb;AACD,KAFoB,EAElB2C,OAFkB,GAERH,SAFQ,CAEE,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACrC,aAAOA,CAAC,KAAKT,MAAb;AACD,KAJoB,EAIlB/D,IAJkB,CAIb,UAAUC,CAAV,EAAa;AACnB,aAAOA,CAAC,CAACI,OAAF,OAAgB,QAAvB;AACD,KANoB,CAArB;;AAQA,QAAIgE,cAAJ,EAAoB;AAClB,aAAOlF,WAAP;AACD;;AAED,QAAIuF,SAAS,GAAG7C,OAAO,CAACnC,cAAR,CAAuBoC,QAAvB,EAAiCzB,OAAjC,OAA+CyD,SAA/C,GAA2D,UAA3D,GAAwEA,SAAxF;AACA,WAAOhF,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8BP,aAAa,CAAC+F,YAAd,CAA2B9C,OAA3B,EAAoCoC,MAApC,EAA4CS,SAA5C,CAA9B,EAAsF,mBAAtF,CAAP;AACD,GA3LsB;AA4LvB1D,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoB7B,WAApB,EAAiC;AAC3C,QAAIC,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;AACA,QAAI6E,SAAS,GAAG9E,SAAS,CAACO,YAAV,EAAhB;AACA,QAAIoD,QAAQ,GAAG3D,SAAS,CAACkE,WAAV,EAAf;;AAEA,QAAIlE,SAAS,CAACsC,WAAV,MAA2BwC,SAAS,KAAKnB,QAA7C,EAAuD;AACrD,aAAO9D,kBAAkB,CAAC4E,eAAnB,CAAmC1E,WAAnC,EAAgD,YAAhD,CAAP;AACD;;AAED,WAAOF,kBAAkB,CAAC8B,iBAAnB,CAAqC5B,WAArC,EAAkD,MAAlD,CAAP;AACD,GAtMsB;;AAwMvB;;;;;;AAMA4B,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2B5B,WAA3B,EAAwCyF,WAAxC,EAAqD;AACtE,QAAIxF,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;AACA,QAAIwF,YAAY,GAAG1F,WAAW,CAACkC,qBAAZ,EAAnB,CAFsE,CAEd;AACxD;AACA;;AAEA,QAAIjC,SAAS,CAACsC,WAAV,EAAJ,EAA6B;AAC3B,aAAO5C,WAAW,CAACgG,sBAAZ,CAAmC3F,WAAnC,EAAgD0F,YAAY,CAACE,GAAb,CAAiBH,WAAjB,IAAgCC,YAAY,CAACG,MAAb,CAAoBJ,WAApB,CAAhC,GAAmEC,YAAY,CAACI,GAAb,CAAiBL,WAAjB,CAAnH,CAAP;AACD,KARqE,CAQpE;AACF;;;AAGA,QAAI/C,OAAO,GAAG1C,WAAW,CAACI,iBAAZ,EAAd;AACA,QAAI2F,UAAJ,CAbsE,CAatD;AAChB;;AAEA,QAAIL,YAAY,CAACE,GAAb,CAAiBH,WAAjB,CAAJ,EAAmC;AACjCM,MAAAA,UAAU,GAAGtG,aAAa,CAACuG,iBAAd,CAAgCtD,OAAhC,EAAyCzC,SAAzC,EAAoDwF,WAApD,CAAb;AACD,KAFD,MAEO;AACLM,MAAAA,UAAU,GAAGtG,aAAa,CAACwG,gBAAd,CAA+BvD,OAA/B,EAAwCzC,SAAxC,EAAmDwF,WAAnD,CAAb;AACD;;AAED,WAAO9F,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8B+F,UAA9B,EAA0C,qBAA1C,CAAP;AACD,GArOsB;AAsOvBG,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBlG,WAApB,EAAiCmG,eAAjC,EAAkDC,SAAlD,EAA6D;AACvE,QAAIC,WAAW,GAAG5G,aAAa,CAAC6G,WAAd,CAA0BtG,WAAW,CAACI,iBAAZ,EAA1B,EAA2D+F,eAA3D,EAA4EC,SAA5E,CAAlB;AACA,WAAOzG,WAAW,CAACyC,IAAZ,CAAiBpC,WAAjB,EAA8BqG,WAA9B,EAA2C,cAA3C,CAAP;AACD,GAzOsB;;AA2OvB;;;;AAIAhD,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BrD,WAA/B,EAA4C;AACjE,QAAIC,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAhB;AACA,QAAIqG,MAAM,GAAGtG,SAAS,CAACuC,eAAV,EAAb;;AAEA,QAAIvC,SAAS,CAACsC,WAAV,MAA2BgE,MAAM,KAAK,CAA1C,EAA6C;AAC3C,UAAIrC,GAAG,GAAGjE,SAAS,CAACO,YAAV,EAAV;AACA,UAAIkC,OAAO,GAAG1C,WAAW,CAACI,iBAAZ,EAAd;AACA,UAAIkD,KAAK,GAAGZ,OAAO,CAACnC,cAAR,CAAuB2D,GAAvB,CAAZ;AACA,UAAIE,IAAI,GAAGd,KAAK,CAACpC,OAAN,EAAX;AACA,UAAI0B,WAAW,GAAGF,OAAO,CAACG,cAAR,CAAuBqB,GAAvB,CAAlB;;AAEA,UAAIE,IAAI,KAAK,YAAT,IAAyBxB,WAAzB,IAAwCA,WAAW,CAAC1B,OAAZ,OAA0B,YAAlE,IAAkF0B,WAAW,CAACY,SAAZ,OAA4B,CAAlH,EAAqH;AACnH,eAAO,IAAP;AACD;;AAED,UAAIY,IAAI,KAAK,UAAb,EAAyB;AACvB,eAAO3E,aAAa,CAAC+F,YAAd,CAA2B9C,OAA3B,EAAoCzC,SAApC,EAA+C,UAA/C,CAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;AApQsB,CAAzB;AAsQAuG,MAAM,CAACC,OAAP,GAAiB3G,kBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar adjustBlockDepthForContentState = require(\"./adjustBlockDepthForContentState\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n\nvar RichTextEditorUtil = {\n  currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n    var selection = editorState.getSelection();\n    var contentState = editorState.getCurrentContent();\n    var entityMap = contentState.getEntityMap();\n    return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {\n      var entity = v.getEntity();\n      return !!entity && entityMap.__get(entity).getType() === 'LINK';\n    });\n  },\n  getCurrentBlockType: function getCurrentBlockType(editorState) {\n    var selection = editorState.getSelection();\n    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  },\n  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n    return {\n      url: uri.toString()\n    };\n  },\n  handleKeyCommand: function handleKeyCommand(editorState, command, eventTimeStamp) {\n    switch (command) {\n      case 'bold':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');\n\n      case 'italic':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');\n\n      case 'underline':\n        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');\n\n      case 'code':\n        return RichTextEditorUtil.toggleCode(editorState);\n\n      case 'backspace':\n      case 'backspace-word':\n      case 'backspace-to-start-of-line':\n        return RichTextEditorUtil.onBackspace(editorState);\n\n      case 'delete':\n      case 'delete-word':\n      case 'delete-to-end-of-block':\n        return RichTextEditorUtil.onDelete(editorState);\n\n      default:\n        // they may have custom editor commands; ignore those\n        return null;\n    }\n  },\n  insertSoftNewline: function insertSoftNewline(editorState) {\n    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\\n', editorState.getCurrentInlineStyle(), null);\n    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');\n    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n  },\n\n  /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */\n  onBackspace: function onBackspace(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n      return null;\n    } // First, try to remove a preceding atomic block.\n\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var blockBefore = content.getBlockBefore(startKey);\n\n    if (blockBefore && blockBefore.getType() === 'atomic') {\n      var blockMap = content.getBlockMap()[\"delete\"](blockBefore.getKey());\n      var withoutAtomicBlock = content.merge({\n        blockMap: blockMap,\n        selectionAfter: selection\n      });\n\n      if (withoutAtomicBlock !== content) {\n        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n      }\n    } // If that doesn't succeed, try to remove the current block style.\n\n\n    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n\n    if (withoutBlockStyle) {\n      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');\n    }\n\n    return null;\n  },\n  onDelete: function onDelete(editorState) {\n    var selection = editorState.getSelection();\n\n    if (!selection.isCollapsed()) {\n      return null;\n    }\n\n    var content = editorState.getCurrentContent();\n    var startKey = selection.getStartKey();\n    var block = content.getBlockForKey(startKey);\n    var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.\n\n    if (selection.getStartOffset() < length) {\n      return null;\n    }\n\n    var blockAfter = content.getBlockAfter(startKey);\n\n    if (!blockAfter || blockAfter.getType() !== 'atomic') {\n      return null;\n    }\n\n    var atomicBlockTarget = selection.merge({\n      focusKey: blockAfter.getKey(),\n      focusOffset: blockAfter.getLength()\n    });\n    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');\n\n    if (withoutAtomicBlock !== content) {\n      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');\n    }\n\n    return null;\n  },\n  onTab: function onTab(event, editorState, maxDepth) {\n    var selection = editorState.getSelection();\n    var key = selection.getAnchorKey();\n\n    if (key !== selection.getFocusKey()) {\n      return editorState;\n    }\n\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(key);\n    var type = block.getType();\n\n    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {\n      return editorState;\n    }\n\n    event.preventDefault();\n    var depth = block.getDepth();\n\n    if (!event.shiftKey && depth === maxDepth) {\n      return editorState;\n    }\n\n    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\n    return EditorState.push(editorState, withAdjustment, 'adjust-depth');\n  },\n  toggleBlockType: function toggleBlockType(editorState, blockType) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var target = selection; // Triple-click can lead to a selection that includes offset 0 of the\n    // following block. The `SelectionState` for this case is accurate, but\n    // we should avoid toggling block type for the trailing block because it\n    // is a confusing interaction.\n\n    if (startKey !== endKey && selection.getEndOffset() === 0) {\n      var blockBefore = nullthrows(content.getBlockBefore(endKey));\n      endKey = blockBefore.getKey();\n      target = target.merge({\n        anchorKey: startKey,\n        anchorOffset: selection.getStartOffset(),\n        focusKey: endKey,\n        focusOffset: blockBefore.getLength(),\n        isBackward: false\n      });\n    }\n\n    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {\n      return k !== startKey;\n    }).reverse().skipWhile(function (_, k) {\n      return k !== endKey;\n    }).some(function (v) {\n      return v.getType() === 'atomic';\n    });\n\n    if (hasAtomicBlock) {\n      return editorState;\n    }\n\n    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;\n    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');\n  },\n  toggleCode: function toggleCode(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n\n    if (selection.isCollapsed() || anchorKey !== focusKey) {\n      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');\n    }\n\n    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');\n  },\n\n  /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */\n  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n    var selection = editorState.getSelection();\n    var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and\n    // set the result as the new inline style override. This will then be\n    // used as the inline style for the next character to be inserted.\n\n    if (selection.isCollapsed()) {\n      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n    } // If characters are selected, immediately apply or remove the\n    // inline style on the document state itself.\n\n\n    var content = editorState.getCurrentContent();\n    var newContent; // If the style is already present for the selection range, remove it.\n    // Otherwise, apply it.\n\n    if (currentStyle.has(inlineStyle)) {\n      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n    } else {\n      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n    }\n\n    return EditorState.push(editorState, newContent, 'change-inline-style');\n  },\n  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n    return EditorState.push(editorState, withoutLink, 'apply-entity');\n  },\n\n  /**\n   * When a collapsed cursor is at the start of a styled block, changes block\n   * type to 'unstyled'. Returns null if selection does not meet that criteria.\n   */\n  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n    var selection = editorState.getSelection();\n    var offset = selection.getAnchorOffset();\n\n    if (selection.isCollapsed() && offset === 0) {\n      var key = selection.getAnchorKey();\n      var content = editorState.getCurrentContent();\n      var block = content.getBlockForKey(key);\n      var type = block.getType();\n      var blockBefore = content.getBlockBefore(key);\n\n      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block' && blockBefore.getLength() !== 0) {\n        return null;\n      }\n\n      if (type !== 'unstyled') {\n        return DraftModifier.setBlockType(content, selection, 'unstyled');\n      }\n    }\n\n    return null;\n  }\n};\nmodule.exports = RichTextEditorUtil;"]},"metadata":{},"sourceType":"script"}