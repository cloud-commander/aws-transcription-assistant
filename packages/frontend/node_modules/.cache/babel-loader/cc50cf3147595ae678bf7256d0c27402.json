{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventStreamMarshaller = void 0;\n\nvar crc32_1 = require(\"@aws-crypto/crc32\");\n\nvar HeaderMarshaller_1 = require(\"./HeaderMarshaller\");\n\nvar splitMessage_1 = require(\"./splitMessage\");\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\n\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);\n  }\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n\n\n  EventStreamMarshaller.prototype.marshall = function (_a) {\n    var rawHeaders = _a.headers,\n        body = _a.body;\n    var headers = this.headerMarshaller.format(rawHeaders);\n    var length = headers.byteLength + body.byteLength + 16;\n    var out = new Uint8Array(length);\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    var checksum = new crc32_1.Crc32(); // Format message\n\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12); // Write trailing message checksum\n\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  };\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n\n\n  EventStreamMarshaller.prototype.unmarshall = function (message) {\n    var _a = splitMessage_1.splitMessage(message),\n        headers = _a.headers,\n        body = _a.body;\n\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body: body\n    };\n  };\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n\n\n  EventStreamMarshaller.prototype.formatHeaders = function (rawHeaders) {\n    return this.headerMarshaller.format(rawHeaders);\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexports.EventStreamMarshaller = EventStreamMarshaller;","map":{"version":3,"sources":["../../src/EventStreamMarshaller.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAIA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAEA;;;;;;AAIA,IAAA,qBAAA;AAAA;AAAA,YAAA;AAGE,WAAA,qBAAA,CAAY,MAAZ,EAA6B,QAA7B,EAA8C;AAC5C,SAAK,gBAAL,GAAwB,IAAI,kBAAA,CAAA,gBAAJ,CAAqB,MAArB,EAA6B,QAA7B,CAAxB;AACD;AAED;;;;;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,EAAT,EAA+C;QAA3B,UAAU,GAAA,EAAA,CAAA,O;QAAE,IAAI,GAAA,EAAA,CAAA,I;AAClC,QAAM,OAAO,GAAG,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,UAA7B,CAAhB;AACA,QAAM,MAAM,GAAG,OAAO,CAAC,UAAR,GAAqB,IAAI,CAAC,UAA1B,GAAuC,EAAtD;AAEA,QAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAZ;AACA,QAAM,IAAI,GAAG,IAAI,QAAJ,CAAa,GAAG,CAAC,MAAjB,EAAyB,GAAG,CAAC,UAA7B,EAAyC,GAAG,CAAC,UAA7C,CAAb;AACA,QAAM,QAAQ,GAAG,IAAI,OAAA,CAAA,KAAJ,EAAjB,CAN6C,CAQ7C;;AACA,IAAA,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,MAAlB,EAA0B,KAA1B;AACA,IAAA,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,OAAO,CAAC,UAA1B,EAAsC,KAAtC;AACA,IAAA,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,QAAQ,CAAC,MAAT,CAAgB,GAAG,CAAC,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAhB,EAAoC,MAApC,EAAlB,EAAgE,KAAhE;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,OAAR,EAAiB,EAAjB;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,IAAR,EAAc,OAAO,CAAC,UAAR,GAAqB,EAAnC,EAb6C,CAe7C;;AACA,IAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,QAAQ,CAAC,MAAT,CAAgB,GAAG,CAAC,QAAJ,CAAa,CAAb,EAAgB,MAAM,GAAG,CAAzB,CAAhB,EAA6C,MAA7C,EAA3B,EAAkF,KAAlF;AAEA,WAAO,GAAP;AACD,GAnBD;AAqBA;;;;;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,OAAX,EAAmC;AAC3B,QAAA,EAAA,GAAoB,cAAA,CAAA,YAAA,CAAa,OAAb,CAApB;AAAA,QAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,QAAW,IAAI,GAAA,EAAA,CAAA,IAAf;;AAEN,WAAO;AAAE,MAAA,OAAO,EAAE,KAAK,gBAAL,CAAsB,KAAtB,CAA4B,OAA5B,CAAX;AAAiD,MAAA,IAAI,EAAA;AAArD,KAAP;AACD,GAJD;AAMA;;;;;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,UAAd,EAAwC;AACtC,WAAO,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,UAA7B,CAAP;AACD,GAFD;;AAGF,SAAA,qBAAA;AAAC,CAjDD,EAAA;;AAAa,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nimport { Message, MessageHeaders } from \"@aws-sdk/types\";\nimport { Decoder, Encoder } from \"@aws-sdk/types\";\n\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nexport class EventStreamMarshaller {\n  private readonly headerMarshaller: HeaderMarshaller;\n\n  constructor(toUtf8: Encoder, fromUtf8: Decoder) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  marshall({ headers: rawHeaders, body }: Message): Uint8Array {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n\n    // Write trailing message checksum\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n\n    return out;\n  }\n\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  unmarshall(message: ArrayBufferView): Message {\n    const { headers, body } = splitMessage(message);\n\n    return { headers: this.headerMarshaller.parse(headers), body };\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  formatHeaders(rawHeaders: MessageHeaders): Uint8Array {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}