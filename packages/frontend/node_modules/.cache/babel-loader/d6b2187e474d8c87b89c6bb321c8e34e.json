{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport { resolveEndpointsConfig, resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig } from \"@aws-sdk/middleware-host-header\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\n\nvar LexRuntimeServiceClient =\n/** @class */\nfunction (_super) {\n  __extends(LexRuntimeServiceClient, _super);\n\n  function LexRuntimeServiceClient(configuration) {\n    var _this = this;\n\n    var _config_0 = __assign(__assign({}, __ClientDefaultValues), configuration);\n\n    var _config_1 = resolveRegionConfig(_config_0);\n\n    var _config_2 = resolveEndpointsConfig(_config_1);\n\n    var _config_3 = resolveAwsAuthConfig(_config_2);\n\n    var _config_4 = resolveRetryConfig(_config_3);\n\n    var _config_5 = resolveUserAgentConfig(_config_4);\n\n    var _config_6 = resolveHostHeaderConfig(_config_5);\n\n    _this = _super.call(this, _config_6) || this;\n    _this.config = _config_6;\n\n    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));\n\n    _this.middlewareStack.use(getRetryPlugin(_this.config));\n\n    _this.middlewareStack.use(getUserAgentPlugin(_this.config));\n\n    _this.middlewareStack.use(getContentLengthPlugin(_this.config));\n\n    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));\n\n    return _this;\n  }\n\n  LexRuntimeServiceClient.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  return LexRuntimeServiceClient;\n}(__Client);\n\nexport { LexRuntimeServiceClient };","map":{"version":3,"sources":["../../LexRuntimeServiceClient.ts"],"names":[],"mappings":";AAKA,SAAS,mBAAmB,IAAI,qBAAhC,QAA6D,iBAA7D;AACA,SAKE,sBALF,EAME,mBANF,QAOO,0BAPP;AAQA,SAAS,sBAAT,QAAuC,oCAAvC;AACA,SAGE,mBAHF,EAIE,uBAJF,QAKO,iCALP;AAMA,SAAgD,cAAhD,EAAgE,kBAAhE,QAA0F,2BAA1F;AACA,SAGE,gBAHF,EAIE,oBAJF,QAKO,6BALP;AAMA,SAGE,kBAHF,EAIE,sBAJF,QAKO,gCALP;AAOA,SACE,MAAM,IAAI,QADZ,QAIO,wBAJP;AA0IA;;;;;;;;;;;;AAWA,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;;AAQ3C,WAAA,uBAAA,CAAY,aAAZ,EAAwD;AAAxD,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,SAAS,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACR,qBADQ,CAAA,EAER,aAFQ,CAAb;;AAIA,QAAI,SAAS,GAAG,mBAAmB,CAAC,SAAD,CAAnC;;AACA,QAAI,SAAS,GAAG,sBAAsB,CAAC,SAAD,CAAtC;;AACA,QAAI,SAAS,GAAG,oBAAoB,CAAC,SAAD,CAApC;;AACA,QAAI,SAAS,GAAG,kBAAkB,CAAC,SAAD,CAAlC;;AACA,QAAI,SAAS,GAAG,sBAAsB,CAAC,SAAD,CAAtC;;AACA,QAAI,SAAS,GAAG,uBAAuB,CAAC,SAAD,CAAvC;;AACA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,KAAgB,IAAhB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,SAAd;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,gBAAgB,CAAC,KAAI,CAAC,MAAN,CAAzC;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,cAAc,CAAC,KAAI,CAAC,MAAN,CAAvC;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,kBAAkB,CAAC,KAAI,CAAC,MAAN,CAA3C;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,sBAAsB,CAAC,KAAI,CAAC,MAAN,CAA/C;;AACA,IAAA,KAAI,CAAC,eAAL,CAAqB,GAArB,CAAyB,mBAAmB,CAAC,KAAI,CAAC,MAAN,CAA5C;;;AACD;;AAED,EAAA,uBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;AACD,GAFD;;AAGF,SAAA,uBAAA;AAAC,CA/BD,CAA6C,QAA7C,CAAA","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport { resolveEndpointsConfig, resolveRegionConfig, } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig, } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\nvar LexRuntimeServiceClient = /** @class */ (function (_super) {\n    __extends(LexRuntimeServiceClient, _super);\n    function LexRuntimeServiceClient(configuration) {\n        var _this = this;\n        var _config_0 = __assign(__assign({}, __ClientDefaultValues), configuration);\n        var _config_1 = resolveRegionConfig(_config_0);\n        var _config_2 = resolveEndpointsConfig(_config_1);\n        var _config_3 = resolveAwsAuthConfig(_config_2);\n        var _config_4 = resolveRetryConfig(_config_3);\n        var _config_5 = resolveUserAgentConfig(_config_4);\n        var _config_6 = resolveHostHeaderConfig(_config_5);\n        _this = _super.call(this, _config_6) || this;\n        _this.config = _config_6;\n        _this.middlewareStack.use(getAwsAuthPlugin(_this.config));\n        _this.middlewareStack.use(getRetryPlugin(_this.config));\n        _this.middlewareStack.use(getUserAgentPlugin(_this.config));\n        _this.middlewareStack.use(getContentLengthPlugin(_this.config));\n        _this.middlewareStack.use(getHostHeaderPlugin(_this.config));\n        return _this;\n    }\n    LexRuntimeServiceClient.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    return LexRuntimeServiceClient;\n}(__Client));\nexport { LexRuntimeServiceClient };\n//# sourceMappingURL=LexRuntimeServiceClient.js.map"]},"metadata":{},"sourceType":"module"}