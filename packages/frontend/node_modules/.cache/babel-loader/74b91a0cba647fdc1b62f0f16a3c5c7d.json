{"ast":null,"code":"var _jsxFileName = \"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/TranscriptionEngine.js\";\n\n/* eslint-disable */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TranscriptEditor from \"./packages/components/transcript-editor\";\nimport SttTypeSelect from \"./select-stt-json-type\";\nimport ExportFormatSelect from \"./select-export-format\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport style from \"./index.module.scss\";\n/*\nimport {\n  loadLocalSavedData,\n  isPresentInLocalStorage,\n  localSave\n} from \"./local-storage.js\";\n\n*/\n\nimport axios from 'axios'; //import DEMO_TRANSCRIPT from \"./sample-data/AWS-Transcribe-Sample.json\";\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\nexport default class TranscriptionEngine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleExportFormatChange = event => {\n      console.log(\"EXPORT METHOD\");\n      console.log(event.target.name, event.target.value);\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.exportTranscript = () => {\n      console.log(\"export\"); // eslint-disable-next-line react/no-string-refs\n\n      const {\n        data,\n        ext\n      } = this.transcriptEditorRef.current.getEditorContent(this.state.exportFormat);\n      let tmpData = data;\n\n      if (ext === \"json\") {\n        tmpData = JSON.stringify(data, null, 2);\n      }\n\n      if (ext !== \"docx\") {\n        this.download(tmpData, `${this.state.mediaUrl}.${ext}`);\n      }\n    };\n\n    this.download = (content, filename, contentType) => {\n      console.log(\"download\");\n      const type = contentType || \"application/octet-stream\";\n      const link = document.createElement(\"a\");\n      const blob = new Blob([content], {\n        type: type\n      });\n      link.href = window.URL.createObjectURL(blob);\n      link.download = filename; // Firefox fix - cannot do link.click() if it's not attached to DOM in firefox\n      // https://stackoverflow.com/questions/32225904/programmatical-click-on-a-tag-not-working-in-firefox\n\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n\n    this.state = {\n      transcriptJSONBlob: null,\n      transcriptJSON: this.props.transcriptJSON,\n      mediaUrl: this.props.mediaUrl,\n      isTextEditable: true,\n      spellCheck: false,\n      sttType: \"amazontranscribe\",\n      analyticsEvents: [],\n      title: this.props.audioTitle,\n      fileName: \"\",\n      autoSaveData: {},\n      autoSaveContentType: \"MS Word\",\n      autoSaveExtension: \"docx\"\n    };\n    console.log(\"1 Transcript JSON: \" + this.props.transcriptJSON); //console.log(\"1 Transcript Blob: \" + this.state.transcriptJSONBlob);\n    //console.log(JSON.stringify(this.state.transcriptJSONBlob));\n\n    console.log(\"1 Media URL: \" + this.state.mediaUrl);\n    console.log(\"1 Title \" + this.state.title);\n    this.transcriptEditorRef = React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(this.state.transcriptJSON).then(response => {\n      console.log(\"RESPONSE DATA\" + response.data);\n      console.log(JSON.stringify(response.data));\n      this.setState({\n        transcriptJSONBlob: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  /*\n  loadDemo = () => {\n    if(isPresentInLocalStorage(this.props.mediaUrl)){\n      const transcriptDataFromLocalStorage = loadLocalSavedData(this.props.mediaUrl)\n      this.setState({\n        transcriptData: transcriptDataFromLocalStorage,\n        mediaUrl: this.props.mediaUrl,\n        title: this.props.audioTitle,\n        sttType: 'amazontranscribe'\n      });\n    }\n    else{\n       this.setState({\n        transcriptData: DEMO_TRANSCRIPT,\n        mediaUrl: this.props.mediaUrl,\n        title: this.props.audioTitle,\n        sttType: \"amazontranscribe\"\n      });\n    }\n  \n  };\n  \n  // https://stackoverflow.com/questions/8885701/play-local-hard-drive-video-file-with-html5-video-tag\n  handleLoadMedia = files => {\n    const file = files[0];\n    const videoNode = document.createElement(\"video\");\n    const canPlay = videoNode.canPlayType(file.type);\n  \n    if (canPlay) {\n      const fileURL = URL.createObjectURL(file);\n      this.setState({\n        transcriptData: DEMO_TRANSCRIPT,\n        mediaUrl: fileURL,\n        fileName: file.name\n      });\n    } else {\n      alert(\"Select a valid audio or video file.\");\n    }\n  };\n  \n  handleLoadMediaUrl = () => {\n    const fileURL = prompt(\"Paste the URL you'd like to use here:\");\n  \n    this.setState({\n      transcriptData: DEMO_TRANSCRIPT,\n      mediaUrl: fileURL\n    });\n  };\n  \n  handleLoadTranscriptJson = files => {\n    const file = files[0];\n  \n    if (file.type === \"application/json\") {\n      const fileReader = new FileReader();\n  \n      fileReader.onload = event => {\n        this.setState({\n          transcriptData: JSON.parse(event.target.result)\n        });\n      };\n  \n      fileReader.readAsText(file);\n    } else {\n      alert(\"Select a valid JSON file.\");\n    }\n  };\n  \n  handleIsTextEditable = e => {\n    this.setState({\n      isTextEditable: e.target.checked\n    });\n  };\n  \n  handleSpellCheck = e => {\n    this.setState({\n      spellCheck: e.target.checked\n    });\n  };\n  \n  // https://stackoverflow.com/questions/21733847/react-jsx-selecting-selected-on-selected-select-option\n  handleSttTypeChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  \n  handleChangeTranscriptName = value => {\n    this.setState({ fileName: value });\n  };\n  \n  clearLocalStorage = () => {\n    localStorage.clear();\n    console.info(\"Cleared local storage.\");\n  };\n  \n  handleAnalyticsEvents = event => {\n    this.setState({ analyticsEvents: [...this.state.analyticsEvents, event] });\n  };\n  \n  \n  handleChangeTranscriptTitle = newTitle => {\n    this.setState({\n      title: newTitle\n    });\n  };\n  \n  \n  handleAutoSaveChanges = newAutoSaveData => {\n    console.log(\"handleAutoSaveChanges\", newAutoSaveData);\n    const { data, ext } = newAutoSaveData;\n    this.setState({ autoSaveData: data, autoSaveExtension: ext });\n    // Saving to local storage\n    localSave(this.state.mediaUrl, this.state.fileName, data);\n  };\n  \n  \n  */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: style.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TranscriptEditor, {\n      transcriptJSONBlob: this.state.transcriptJSONBlob,\n      fileName: \"\",\n      mediaUrl: this.state.mediaUrl,\n      isEditable: true,\n      spellCheck: false,\n      sttJsonType: this.state.sttType //handleAnalyticsEvents={false}\n      ,\n      title: this.state.title,\n      ref: this.transcriptEditorRef //handleAutoSaveChanges={this.handleAutoSaveChanges}\n      ,\n      autoSaveContentType: \"MS Word\",\n      mediaType: 'audio',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nTranscriptEditor.propTypes = {\n  title: PropTypes.string,\n  mediaUrl: PropTypes.string,\n  fileName: PropTypes.string,\n  transcriptJSON: PropTypes.string,\n  transcriptJSONBlob: PropTypes.object\n};","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/TranscriptionEngine.js"],"names":["React","PropTypes","TranscriptEditor","SttTypeSelect","ExportFormatSelect","FontAwesomeIcon","faGithub","style","axios","styleLink","document","createElement","rel","href","head","appendChild","TranscriptionEngine","Component","constructor","props","handleExportFormatChange","event","console","log","target","name","value","setState","exportTranscript","data","ext","transcriptEditorRef","current","getEditorContent","state","exportFormat","tmpData","JSON","stringify","download","mediaUrl","content","filename","contentType","type","link","blob","Blob","window","URL","createObjectURL","body","click","removeChild","transcriptJSONBlob","transcriptJSON","isTextEditable","spellCheck","sttType","analyticsEvents","title","audioTitle","fileName","autoSaveData","autoSaveContentType","autoSaveExtension","createRef","componentDidMount","get","then","response","catch","error","render","container","propTypes","string","object"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TranscriptEditor from \"./packages/components/transcript-editor\";\nimport SttTypeSelect from \"./select-stt-json-type\";\nimport ExportFormatSelect from \"./select-export-format\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport style from \"./index.module.scss\";\n\n\n/*\nimport {\n  loadLocalSavedData,\n  isPresentInLocalStorage,\n  localSave\n} from \"./local-storage.js\";\n\n*/\n\nimport axios from 'axios';\n\n//import DEMO_TRANSCRIPT from \"./sample-data/AWS-Transcribe-Sample.json\";\n\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\n\nexport default class TranscriptionEngine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      transcriptJSONBlob: null,\n      transcriptJSON: this.props.transcriptJSON,\n      mediaUrl: this.props.mediaUrl,\n      isTextEditable: true,\n      spellCheck: false,\n      sttType: \"amazontranscribe\",\n      analyticsEvents: [],\n      title: this.props.audioTitle,\n      fileName: \"\",\n      autoSaveData: {},\n      autoSaveContentType: \"MS Word\",\n      autoSaveExtension: \"docx\"\n    };\n\n    console.log(\"1 Transcript JSON: \" + this.props.transcriptJSON);\n    //console.log(\"1 Transcript Blob: \" + this.state.transcriptJSONBlob);\n    //console.log(JSON.stringify(this.state.transcriptJSONBlob));\n    console.log(\"1 Media URL: \" + this.state.mediaUrl);\n    console.log(\"1 Title \" + this.state.title);\n\n    this.transcriptEditorRef = React.createRef();\n}\n\n    componentDidMount() {\n        axios.get(this.state.transcriptJSON)\n        .then(response => {\n                console.log(\"RESPONSE DATA\" + response.data);\n                console.log(JSON.stringify(response.data));\n                this.setState({\n                    transcriptJSONBlob: response.data,\n                });\n            })\n        .catch(error => {\n        console.log(error);\n        });\n    }\n\n/*\nloadDemo = () => {\n  if(isPresentInLocalStorage(this.props.mediaUrl)){\n    const transcriptDataFromLocalStorage = loadLocalSavedData(this.props.mediaUrl)\n    this.setState({\n      transcriptData: transcriptDataFromLocalStorage,\n      mediaUrl: this.props.mediaUrl,\n      title: this.props.audioTitle,\n      sttType: 'amazontranscribe'\n    });\n  }\n  else{\n     this.setState({\n      transcriptData: DEMO_TRANSCRIPT,\n      mediaUrl: this.props.mediaUrl,\n      title: this.props.audioTitle,\n      sttType: \"amazontranscribe\"\n    });\n  }\n\n};\n\n// https://stackoverflow.com/questions/8885701/play-local-hard-drive-video-file-with-html5-video-tag\nhandleLoadMedia = files => {\n  const file = files[0];\n  const videoNode = document.createElement(\"video\");\n  const canPlay = videoNode.canPlayType(file.type);\n\n  if (canPlay) {\n    const fileURL = URL.createObjectURL(file);\n    this.setState({\n      transcriptData: DEMO_TRANSCRIPT,\n      mediaUrl: fileURL,\n      fileName: file.name\n    });\n  } else {\n    alert(\"Select a valid audio or video file.\");\n  }\n};\n\nhandleLoadMediaUrl = () => {\n  const fileURL = prompt(\"Paste the URL you'd like to use here:\");\n\n  this.setState({\n    transcriptData: DEMO_TRANSCRIPT,\n    mediaUrl: fileURL\n  });\n};\n\nhandleLoadTranscriptJson = files => {\n  const file = files[0];\n\n  if (file.type === \"application/json\") {\n    const fileReader = new FileReader();\n\n    fileReader.onload = event => {\n      this.setState({\n        transcriptData: JSON.parse(event.target.result)\n      });\n    };\n\n    fileReader.readAsText(file);\n  } else {\n    alert(\"Select a valid JSON file.\");\n  }\n};\n\nhandleIsTextEditable = e => {\n  this.setState({\n    isTextEditable: e.target.checked\n  });\n};\n\nhandleSpellCheck = e => {\n  this.setState({\n    spellCheck: e.target.checked\n  });\n};\n\n// https://stackoverflow.com/questions/21733847/react-jsx-selecting-selected-on-selected-select-option\nhandleSttTypeChange = event => {\n  this.setState({ [event.target.name]: event.target.value });\n};\n\nhandleChangeTranscriptName = value => {\n  this.setState({ fileName: value });\n};\n\nclearLocalStorage = () => {\n  localStorage.clear();\n  console.info(\"Cleared local storage.\");\n};\n\nhandleAnalyticsEvents = event => {\n  this.setState({ analyticsEvents: [...this.state.analyticsEvents, event] });\n};\n\n\nhandleChangeTranscriptTitle = newTitle => {\n  this.setState({\n    title: newTitle\n  });\n};\n\n\nhandleAutoSaveChanges = newAutoSaveData => {\n  console.log(\"handleAutoSaveChanges\", newAutoSaveData);\n  const { data, ext } = newAutoSaveData;\n  this.setState({ autoSaveData: data, autoSaveExtension: ext });\n  // Saving to local storage\n  localSave(this.state.mediaUrl, this.state.fileName, data);\n};\n\n\n*/\n\nhandleExportFormatChange = event => {\n  console.log(\"EXPORT METHOD\");\n  console.log(event.target.name, event.target.value);\n  this.setState({ [event.target.name]: event.target.value });\n};\n\nexportTranscript = () => {\n  console.log(\"export\");\n  // eslint-disable-next-line react/no-string-refs\n  const { data, ext } = this.transcriptEditorRef.current.getEditorContent(\n    this.state.exportFormat\n  );\n  let tmpData = data;\n  if (ext === \"json\") {\n    tmpData = JSON.stringify(data, null, 2);\n  }\n  if (ext !== \"docx\") {\n    this.download(tmpData, `${this.state.mediaUrl}.${ext}`);\n  }\n};\n\n// https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file\ndownload = (content, filename, contentType) => {\n  console.log(\"download\");\n  const type = contentType || \"application/octet-stream\";\n  const link = document.createElement(\"a\");\n  const blob = new Blob([content], { type: type });\n\n  link.href = window.URL.createObjectURL(blob);\n  link.download = filename;\n  // Firefox fix - cannot do link.click() if it's not attached to DOM in firefox\n  // https://stackoverflow.com/questions/32225904/programmatical-click-on-a-tag-not-working-in-firefox\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n\n\n  render() {\n\n    return (\n\n      <div className={style.container}>\n\n                <TranscriptEditor\n                  transcriptJSONBlob={this.state.transcriptJSONBlob}\n                  fileName={\"\"}\n                  mediaUrl={this.state.mediaUrl}\n                  isEditable={true}\n                  spellCheck={false}\n                  sttJsonType={this.state.sttType}\n                  //handleAnalyticsEvents={false}\n                  title={this.state.title}\n                  ref={this.transcriptEditorRef}\n                  //handleAutoSaveChanges={this.handleAutoSaveChanges}\n                  autoSaveContentType={\"MS Word\"}\n                  mediaType={ 'audio' }\n                />\n      </div>\n    );\n  }\n}\n\nTranscriptEditor.propTypes = {\n  title: PropTypes.string,\n  mediaUrl: PropTypes.string,\n  fileName: PropTypes.string,\n  transcriptJSON: PropTypes.string,\n  transcriptJSONBlob: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}