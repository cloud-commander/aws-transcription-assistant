{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar EditorState = require(\"./EditorState\");\n\nvar expandRangeToStartOfLine = require(\"./expandRangeToStartOfLine\");\n\nvar getDraftEditorSelectionWithNodes = require(\"./getDraftEditorSelectionWithNodes\");\n\nvar moveSelectionBackward = require(\"./moveSelectionBackward\");\n\nvar removeTextWithStrategy = require(\"./removeTextWithStrategy\");\n\nfunction keyCommandBackspaceToStartOfLine(editorState, e) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n\n    if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n\n    var ownerDocument = e.currentTarget.ownerDocument;\n    var domSelection = ownerDocument.defaultView.getSelection(); // getRangeAt can technically throw if there's no selection, but we know\n    // there is one here because text editor has focus (the cursor is a\n    // selection of length 0). Therefore, we don't need to wrap this in a\n    // try-catch block.\n\n    var range = domSelection.getRangeAt(0);\n    range = expandRangeToStartOfLine(range);\n    return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceToStartOfLine;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js"],"names":["EditorState","require","expandRangeToStartOfLine","getDraftEditorSelectionWithNodes","moveSelectionBackward","removeTextWithStrategy","keyCommandBackspaceToStartOfLine","editorState","e","afterRemoval","strategyState","selection","getSelection","isCollapsed","getAnchorOffset","ownerDocument","currentTarget","domSelection","defaultView","range","getRangeAt","endContainer","endOffset","startContainer","startOffset","selectionState","getCurrentContent","push","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIC,wBAAwB,GAAGD,OAAO,CAAC,4BAAD,CAAtC;;AAEA,IAAIE,gCAAgC,GAAGF,OAAO,CAAC,oCAAD,CAA9C;;AAEA,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,yBAAD,CAAnC;;AAEA,IAAII,sBAAsB,GAAGJ,OAAO,CAAC,0BAAD,CAApC;;AAEA,SAASK,gCAAT,CAA0CC,WAA1C,EAAuDC,CAAvD,EAA0D;AACxD,MAAIC,YAAY,GAAGJ,sBAAsB,CAACE,WAAD,EAAc,UAAUG,aAAV,EAAyB;AAC9E,QAAIC,SAAS,GAAGD,aAAa,CAACE,YAAd,EAAhB;;AAEA,QAAID,SAAS,CAACE,WAAV,MAA2BF,SAAS,CAACG,eAAV,OAAgC,CAA/D,EAAkE;AAChE,aAAOV,qBAAqB,CAACM,aAAD,EAAgB,CAAhB,CAA5B;AACD;;AAED,QAAIK,aAAa,GAAGP,CAAC,CAACQ,aAAF,CAAgBD,aAApC;AACA,QAAIE,YAAY,GAAGF,aAAa,CAACG,WAAd,CAA0BN,YAA1B,EAAnB,CAR8E,CAQjB;AAC7D;AACA;AACA;;AAEA,QAAIO,KAAK,GAAGF,YAAY,CAACG,UAAb,CAAwB,CAAxB,CAAZ;AACAD,IAAAA,KAAK,GAAGjB,wBAAwB,CAACiB,KAAD,CAAhC;AACA,WAAOhB,gCAAgC,CAACO,aAAD,EAAgB,IAAhB,EAAsBS,KAAK,CAACE,YAA5B,EAA0CF,KAAK,CAACG,SAAhD,EAA2DH,KAAK,CAACI,cAAjE,EAAiFJ,KAAK,CAACK,WAAvF,CAAhC,CAAoIC,cAA3I;AACD,GAhBwC,EAgBtC,UAhBsC,CAAzC;;AAkBA,MAAIhB,YAAY,KAAKF,WAAW,CAACmB,iBAAZ,EAArB,EAAsD;AACpD,WAAOnB,WAAP;AACD;;AAED,SAAOP,WAAW,CAAC2B,IAAZ,CAAiBpB,WAAjB,EAA8BE,YAA9B,EAA4C,cAA5C,CAAP;AACD;;AAEDmB,MAAM,CAACC,OAAP,GAAiBvB,gCAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar EditorState = require(\"./EditorState\");\n\nvar expandRangeToStartOfLine = require(\"./expandRangeToStartOfLine\");\n\nvar getDraftEditorSelectionWithNodes = require(\"./getDraftEditorSelectionWithNodes\");\n\nvar moveSelectionBackward = require(\"./moveSelectionBackward\");\n\nvar removeTextWithStrategy = require(\"./removeTextWithStrategy\");\n\nfunction keyCommandBackspaceToStartOfLine(editorState, e) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n\n    if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\n      return moveSelectionBackward(strategyState, 1);\n    }\n\n    var ownerDocument = e.currentTarget.ownerDocument;\n    var domSelection = ownerDocument.defaultView.getSelection(); // getRangeAt can technically throw if there's no selection, but we know\n    // there is one here because text editor has focus (the cursor is a\n    // selection of length 0). Therefore, we don't need to wrap this in a\n    // try-catch block.\n\n    var range = domSelection.getRangeAt(0);\n    range = expandRangeToStartOfLine(range);\n    return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;\n  }, 'backward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandBackspaceToStartOfLine;"]},"metadata":{},"sourceType":"script"}