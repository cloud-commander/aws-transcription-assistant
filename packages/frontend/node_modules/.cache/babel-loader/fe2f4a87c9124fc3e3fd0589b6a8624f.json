{"ast":null,"code":"/* eslint-disable */\nfunction csvGenerator(srtJsonContent) {\n  let lines = 'N, In, Out, Text\\n';\n  srtJsonContent.forEach((srtLineO, index) => {\n    lines += `${index + 1},`; //need to surround timecodes with \"\\\"\" escaped \" to escape the , for the milliseconds\n\n    lines += `\\\"${srtLineO.start}\\\",\\\"${srtLineO.end}\\\",`; // removing line breaks and and removing \" as they break the csv.\n    // wrapping text in escaped \" to  escape any , for the csv.\n    // adding carriage return \\n to signal end of line in csv\n    // Preserving line break within srt lines to allow round trip from csv back to srt file in same format.\n    // by replacing \\n with \\r\\n.\n\n    lines += `\\\"${srtLineO.text.replace(/\\n/g, '\\r\\n')}\\\"\\n`;\n  });\n  return lines;\n}\n\nexport default csvGenerator;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/export-adapters/subtitles-generator/compose-subtitles/csv.js"],"names":["csvGenerator","srtJsonContent","lines","forEach","srtLineO","index","start","end","text","replace"],"mappings":"AAAA;AACA,SAASA,YAAT,CAAsBC,cAAtB,EAAsC;AACpC,MAAIC,KAAK,GAAG,oBAAZ;AACAD,EAAAA,cAAc,CAACE,OAAf,CAAuB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC1CH,IAAAA,KAAK,IAAK,GAAGG,KAAK,GAAG,CAAG,GAAxB,CAD0C,CAE1C;;AACAH,IAAAA,KAAK,IAAK,KAAKE,QAAQ,CAACE,KAAO,QAAQF,QAAQ,CAACG,GAAK,KAArD,CAH0C,CAI1C;AACA;AACA;AACA;AACA;;AACAL,IAAAA,KAAK,IAAK,KAAKE,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsB,KAAtB,EAA6B,MAA7B,CAAsC,MAArD;AACD,GAVD;AAYA,SAAOP,KAAP;AACD;;AAED,eAAeF,YAAf","sourcesContent":["/* eslint-disable */\nfunction csvGenerator(srtJsonContent) {\n  let lines = 'N, In, Out, Text\\n';\n  srtJsonContent.forEach((srtLineO, index) => {\n    lines += `${ index + 1 },`;\n    //need to surround timecodes with \"\\\"\" escaped \" to escape the , for the milliseconds\n    lines += `\\\"${ srtLineO.start }\\\",\\\"${ srtLineO.end }\\\",`;\n    // removing line breaks and and removing \" as they break the csv.\n    // wrapping text in escaped \" to  escape any , for the csv.\n    // adding carriage return \\n to signal end of line in csv\n    // Preserving line break within srt lines to allow round trip from csv back to srt file in same format.\n    // by replacing \\n with \\r\\n.\n    lines += `\\\"${ srtLineO.text.replace(/\\n/g, '\\r\\n') }\\\"\\n`;\n  });\n\n  return lines;\n}\n\nexport default csvGenerator;\n"]},"metadata":{},"sourceType":"module"}