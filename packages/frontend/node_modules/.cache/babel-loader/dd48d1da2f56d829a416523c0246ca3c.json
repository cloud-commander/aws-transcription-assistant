{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar gkx = require(\"./gkx\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\n/**\n * For a collapsed selection state, remove text based on the specified strategy.\n * If the selection state is not collapsed, remove the entire selected range.\n */\n\nfunction removeTextWithStrategy(editorState, strategy, direction) {\n  var selection = editorState.getSelection();\n  var content = editorState.getCurrentContent();\n  var target = selection;\n  var anchorKey = selection.getAnchorKey();\n  var focusKey = selection.getFocusKey();\n  var anchorBlock = content.getBlockForKey(anchorKey);\n\n  if (experimentalTreeDataSupport) {\n    if (direction === 'forward') {\n      if (anchorKey !== focusKey) {\n        // For now we ignore forward delete across blocks,\n        // if there is demand for this we will implement it.\n        return content;\n      }\n    }\n  }\n\n  if (selection.isCollapsed()) {\n    if (direction === 'forward') {\n      if (editorState.isSelectionAtEndOfContent()) {\n        return content;\n      }\n\n      if (experimentalTreeDataSupport) {\n        var isAtEndOfBlock = selection.getAnchorOffset() === content.getBlockForKey(anchorKey).getLength();\n\n        if (isAtEndOfBlock) {\n          var anchorBlockSibling = content.getBlockForKey(anchorBlock.nextSibling);\n\n          if (!anchorBlockSibling || anchorBlockSibling.getLength() === 0) {\n            // For now we ignore forward delete at the end of a block,\n            // if there is demand for this we will implement it.\n            return content;\n          }\n        }\n      }\n    } else if (editorState.isSelectionAtStartOfContent()) {\n      return content;\n    }\n\n    target = strategy(editorState);\n\n    if (target === selection) {\n      return content;\n    }\n  }\n\n  return DraftModifier.removeRange(content, target, direction);\n}\n\nmodule.exports = removeTextWithStrategy;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/removeTextWithStrategy.js"],"names":["DraftModifier","require","gkx","experimentalTreeDataSupport","removeTextWithStrategy","editorState","strategy","direction","selection","getSelection","content","getCurrentContent","target","anchorKey","getAnchorKey","focusKey","getFocusKey","anchorBlock","getBlockForKey","isCollapsed","isSelectionAtEndOfContent","isAtEndOfBlock","getAnchorOffset","getLength","anchorBlockSibling","nextSibling","isSelectionAtStartOfContent","removeRange","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAjB;;AAEA,IAAIE,2BAA2B,GAAGD,GAAG,CAAC,yBAAD,CAArC;AACA;;;;;AAKA,SAASE,sBAAT,CAAgCC,WAAhC,EAA6CC,QAA7C,EAAuDC,SAAvD,EAAkE;AAChE,MAAIC,SAAS,GAAGH,WAAW,CAACI,YAAZ,EAAhB;AACA,MAAIC,OAAO,GAAGL,WAAW,CAACM,iBAAZ,EAAd;AACA,MAAIC,MAAM,GAAGJ,SAAb;AACA,MAAIK,SAAS,GAAGL,SAAS,CAACM,YAAV,EAAhB;AACA,MAAIC,QAAQ,GAAGP,SAAS,CAACQ,WAAV,EAAf;AACA,MAAIC,WAAW,GAAGP,OAAO,CAACQ,cAAR,CAAuBL,SAAvB,CAAlB;;AAEA,MAAIV,2BAAJ,EAAiC;AAC/B,QAAII,SAAS,KAAK,SAAlB,EAA6B;AAC3B,UAAIM,SAAS,KAAKE,QAAlB,EAA4B;AAC1B;AACA;AACA,eAAOL,OAAP;AACD;AACF;AACF;;AAED,MAAIF,SAAS,CAACW,WAAV,EAAJ,EAA6B;AAC3B,QAAIZ,SAAS,KAAK,SAAlB,EAA6B;AAC3B,UAAIF,WAAW,CAACe,yBAAZ,EAAJ,EAA6C;AAC3C,eAAOV,OAAP;AACD;;AAED,UAAIP,2BAAJ,EAAiC;AAC/B,YAAIkB,cAAc,GAAGb,SAAS,CAACc,eAAV,OAAgCZ,OAAO,CAACQ,cAAR,CAAuBL,SAAvB,EAAkCU,SAAlC,EAArD;;AAEA,YAAIF,cAAJ,EAAoB;AAClB,cAAIG,kBAAkB,GAAGd,OAAO,CAACQ,cAAR,CAAuBD,WAAW,CAACQ,WAAnC,CAAzB;;AAEA,cAAI,CAACD,kBAAD,IAAuBA,kBAAkB,CAACD,SAAnB,OAAmC,CAA9D,EAAiE;AAC/D;AACA;AACA,mBAAOb,OAAP;AACD;AACF;AACF;AACF,KAlBD,MAkBO,IAAIL,WAAW,CAACqB,2BAAZ,EAAJ,EAA+C;AACpD,aAAOhB,OAAP;AACD;;AAEDE,IAAAA,MAAM,GAAGN,QAAQ,CAACD,WAAD,CAAjB;;AAEA,QAAIO,MAAM,KAAKJ,SAAf,EAA0B;AACxB,aAAOE,OAAP;AACD;AACF;;AAED,SAAOV,aAAa,CAAC2B,WAAd,CAA0BjB,OAA1B,EAAmCE,MAAnC,EAA2CL,SAA3C,CAAP;AACD;;AAEDqB,MAAM,CAACC,OAAP,GAAiBzB,sBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar gkx = require(\"./gkx\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\n/**\n * For a collapsed selection state, remove text based on the specified strategy.\n * If the selection state is not collapsed, remove the entire selected range.\n */\n\nfunction removeTextWithStrategy(editorState, strategy, direction) {\n  var selection = editorState.getSelection();\n  var content = editorState.getCurrentContent();\n  var target = selection;\n  var anchorKey = selection.getAnchorKey();\n  var focusKey = selection.getFocusKey();\n  var anchorBlock = content.getBlockForKey(anchorKey);\n\n  if (experimentalTreeDataSupport) {\n    if (direction === 'forward') {\n      if (anchorKey !== focusKey) {\n        // For now we ignore forward delete across blocks,\n        // if there is demand for this we will implement it.\n        return content;\n      }\n    }\n  }\n\n  if (selection.isCollapsed()) {\n    if (direction === 'forward') {\n      if (editorState.isSelectionAtEndOfContent()) {\n        return content;\n      }\n\n      if (experimentalTreeDataSupport) {\n        var isAtEndOfBlock = selection.getAnchorOffset() === content.getBlockForKey(anchorKey).getLength();\n\n        if (isAtEndOfBlock) {\n          var anchorBlockSibling = content.getBlockForKey(anchorBlock.nextSibling);\n\n          if (!anchorBlockSibling || anchorBlockSibling.getLength() === 0) {\n            // For now we ignore forward delete at the end of a block,\n            // if there is demand for this we will implement it.\n            return content;\n          }\n        }\n      }\n    } else if (editorState.isSelectionAtStartOfContent()) {\n      return content;\n    }\n\n    target = strategy(editorState);\n\n    if (target === selection) {\n      return content;\n    }\n  }\n\n  return DraftModifier.removeRange(content, target, direction);\n}\n\nmodule.exports = removeTextWithStrategy;"]},"metadata":{},"sourceType":"script"}