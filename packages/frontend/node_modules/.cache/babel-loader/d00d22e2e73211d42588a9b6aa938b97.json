{"ast":null,"code":"'use strict';\n\nvar char = function char(a) {\n  return String.fromCharCode(a);\n};\n\nvar chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n  emptyChar: char(178),\n  emptyValue: char(177),\n  //empty Premitive\n  boundryChar: char(179),\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185)\n};\nvar charsArr = [chars.nilChar, chars.nilPremitive, chars.missingChar, chars.missingPremitive, chars.boundryChar, chars.emptyChar, chars.emptyValue, chars.arrayEnd, chars.objStart, chars.arrStart];\n\nvar _e = function _e(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    var hasValidData = hasData(node);\n\n    if (hasValidData === true) {\n      var str = '';\n\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        var itemSchema = e_schema[0]; //var itemSchemaType = itemSchema;\n\n        var arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (var arr_i = 0; arr_i < arr_len; arr_i++) {\n            var r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (var _arr_i = 0; _arr_i < arr_len; _arr_i++) {\n            var _r = _e(node[_arr_i], itemSchema, options);\n\n            str = processValue(str, _r);\n          }\n        }\n\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        var keys = Object.keys(e_schema);\n\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n\n        for (var i in keys) {\n          var key = keys[i]; //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n\n          var _r2 = void 0;\n\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            _r2 = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            _r2 = _e(node.val, e_schema[key], options);\n          } else {\n            _r2 = _e(node.child[key], e_schema[key], options);\n          }\n\n          str = processValue(str, _r2);\n        }\n      }\n\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nvar getValue = function getValue(a\n/*, type*/\n) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n\n    case null:\n      return chars.nilPremitive;\n\n    case '':\n      return chars.emptyValue;\n\n    default:\n      return a;\n  }\n};\n\nvar processValue = function processValue(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n\n  return str + r;\n};\n\nvar isAppChar = function isAppChar(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nvar x2j = require('./xmlstr2xmlnode');\n\nvar buildOptions = require('./util').buildOptions;\n\nvar convert2nimn = function convert2nimn(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/fast-xml-parser/src/nimndata.js"],"names":["char","a","String","fromCharCode","chars","nilChar","missingChar","nilPremitive","missingPremitive","emptyChar","emptyValue","boundryChar","objStart","arrStart","arrayEnd","charsArr","_e","node","e_schema","options","val","undefined","getValue","hasValidData","hasData","str","Array","isArray","itemSchema","arr_len","length","arr_i","r","processValue","keys","Object","i","key","ignoreAttributes","attrsMap","textNodeName","child","isAppChar","ch","indexOf","jObj","x2j","require","buildOptions","convert2nimn","defaultOptions","props","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst char = function(a) {\n  return String.fromCharCode(a);\n};\n\nconst chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n\n  emptyChar: char(178),\n  emptyValue: char(177), //empty Premitive\n\n  boundryChar: char(179),\n\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185),\n};\n\nconst charsArr = [\n  chars.nilChar,\n  chars.nilPremitive,\n  chars.missingChar,\n  chars.missingPremitive,\n  chars.boundryChar,\n  chars.emptyChar,\n  chars.emptyValue,\n  chars.arrayEnd,\n  chars.objStart,\n  chars.arrStart,\n];\n\nconst _e = function(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    const hasValidData = hasData(node);\n    if (hasValidData === true) {\n      let str = '';\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        const itemSchema = e_schema[0];\n        //var itemSchemaType = itemSchema;\n        const arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = _e(node[arr_i], itemSchema, options);\n            str = processValue(str, r);\n          }\n        }\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        const keys = Object.keys(e_schema);\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n        for (let i in keys) {\n          const key = keys[i];\n          //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n          let r;\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            r = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            r = _e(node.val, e_schema[key], options);\n          } else {\n            r = _e(node.child[key], e_schema[key], options);\n          }\n          str = processValue(str, r);\n        }\n      }\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nconst getValue = function(a /*, type*/) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n    case null:\n      return chars.nilPremitive;\n    case '':\n      return chars.emptyValue;\n    default:\n      return a;\n  }\n};\n\nconst processValue = function(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n  return str + r;\n};\n\nconst isAppChar = function(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (\n    jObj.child &&\n    Object.keys(jObj.child).length === 0 &&\n    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)\n  ) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nconst x2j = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\n\nconst convert2nimn = function(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;\n"]},"metadata":{},"sourceType":"script"}