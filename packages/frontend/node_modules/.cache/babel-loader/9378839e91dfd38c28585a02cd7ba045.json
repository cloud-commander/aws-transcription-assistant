{"ast":null,"code":"var _jsxFileName = \"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/transcript-editor/index.js\";\n//@ts-nocheck\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TimedTextEditor from \"../timed-text-editor\";\nimport MediaPlayer from \"../media-player\";\nimport VideoPlayer from \"../video-player\";\nimport Settings from \"../settings\";\nimport Shortcuts from \"../keyboard-shortcuts\";\nimport { secondsToTimecode } from \"../../util/timecode-converter\";\nimport Header from \"./src/Header.js\";\nimport ExportOptions from \"./src/ExportOptions.js\";\nimport style from \"./index.module.css\"; // TODO: move to another file with tooltip - rename HowDoesThisWork or HelpMessage\n\nimport HowDoesThisWork from \"./src/HowDoesThisWork.js\";\nconst exportOptionsList = [{\n  value: \"txt\",\n  label: \"Text file\"\n}, {\n  value: \"txtspeakertimecodes\",\n  label: \"Text file - with Speakers and Timecodes\"\n}, {\n  value: \"docx\",\n  label: \"MS Word\"\n}, {\n  value: \"csv\",\n  label: \"CSV - Captions\"\n}, {\n  value: \"draftjs\",\n  label: \"Draft Js - json\"\n}];\n\nclass TranscriptEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = (nextProps, nextState) => {\n      if (nextProps.mediaUrl !== this.props.mediaUrl) {\n        return true;\n      }\n\n      return nextState !== this.state;\n    };\n\n    this.componentDidMount = () => {\n      this.updateDimensions();\n      window.addEventListener(\"resize\", this.updateDimensions);\n    };\n\n    this.updateDimensions = () => {\n      let gridDisplay = {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 3fr\",\n        gridColumnGap: \"1em\"\n      };\n      let displayMedia = null; // if the mediaUrl is for an audio file, then extend TimedTextEditor to be full width\n\n      if (this.props.mediaType === \"audio\") {\n        console.log(\"this.props.mediaType\", this.props.mediaType);\n        gridDisplay = null;\n        displayMedia = {\n          display: \"none\"\n        };\n      } // Handeling mobile view\n\n\n      const width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n\n      if (width <= 767) {\n        gridDisplay = null;\n      }\n\n      this.setState({\n        gridDisplay,\n        displayMedia\n      });\n    };\n\n    this.handleWordClick = startTime => {\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"doubleClickOnWord\",\n          name: \"startTime\",\n          value: secondsToTimecode(startTime)\n        });\n      }\n\n      this.setCurrentTime(startTime);\n    };\n\n    this.handleTimeUpdate = e => {\n      const currentTime = e.target.currentTime;\n      this.setState({\n        currentTime\n      });\n    };\n\n    this.handlePlayMedia = isPlaying => {\n      this.playMedia(isPlaying);\n    };\n\n    this.handleIsPlaying = () => {\n      return this.isPlaying();\n    };\n\n    this.handleIsScrollIntoViewChange = e => {\n      const isChecked = e.target.checked;\n      this.setState({\n        isScrollIntoViewOn: isChecked\n      });\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"handleIsScrollIntoViewChange\",\n          name: \"isScrollIntoViewOn\",\n          value: isChecked\n        });\n      }\n    };\n\n    this.handlePauseWhileTyping = e => {\n      const isChecked = e.target.checked;\n      this.setState({\n        isPauseWhileTypingOn: isChecked\n      });\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"handlePauseWhileTyping\",\n          name: \"isPauseWhileTypingOn\",\n          value: isChecked\n        });\n      }\n    };\n\n    this.handleRollBackValueInSeconds = e => {\n      const rollBackValue = e.target.value;\n      this.setState({\n        rollBackValueInSeconds: rollBackValue\n      });\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"handleRollBackValueInSeconds\",\n          name: \"rollBackValueInSeconds\",\n          value: rollBackValue\n        });\n      }\n    };\n\n    this.handleSetTimecodeOffset = timecodeOffset => {\n      this.setState({\n        timecodeOffset: timecodeOffset\n      }, () => {\n        this.timedTextEditorRef.current.forceUpdate();\n      });\n    };\n\n    this.handleShowTimecodes = e => {\n      const isChecked = e.target.checked;\n      this.setState({\n        showTimecodes: isChecked\n      });\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"handleShowTimecodes\",\n          name: \"showTimecodes\",\n          value: isChecked\n        });\n      }\n    };\n\n    this.handleShowSpeakers = e => {\n      const isChecked = e.target.checked;\n      this.setState({\n        showSpeakers: isChecked\n      });\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"handleShowSpeakers\",\n          name: \"showSpeakers\",\n          value: isChecked\n        });\n      }\n    };\n\n    this.handleSettingsToggle = () => {\n      this.setState(prevState => ({\n        showSettings: !prevState.showSettings\n      }), () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleSettingsToggle\",\n            name: \"showSettings\",\n            value: !this.state.showSettings\n          });\n        }\n      });\n    };\n\n    this.handleShortcutsToggle = () => {\n      this.setState(prevState => ({\n        showShortcuts: !prevState.showShortcuts\n      }), () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleShortcutsToggle\",\n            name: \"showShortcuts\",\n            value: !this.state.showShortcuts\n          });\n        }\n      });\n    };\n\n    this.handleExportToggle = () => {\n      console.log(\"handleExportToggle\", this.state.showExportOptions);\n      this.setState(prevState => ({\n        showExportOptions: !prevState.showExportOptions\n      }), () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleExportToggle\",\n            name: \"showExportOptions\",\n            value: !this.state.showExportOptions\n          });\n        }\n      });\n    };\n\n    this.handleExportOptionsChange = e => {\n      const exportFormat = e.target.value;\n      console.log(\"export format: \" + exportFormat);\n\n      if (exportFormat !== \"instructions\") {\n        const fileName = this.props.title ? this.props.title : this.props.mediaUrl;\n        console.log(\"STILL HERE \");\n        const {\n          data,\n          ext\n        } = this.getEditorContent(exportFormat);\n        console.log(\"ext1: \" + ext);\n        let tmpData = data;\n        console.log(\"tmp data: \" + tmpData);\n\n        if (ext === \"json\") {\n          tmpData = JSON.stringify(data, null, 2);\n        }\n\n        console.log(\"fileName: \" + fileName);\n        console.log(\"ext2: \" + ext);\n\n        if (ext !== \"docx\") {\n          this.download(tmpData, `${fileName}.${ext}`);\n        }\n\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleExportOptionsChange\",\n            name: \"exportFile\",\n            value: exportFormat\n          });\n        }\n      }\n    };\n\n    this.download = (content, filename, contentType) => {\n      const type = contentType || \"application/octet-stream\";\n      const link = document.createElement(\"a\");\n      const blob = new Blob([content], {\n        type: type\n      });\n      link.href = window.URL.createObjectURL(blob);\n      link.download = filename; // Firefox fix - cannot do link.click() if it's not attached to DOM in firefox\n      // https://stackoverflow.com/questions/32225904/programmatical-click-on-a-tag-not-working-in-firefox\n\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    };\n\n    this.getEditorContent = exportFormat => {\n      const title = this.props.title ? this.props.title : \"\";\n      console.log(\"exportFormat: \" + exportFormat);\n      console.log(\"title: \" + title);\n      return this.timedTextEditorRef.current.getEditorContent(exportFormat, title);\n    };\n\n    this.handlePreviewIsDisplayed = () => {\n      this.setState({\n        previewIsDisplayed: !this.state.previewIsDisplayed\n      });\n    };\n\n    this.onLoadedDataGetDuration = e => {\n      const currentDuration = e.target.duration;\n      const currentDurationWithOffset = currentDuration + this.state.timecodeOffset;\n      const durationInSeconds = secondsToTimecode(currentDurationWithOffset);\n      this.setState({\n        mediaDuration: durationInSeconds\n      });\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"onLoadedDataGetDuration\",\n          name: \"durationInSeconds-WithoutOffset\",\n          value: secondsToTimecode(currentDuration)\n        });\n      }\n    };\n\n    this.handleChangePreviewViewWidth = e => {\n      const newPreviewViewWidth = e.target.value;\n      this.setState({\n        previewViewWidth: newPreviewViewWidth\n      });\n    };\n\n    this.handleAutoSaveChanges = data => {\n      // making `TranscriptEditor` - `handleAutoSaveChanges` optional\n      if (this.props.handleAutoSaveChanges) {\n        this.props.handleAutoSaveChanges(data);\n      }\n    };\n\n    this.videoRef = React.createRef();\n    this.state = {\n      currentTime: 0,\n      transcriptJSONBlob: null,\n      isScrollIntoViewOn: false,\n      showSettings: false,\n      showShortcuts: false,\n      showExportOptions: false,\n      isPauseWhileTypingOn: true,\n      rollBackValueInSeconds: 15,\n      timecodeOffset: 0,\n      showTimecodes: true,\n      showSpeakers: true,\n      previewIsDisplayed: true,\n      mediaDuration: \"00:00:00:00\",\n      gridDisplay: null\n    };\n    this.timedTextEditorRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.transcriptJSONBlob !== null) {\n      return {\n        transcriptJSONBlob: nextProps.transcriptJSONBlob\n      };\n    }\n\n    return null;\n  } // performance optimization\n\n\n  render() {\n    const videoPlayer = /*#__PURE__*/React.createElement(VideoPlayer, {\n      mediaUrl: this.props.mediaUrl,\n      onTimeUpdate: this.handleTimeUpdate,\n      videoRef: this.videoRef,\n      previewIsDisplayed: this.state.previewIsDisplayed,\n      onLoadedDataGetDuration: this.onLoadedDataGetDuration,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 7\n      }\n    });\n    const mediaControls = /*#__PURE__*/React.createElement(MediaPlayer, {\n      title: this.props.title ? this.props.title : \"\",\n      mediaDuration: this.state.mediaDuration,\n      currentTime: this.state.currentTime,\n      hookSeek: foo => this.setCurrentTime = foo,\n      hookPlayMedia: foo => this.playMedia = foo,\n      hookIsPlaying: foo => this.isPlaying = foo,\n      rollBackValueInSeconds: this.state.rollBackValueInSeconds,\n      timecodeOffset: this.state.timecodeOffset,\n      mediaUrl: this.props.mediaUrl,\n      handleAnalyticsEvents: this.props.handleAnalyticsEvents,\n      videoRef: this.videoRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 7\n      }\n    });\n    const settings = /*#__PURE__*/React.createElement(Settings, {\n      handleSettingsToggle: this.handleSettingsToggle,\n      defaultValuePauseWhileTyping: this.state.isPauseWhileTypingOn,\n      defaultValueScrollSync: this.state.isScrollIntoViewOn,\n      defaultRollBackValueInSeconds: this.state.rollBackValueInSeconds,\n      timecodeOffset: this.state.timecodeOffset,\n      showTimecodes: this.state.showTimecodes,\n      showSpeakers: this.state.showSpeakers,\n      handlePauseWhileTyping: this.handlePauseWhileTyping,\n      handleIsScrollIntoViewChange: this.handleIsScrollIntoViewChange,\n      handleRollBackValueInSeconds: this.handleRollBackValueInSeconds,\n      handleSetTimecodeOffset: this.handleSetTimecodeOffset,\n      handleShowTimecodes: this.handleShowTimecodes,\n      handleShowSpeakers: this.handleShowSpeakers,\n      handleAnalyticsEvents: this.props.handleAnalyticsEvents,\n      previewIsDisplayed: this.state.previewIsDisplayed,\n      handlePreviewIsDisplayed: this.handlePreviewIsDisplayed,\n      handleChangePreviewViewWidth: this.handleChangePreviewViewWidth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 7\n      }\n    });\n    const exportOptions = /*#__PURE__*/React.createElement(ExportOptions, {\n      exportOptionsList: exportOptionsList,\n      handleExportOptionsChange: this.handleExportOptionsChange,\n      handleExportToggle: this.handleExportToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 7\n      }\n    });\n    const shortcuts = /*#__PURE__*/React.createElement(Shortcuts, {\n      handleShortcutsToggle: this.handleShortcutsToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 7\n      }\n    }); // export format for `handleAutoSaveChanges` is assigned with `autoSaveContentType`\n    // but if that's not specified  it looks at  `sttJsonType`\n    // if that's not specified either, it falls back on `draftjs`.\n\n    let contentFormat = \"draftjs\";\n\n    if (this.props.autoSaveContentType) {\n      contentFormat = this.props.autoSaveContentType;\n    } else if (this.props.sttJsonType) {\n      contentFormat = this.props.sttJsonType;\n    }\n\n    const timedTextEditor = /*#__PURE__*/React.createElement(TimedTextEditor, {\n      fileName: this.props.fileName,\n      transcriptData: this.state.transcriptJSONBlob,\n      timecodeOffset: this.state.timecodeOffset,\n      onWordClick: this.handleWordClick,\n      playMedia: this.handlePlayMedia,\n      isPlaying: this.handleIsPlaying,\n      currentTime: this.state.currentTime,\n      isEditable: this.props.isEditable,\n      spellCheck: this.props.spellCheck,\n      sttJsonType: this.props.sttJsonType,\n      mediaUrl: this.props.mediaUrl,\n      isScrollIntoViewOn: this.state.isScrollIntoViewOn,\n      isPauseWhileTypingOn: this.state.isPauseWhileTypingOn,\n      showTimecodes: this.state.showTimecodes,\n      showSpeakers: this.state.showSpeakers,\n      ref: this.timedTextEditorRef,\n      handleAnalyticsEvents: this.props.handleAnalyticsEvents,\n      handleAutoSaveChanges: this.handleAutoSaveChanges,\n      autoSaveContentType: contentFormat,\n      title: this.props.title ? this.props.title : Date.now(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 7\n      }\n    });\n    const header = /*#__PURE__*/React.createElement(Header, {\n      showSettings: this.state.showSettings,\n      showShortcuts: this.state.showShortcuts,\n      showExportOptions: this.state.showExportOptions,\n      settings: settings,\n      shortcuts: shortcuts,\n      exportOptions: exportOptions,\n      tooltip: HowDoesThisWork,\n      mediaUrl: this.props.mediaUrl,\n      mediaControls: this.videoRef.current ? mediaControls : null,\n      handleSettingsToggle: this.handleSettingsToggle,\n      handleShortcutsToggle: this.handleShortcutsToggle,\n      handleExportToggle: this.handleExportToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 7\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: style.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 7\n      }\n    }, this.props.mediaUrl ? header : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: style.grid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: style.row,\n      style: this.state.gridDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"aside\", {\n      className: style.aside,\n      style: this.state.displayMedia,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 13\n      }\n    }, this.props.mediaUrl ? videoPlayer : null), /*#__PURE__*/React.createElement(\"main\", {\n      className: this.props.mediaType === \"audio\" ? style.mainWithAudiio : style.main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 13\n      }\n    }, this.props.mediaUrl && this.props.transcriptJSONBlob ? timedTextEditor : null))));\n  }\n\n}\n\nTranscriptEditor.propTypes = {\n  onClick: PropTypes.func,\n  title: PropTypes.string,\n  mediaUrl: PropTypes.string,\n  isEditable: PropTypes.bool,\n  spellCheck: PropTypes.bool,\n  sttJsonType: PropTypes.string,\n  handleAnalyticsEvents: PropTypes.func,\n  fileName: PropTypes.string,\n  transcriptJSONBlob: PropTypes.object,\n  mediaType: PropTypes.string\n};\nexport default TranscriptEditor;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/transcript-editor/index.js"],"names":["React","PropTypes","TimedTextEditor","MediaPlayer","VideoPlayer","Settings","Shortcuts","secondsToTimecode","Header","ExportOptions","style","HowDoesThisWork","exportOptionsList","value","label","TranscriptEditor","Component","constructor","props","shouldComponentUpdate","nextProps","nextState","mediaUrl","state","componentDidMount","updateDimensions","window","addEventListener","gridDisplay","display","gridTemplateColumns","gridColumnGap","displayMedia","mediaType","console","log","width","Math","max","document","documentElement","clientWidth","innerWidth","setState","handleWordClick","startTime","handleAnalyticsEvents","category","action","name","setCurrentTime","handleTimeUpdate","e","currentTime","target","handlePlayMedia","isPlaying","playMedia","handleIsPlaying","handleIsScrollIntoViewChange","isChecked","checked","isScrollIntoViewOn","handlePauseWhileTyping","isPauseWhileTypingOn","handleRollBackValueInSeconds","rollBackValue","rollBackValueInSeconds","handleSetTimecodeOffset","timecodeOffset","timedTextEditorRef","current","forceUpdate","handleShowTimecodes","showTimecodes","handleShowSpeakers","showSpeakers","handleSettingsToggle","prevState","showSettings","handleShortcutsToggle","showShortcuts","handleExportToggle","showExportOptions","handleExportOptionsChange","exportFormat","fileName","title","data","ext","getEditorContent","tmpData","JSON","stringify","download","content","filename","contentType","type","link","createElement","blob","Blob","href","URL","createObjectURL","body","appendChild","click","removeChild","handlePreviewIsDisplayed","previewIsDisplayed","onLoadedDataGetDuration","currentDuration","duration","currentDurationWithOffset","durationInSeconds","mediaDuration","handleChangePreviewViewWidth","newPreviewViewWidth","previewViewWidth","handleAutoSaveChanges","videoRef","createRef","transcriptJSONBlob","getDerivedStateFromProps","render","videoPlayer","mediaControls","foo","settings","exportOptions","shortcuts","contentFormat","autoSaveContentType","sttJsonType","timedTextEditor","isEditable","spellCheck","Date","now","header","container","grid","row","aside","mainWithAudiio","main","propTypes","onClick","func","string","bool","object"],"mappings":"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","sourcesContent":["//@ts-nocheck\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport TimedTextEditor from \"../timed-text-editor\";\nimport MediaPlayer from \"../media-player\";\nimport VideoPlayer from \"../video-player\";\nimport Settings from \"../settings\";\nimport Shortcuts from \"../keyboard-shortcuts\";\nimport { secondsToTimecode } from \"../../util/timecode-converter\";\nimport Header from \"./src/Header.js\";\nimport ExportOptions from \"./src/ExportOptions.js\";\nimport style from \"./index.module.css\";\n\n// TODO: move to another file with tooltip - rename HowDoesThisWork or HelpMessage\nimport HowDoesThisWork from \"./src/HowDoesThisWork.js\";\n\nconst exportOptionsList = [\n  { value: \"txt\", label: \"Text file\" },\n  {\n    value: \"txtspeakertimecodes\",\n    label: \"Text file - with Speakers and Timecodes\"\n  },\n  { value: \"docx\", label: \"MS Word\" },\n  { value: \"csv\", label: \"CSV - Captions\" },\n  { value: \"draftjs\", label: \"Draft Js - json\" },\n\n];\n\nclass TranscriptEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n\n    this.state = {\n      currentTime: 0,\n      transcriptJSONBlob: null,\n      isScrollIntoViewOn: false,\n      showSettings: false,\n      showShortcuts: false,\n      showExportOptions: false,\n      isPauseWhileTypingOn: true,\n      rollBackValueInSeconds: 15,\n      timecodeOffset: 0,\n      showTimecodes: true,\n      showSpeakers: true,\n      previewIsDisplayed: true,\n      mediaDuration: \"00:00:00:00\",\n      gridDisplay: null,\n    };\n    this.timedTextEditorRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.transcriptJSONBlob !== null) {\n      return {\n        transcriptJSONBlob: nextProps.transcriptJSONBlob\n      };\n    }\n\n    return null;\n  }\n\n  // performance optimization\n  shouldComponentUpdate = (nextProps, nextState) => {\n    if (nextProps.mediaUrl !== this.props.mediaUrl) {\n      return true;\n    }\n\n    return nextState !== this.state;\n  };\n\n  componentDidMount = () => {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n  };\n\n  updateDimensions = () => {\n    let gridDisplay = {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr 3fr\",\n      gridColumnGap: \"1em\"\n    };\n    let displayMedia = null;\n    // if the mediaUrl is for an audio file, then extend TimedTextEditor to be full width\n    if (this.props.mediaType === \"audio\") {\n      console.log(\"this.props.mediaType\", this.props.mediaType);\n      gridDisplay = null;\n      displayMedia = { display: \"none\" };\n    }\n    // Handeling mobile view\n    const width = Math.max(\n      document.documentElement.clientWidth,\n      window.innerWidth || 0\n    );\n    if (width <= 767) {\n      gridDisplay = null;\n    }\n    this.setState({\n      gridDisplay,\n      displayMedia\n    });\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  handleWordClick = startTime => {\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"doubleClickOnWord\",\n        name: \"startTime\",\n        value: secondsToTimecode(startTime)\n      });\n    }\n\n    this.setCurrentTime(startTime);\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  handleTimeUpdate = e => {\n    const currentTime = e.target.currentTime;\n    this.setState({\n      currentTime\n    });\n  };\n\n  handlePlayMedia = isPlaying => {\n    this.playMedia(isPlaying);\n  };\n\n  handleIsPlaying = () => {\n    return this.isPlaying();\n  };\n\n  handleIsScrollIntoViewChange = e => {\n    const isChecked = e.target.checked;\n    this.setState({ isScrollIntoViewOn: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleIsScrollIntoViewChange\",\n        name: \"isScrollIntoViewOn\",\n        value: isChecked\n      });\n    }\n  };\n  handlePauseWhileTyping = e => {\n    const isChecked = e.target.checked;\n    this.setState({ isPauseWhileTypingOn: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handlePauseWhileTyping\",\n        name: \"isPauseWhileTypingOn\",\n        value: isChecked\n      });\n    }\n  };\n\n  handleRollBackValueInSeconds = e => {\n    const rollBackValue = e.target.value;\n    this.setState({ rollBackValueInSeconds: rollBackValue });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleRollBackValueInSeconds\",\n        name: \"rollBackValueInSeconds\",\n        value: rollBackValue\n      });\n    }\n  };\n\n  handleSetTimecodeOffset = timecodeOffset => {\n    this.setState({ timecodeOffset: timecodeOffset }, () => {\n      this.timedTextEditorRef.current.forceUpdate();\n    });\n  };\n\n  handleShowTimecodes = e => {\n    const isChecked = e.target.checked;\n    this.setState({ showTimecodes: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleShowTimecodes\",\n        name: \"showTimecodes\",\n        value: isChecked\n      });\n    }\n  };\n\n  handleShowSpeakers = e => {\n    const isChecked = e.target.checked;\n    this.setState({ showSpeakers: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleShowSpeakers\",\n        name: \"showSpeakers\",\n        value: isChecked\n      });\n    }\n  };\n\n  handleSettingsToggle = () => {\n    this.setState(\n      prevState => ({\n        showSettings: !prevState.showSettings\n      }),\n      () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleSettingsToggle\",\n            name: \"showSettings\",\n            value: !this.state.showSettings\n          });\n        }\n      }\n    );\n  };\n\n  handleShortcutsToggle = () => {\n    this.setState(\n      prevState => ({\n        showShortcuts: !prevState.showShortcuts\n      }),\n      () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleShortcutsToggle\",\n            name: \"showShortcuts\",\n            value: !this.state.showShortcuts\n          });\n        }\n      }\n    );\n  };\n\n  handleExportToggle = () => {\n    console.log(\"handleExportToggle\", this.state.showExportOptions);\n    this.setState(\n      prevState => ({\n        showExportOptions: !prevState.showExportOptions\n      }),\n      () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleExportToggle\",\n            name: \"showExportOptions\",\n            value: !this.state.showExportOptions\n          });\n        }\n      }\n    );\n  };\n\n  handleExportOptionsChange = e => {\n    const exportFormat = e.target.value;\n    console.log(\"export format: \" + exportFormat);\n\n    if (exportFormat !== \"instructions\") {\n      const fileName = this.props.title\n        ? this.props.title\n        : this.props.mediaUrl;\n\n\n        console.log(\"STILL HERE \");\n      const { data, ext } = this.getEditorContent(exportFormat);\n      console.log(\"ext1: \" + ext);\n      let tmpData = data;\n      console.log(\"tmp data: \" + tmpData);\n\n      if (ext === \"json\") {\n        tmpData = JSON.stringify(data, null, 2);\n      }\n      console.log(\"fileName: \" + fileName);\n      console.log(\"ext2: \" + ext);\n\n      if (ext !== \"docx\") {\n        this.download(tmpData, `${fileName}.${ext}`);\n      }\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"handleExportOptionsChange\",\n          name: \"exportFile\",\n          value: exportFormat\n        });\n      }\n    }\n  };\n\n  // https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file\n  download = (content, filename, contentType) => {\n    const type = contentType || \"application/octet-stream\";\n    const link = document.createElement(\"a\");\n    const blob = new Blob([content], { type: type });\n\n    link.href = window.URL.createObjectURL(blob);\n    link.download = filename;\n    // Firefox fix - cannot do link.click() if it's not attached to DOM in firefox\n    // https://stackoverflow.com/questions/32225904/programmatical-click-on-a-tag-not-working-in-firefox\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  getEditorContent = exportFormat => {\n    const title = this.props.title ? this.props.title : \"\";\n    console.log(\"exportFormat: \" + exportFormat);\n    console.log(\"title: \" + title);\n    return this.timedTextEditorRef.current.getEditorContent(\n      exportFormat,\n      title\n    );\n  };\n\n  handlePreviewIsDisplayed = () => {\n    this.setState({\n      previewIsDisplayed: !this.state.previewIsDisplayed\n    });\n  };\n\n  onLoadedDataGetDuration = e => {\n    const currentDuration = e.target.duration;\n    const currentDurationWithOffset =\n      currentDuration + this.state.timecodeOffset;\n    const durationInSeconds = secondsToTimecode(currentDurationWithOffset);\n\n    this.setState({\n      mediaDuration: durationInSeconds\n    });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"onLoadedDataGetDuration\",\n        name: \"durationInSeconds-WithoutOffset\",\n        value: secondsToTimecode(currentDuration)\n      });\n    }\n  };\n\n  handleChangePreviewViewWidth = e => {\n    const newPreviewViewWidth = e.target.value;\n    this.setState({\n      previewViewWidth: newPreviewViewWidth\n    });\n  };\n\n  handleAutoSaveChanges = data => {\n    // making `TranscriptEditor` - `handleAutoSaveChanges` optional\n    if (this.props.handleAutoSaveChanges) {\n      this.props.handleAutoSaveChanges(data);\n    }\n  };\n\n  render() {\n    const videoPlayer = (\n      <VideoPlayer\n        mediaUrl={this.props.mediaUrl}\n        onTimeUpdate={this.handleTimeUpdate}\n        videoRef={this.videoRef}\n        previewIsDisplayed={this.state.previewIsDisplayed}\n        onLoadedDataGetDuration={this.onLoadedDataGetDuration}\n      />\n    );\n\n    const mediaControls = (\n      <MediaPlayer\n        title={this.props.title ? this.props.title : \"\"}\n        mediaDuration={this.state.mediaDuration}\n        currentTime={this.state.currentTime}\n        hookSeek={foo => (this.setCurrentTime = foo)}\n        hookPlayMedia={foo => (this.playMedia = foo)}\n        hookIsPlaying={foo => (this.isPlaying = foo)}\n        rollBackValueInSeconds={this.state.rollBackValueInSeconds}\n        timecodeOffset={this.state.timecodeOffset}\n        mediaUrl={this.props.mediaUrl}\n        handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n        videoRef={this.videoRef}\n      />\n    );\n\n    const settings = (\n      <Settings\n        handleSettingsToggle={this.handleSettingsToggle}\n        defaultValuePauseWhileTyping={this.state.isPauseWhileTypingOn}\n        defaultValueScrollSync={this.state.isScrollIntoViewOn}\n        defaultRollBackValueInSeconds={this.state.rollBackValueInSeconds}\n        timecodeOffset={this.state.timecodeOffset}\n        showTimecodes={this.state.showTimecodes}\n        showSpeakers={this.state.showSpeakers}\n        handlePauseWhileTyping={this.handlePauseWhileTyping}\n        handleIsScrollIntoViewChange={this.handleIsScrollIntoViewChange}\n        handleRollBackValueInSeconds={this.handleRollBackValueInSeconds}\n        handleSetTimecodeOffset={this.handleSetTimecodeOffset}\n        handleShowTimecodes={this.handleShowTimecodes}\n        handleShowSpeakers={this.handleShowSpeakers}\n        handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n        previewIsDisplayed={this.state.previewIsDisplayed}\n        handlePreviewIsDisplayed={this.handlePreviewIsDisplayed}\n        handleChangePreviewViewWidth={this.handleChangePreviewViewWidth}\n      />\n    );\n\n    const exportOptions = (\n      <ExportOptions\n        exportOptionsList={exportOptionsList}\n        handleExportOptionsChange={this.handleExportOptionsChange}\n        handleExportToggle={this.handleExportToggle}\n      />\n    );\n\n    const shortcuts = (\n      <Shortcuts handleShortcutsToggle={this.handleShortcutsToggle} />\n    );\n\n    // export format for `handleAutoSaveChanges` is assigned with `autoSaveContentType`\n    // but if that's not specified  it looks at  `sttJsonType`\n    // if that's not specified either, it falls back on `draftjs`.\n    let contentFormat = \"draftjs\";\n    if (this.props.autoSaveContentType) {\n      contentFormat = this.props.autoSaveContentType;\n    } else if (this.props.sttJsonType) {\n      contentFormat = this.props.sttJsonType;\n    }\n\n    const timedTextEditor = (\n      <TimedTextEditor\n        fileName={this.props.fileName}\n        transcriptData={this.state.transcriptJSONBlob}\n        timecodeOffset={this.state.timecodeOffset}\n        onWordClick={this.handleWordClick}\n        playMedia={this.handlePlayMedia}\n        isPlaying={this.handleIsPlaying}\n        currentTime={this.state.currentTime}\n        isEditable={this.props.isEditable}\n        spellCheck={this.props.spellCheck}\n        sttJsonType={this.props.sttJsonType}\n        mediaUrl={this.props.mediaUrl}\n        isScrollIntoViewOn={this.state.isScrollIntoViewOn}\n        isPauseWhileTypingOn={this.state.isPauseWhileTypingOn}\n        showTimecodes={this.state.showTimecodes}\n        showSpeakers={this.state.showSpeakers}\n        ref={this.timedTextEditorRef}\n        handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n        handleAutoSaveChanges={this.handleAutoSaveChanges}\n        autoSaveContentType={contentFormat}\n        title={this.props.title ? this.props.title : Date.now()}\n      />\n    );\n\n    const header = (\n      <Header\n        showSettings={this.state.showSettings}\n        showShortcuts={this.state.showShortcuts}\n        showExportOptions={this.state.showExportOptions}\n        settings={settings}\n        shortcuts={shortcuts}\n        exportOptions={exportOptions}\n        tooltip={HowDoesThisWork}\n        mediaUrl={this.props.mediaUrl}\n        mediaControls={this.videoRef.current ? mediaControls : null}\n        handleSettingsToggle={this.handleSettingsToggle}\n        handleShortcutsToggle={this.handleShortcutsToggle}\n        handleExportToggle={this.handleExportToggle}\n      />\n    );\n\n    return (\n      <div className={style.container}>\n        {this.props.mediaUrl ? header : null}\n\n        <div className={style.grid}>\n          <section className={style.row} style={this.state.gridDisplay}>\n            <aside className={style.aside} style={this.state.displayMedia}>\n              {this.props.mediaUrl ? videoPlayer : null}\n            </aside>\n\n            <main\n              className={\n                this.props.mediaType === \"audio\"\n                  ? style.mainWithAudiio\n                  : style.main\n              }\n            >\n              {this.props.mediaUrl && this.props.transcriptJSONBlob\n                ? timedTextEditor\n                : null}\n            </main>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nTranscriptEditor.propTypes = {\n  onClick: PropTypes.func,\n  title: PropTypes.string,\n  mediaUrl: PropTypes.string,\n  isEditable: PropTypes.bool,\n  spellCheck: PropTypes.bool,\n  sttJsonType: PropTypes.string,\n  handleAnalyticsEvents: PropTypes.func,\n  fileName: PropTypes.string,\n  transcriptJSONBlob: PropTypes.object,\n  mediaType: PropTypes.string\n};\n\nexport default TranscriptEditor;\n"]},"metadata":{},"sourceType":"module"}