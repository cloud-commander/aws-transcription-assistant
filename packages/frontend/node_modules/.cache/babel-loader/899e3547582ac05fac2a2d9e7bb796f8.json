{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.streamCollector = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_base64_browser_1 = require(\"@aws-sdk/util-base64-browser\"); //reference: https://snack.expo.io/r1JCSWRGU\n\n\nexports.streamCollector = function (stream) {\n  if (stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n\n  return collectStream(stream);\n};\n\nfunction collectBlob(blob) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var base64, arrayBuffer;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , readToBase64(blob)];\n\n        case 1:\n          base64 = _a.sent();\n          arrayBuffer = util_base64_browser_1.fromBase64(base64);\n          return [2\n          /*return*/\n          , new Uint8Array(arrayBuffer)];\n      }\n    });\n  });\n}\n\nfunction collectStream(stream) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var res, reader, isDone, _a, done, value, prior;\n\n    return tslib_1.__generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          res = new Uint8Array(0);\n          reader = stream.getReader();\n          isDone = false;\n          _b.label = 1;\n\n        case 1:\n          if (!!isDone) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , reader.read()];\n\n        case 2:\n          _a = _b.sent(), done = _a.done, value = _a.value;\n\n          if (value) {\n            prior = res;\n            res = new Uint8Array(prior.length + value.length);\n            res.set(prior);\n            res.set(value, prior.length);\n          }\n\n          isDone = done;\n          return [3\n          /*break*/\n          , 1];\n\n        case 3:\n          return [2\n          /*return*/\n          , res];\n      }\n    });\n  });\n}\n\nfunction readToBase64(blob) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      var _a; // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n\n\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n\n      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : \"\"; // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n\n      var commaIndex = result.indexOf(\",\");\n      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n\n    reader.onabort = function () {\n      return reject(new Error(\"Read aborted\"));\n    };\n\n    reader.onerror = function () {\n      return reject(reader.error);\n    }; // reader.readAsArrayBuffer is not always available\n\n\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"sources":["../../src/stream-collector.ts"],"names":[],"mappings":"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","sourcesContent":["import { StreamCollector } from \"@aws-sdk/types\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\";\n\n//reference: https://snack.expo.io/r1JCSWRGU\nexport const streamCollector: StreamCollector = (stream: Blob | ReadableStream): Promise<Uint8Array> => {\n  if (stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n\n  return collectStream(stream);\n};\n\nasync function collectBlob(blob: Blob): Promise<Uint8Array> {\n  const base64 = await readToBase64(blob);\n  const arrayBuffer = fromBase64(base64);\n  return new Uint8Array(arrayBuffer);\n}\n\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0);\n  const reader = stream.getReader();\n  let isDone = false;\n  while (!isDone) {\n    const { done, value } = await reader.read();\n    if (value) {\n      const prior = res;\n      res = new Uint8Array(prior.length + value.length);\n      res.set(prior);\n      res.set(value, prior.length);\n    }\n    isDone = done;\n  }\n  return res;\n}\n\nfunction readToBase64(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      const result = (reader.result ?? \"\") as string;\n      // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n      const commaIndex = result.indexOf(\",\");\n      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = () => reject(new Error(\"Read aborted\"));\n    reader.onerror = () => reject(reader.error);\n    // reader.readAsArrayBuffer is not always available\n    reader.readAsDataURL(blob);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}