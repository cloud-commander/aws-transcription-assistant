{"ast":null,"code":"/**\n * Helper function to generate draft.js entityMap from draftJS blocks,\n */\n\n/**\n * helper function to flatten a list.\n * converts nested arrays into one dimensional array\n * @param {array} list\n */\nconst flatten = list => list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n/**\n * helper function to create createEntityMap\n * @param {*} blocks - draftJs blocks\n */\n\n\nconst createEntityMap = blocks => {\n  const entityRanges = blocks.map(block => block.entityRanges);\n  const flatEntityRanges = flatten(entityRanges);\n  const entityMap = {};\n  flatEntityRanges.forEach(data => {\n    entityMap[data.key] = {\n      type: 'WORD',\n      mutability: 'MUTABLE',\n      data\n    };\n  });\n  return entityMap;\n};\n\nexport default createEntityMap;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/stt-adapters/create-entity-map/index.js"],"names":["flatten","list","reduce","a","b","concat","Array","isArray","createEntityMap","blocks","entityRanges","map","block","flatEntityRanges","entityMap","forEach","data","key","type","mutability"],"mappings":"AAAA;;;;AAIA;;;;;AAKA,MAAMA,OAAO,GAAGC,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,CAASC,KAAK,CAACC,OAAN,CAAcH,CAAd,IAAmBJ,OAAO,CAACI,CAAD,CAA1B,GAAgCA,CAAzC,CAAtB,EAAmE,EAAnE,CAAxB;AAEA;;;;;;AAIA,MAAMI,eAAe,GAAIC,MAAD,IAAY;AAClC,QAAMC,YAAY,GAAGD,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAIA,KAAK,CAACF,YAA1B,CAArB;AACA,QAAMG,gBAAgB,GAAGb,OAAO,CAACU,YAAD,CAAhC;AAEA,QAAMI,SAAS,GAAG,EAAlB;AAEAD,EAAAA,gBAAgB,CAACE,OAAjB,CAA0BC,IAAD,IAAU;AACjCF,IAAAA,SAAS,CAACE,IAAI,CAACC,GAAN,CAAT,GAAsB;AACpBC,MAAAA,IAAI,EAAE,MADc;AAEpBC,MAAAA,UAAU,EAAE,SAFQ;AAGpBH,MAAAA;AAHoB,KAAtB;AAKD,GAND;AAQA,SAAOF,SAAP;AACD,CAfD;;AAiBA,eAAeN,eAAf","sourcesContent":["/**\n * Helper function to generate draft.js entityMap from draftJS blocks,\n */\n\n/**\n * helper function to flatten a list.\n * converts nested arrays into one dimensional array\n * @param {array} list\n */\nconst flatten = list => list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n\n/**\n * helper function to create createEntityMap\n * @param {*} blocks - draftJs blocks\n */\nconst createEntityMap = (blocks) => {\n  const entityRanges = blocks.map(block => block.entityRanges);\n  const flatEntityRanges = flatten(entityRanges);\n\n  const entityMap = {};\n\n  flatEntityRanges.forEach((data) => {\n    entityMap[data.key] = {\n      type: 'WORD',\n      mutability: 'MUTABLE',\n      data,\n    };\n  });\n\n  return entityMap;\n};\n\nexport default createEntityMap;"]},"metadata":{},"sourceType":"module"}