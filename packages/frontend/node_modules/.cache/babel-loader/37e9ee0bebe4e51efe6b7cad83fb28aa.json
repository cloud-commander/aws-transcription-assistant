{"ast":null,"code":"//@ts-nocheck\nimport bbcKaldiToDraft from'./bbc-kaldi/index';import autoEdit2ToDraft from'./autoEdit2/index';import speechmaticsToDraft from'./speechmatics/index';//@ts-nocheck\nimport amazonTranscribeToDraft from'./amazon-transcribe/index';import ibmToDraft from'./ibm/index';import digitalPaperEditToDraft from'./digital-paper-edit/index';import createEntityMap from'./create-entity-map/index';import gcpSttToDraft from'./google-stt/index';/**\n * Adapters for STT conversion\n * @param {json} transcriptData - A json transcript with some word accurate timecode\n * @param {string} sttJsonType - the type of transcript supported by the available adapters\n */var sttJsonAdapter=function sttJsonAdapter(transcriptData,sttJsonType){var blocks;switch(sttJsonType){case'bbckaldi':blocks=bbcKaldiToDraft(transcriptData);return{blocks:blocks,entityMap:createEntityMap(blocks)};case'autoedit2':blocks=autoEdit2ToDraft(transcriptData);return{blocks:blocks,entityMap:createEntityMap(blocks)};case'speechmatics':blocks=speechmaticsToDraft(transcriptData);return{blocks:blocks,entityMap:createEntityMap(blocks)};case'ibm':blocks=ibmToDraft(transcriptData);return{blocks:blocks,entityMap:createEntityMap(blocks)};case'draftjs':return transcriptData;// (typeof transcriptData === 'string')? JSON.parse(transcriptData): transcriptData;\ncase'amazontranscribe':blocks=amazonTranscribeToDraft(transcriptData);return{blocks:blocks,entityMap:createEntityMap(blocks)};case'digitalpaperedit':blocks=digitalPaperEditToDraft(transcriptData);return{blocks:blocks,entityMap:createEntityMap(blocks)};case'google-stt':blocks=gcpSttToDraft(transcriptData);return{blocks:blocks,entityMap:createEntityMap(blocks)};default:// code block\nconsole.error('Did not recognize the stt engine.');}};export default sttJsonAdapter;export{createEntityMap};","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/stt-adapters/index.js"],"names":["bbcKaldiToDraft","autoEdit2ToDraft","speechmaticsToDraft","amazonTranscribeToDraft","ibmToDraft","digitalPaperEditToDraft","createEntityMap","gcpSttToDraft","sttJsonAdapter","transcriptData","sttJsonType","blocks","entityMap","console","error"],"mappings":"AAAA;AACA,MAAOA,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,sBAAhC,CACA;AACA,MAAOC,CAAAA,uBAAP,KAAoC,2BAApC,CACA,MAAOC,CAAAA,UAAP,KAAuB,aAAvB,CACA,MAAOC,CAAAA,uBAAP,KAAoC,4BAApC,CACA,MAAOC,CAAAA,eAAP,KAA4B,2BAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,oBAA1B,CAEA;;;;GAKA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,cAAD,CAAiBC,WAAjB,CAAiC,CACtD,GAAIC,CAAAA,MAAJ,CACA,OAAQD,WAAR,EACA,IAAK,UAAL,CACEC,MAAM,CAAGX,eAAe,CAACS,cAAD,CAAxB,CAEA,MAAO,CAAEE,MAAM,CAANA,MAAF,CAAUC,SAAS,CAAEN,eAAe,CAACK,MAAD,CAApC,CAAP,CACF,IAAK,WAAL,CACEA,MAAM,CAAGV,gBAAgB,CAACQ,cAAD,CAAzB,CAEA,MAAO,CAAEE,MAAM,CAANA,MAAF,CAAUC,SAAS,CAAEN,eAAe,CAACK,MAAD,CAApC,CAAP,CACF,IAAK,cAAL,CACEA,MAAM,CAAGT,mBAAmB,CAACO,cAAD,CAA5B,CAEA,MAAO,CAAEE,MAAM,CAANA,MAAF,CAAUC,SAAS,CAAEN,eAAe,CAACK,MAAD,CAApC,CAAP,CACF,IAAK,KAAL,CACEA,MAAM,CAAGP,UAAU,CAACK,cAAD,CAAnB,CAEA,MAAO,CAAEE,MAAM,CAANA,MAAF,CAAUC,SAAS,CAAEN,eAAe,CAACK,MAAD,CAApC,CAAP,CACF,IAAK,SAAL,CACE,MAAOF,CAAAA,cAAP,CAAuB;AAEzB,IAAK,kBAAL,CACEE,MAAM,CAAGR,uBAAuB,CAACM,cAAD,CAAhC,CAEA,MAAO,CAAEE,MAAM,CAANA,MAAF,CAAUC,SAAS,CAAEN,eAAe,CAACK,MAAD,CAApC,CAAP,CACF,IAAK,kBAAL,CACEA,MAAM,CAAGN,uBAAuB,CAACI,cAAD,CAAhC,CAEA,MAAO,CAAEE,MAAM,CAANA,MAAF,CAAUC,SAAS,CAAEN,eAAe,CAACK,MAAD,CAApC,CAAP,CAEF,IAAK,YAAL,CACEA,MAAM,CAAGJ,aAAa,CAACE,cAAD,CAAtB,CAEA,MAAO,CAAEE,MAAM,CAANA,MAAF,CAAUC,SAAS,CAAEN,eAAe,CAACK,MAAD,CAApC,CAAP,CAEF,QACE;AACAE,OAAO,CAACC,KAAR,CAAc,mCAAd,EApCF,CAsCD,CAxCD,CA0CA,cAAeN,CAAAA,cAAf,CACA,OAASF,eAAT","sourcesContent":["//@ts-nocheck\nimport bbcKaldiToDraft from './bbc-kaldi/index';\nimport autoEdit2ToDraft from './autoEdit2/index';\nimport speechmaticsToDraft from './speechmatics/index';\n//@ts-nocheck\nimport amazonTranscribeToDraft from './amazon-transcribe/index';\nimport ibmToDraft from './ibm/index';\nimport digitalPaperEditToDraft from './digital-paper-edit/index';\nimport createEntityMap from './create-entity-map/index';\nimport gcpSttToDraft from './google-stt/index';\n\n/**\n * Adapters for STT conversion\n * @param {json} transcriptData - A json transcript with some word accurate timecode\n * @param {string} sttJsonType - the type of transcript supported by the available adapters\n */\nconst sttJsonAdapter = (transcriptData, sttJsonType) => {\n  let blocks;\n  switch (sttJsonType) {\n  case 'bbckaldi':\n    blocks = bbcKaldiToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'autoedit2':\n    blocks = autoEdit2ToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'speechmatics':\n    blocks = speechmaticsToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'ibm':\n    blocks = ibmToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'draftjs':\n    return transcriptData; // (typeof transcriptData === 'string')? JSON.parse(transcriptData): transcriptData;\n\n  case 'amazontranscribe':\n    blocks = amazonTranscribeToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'digitalpaperedit':\n    blocks = digitalPaperEditToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n\n  case 'google-stt':\n    blocks = gcpSttToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n\n  default:\n    // code block\n    console.error('Did not recognize the stt engine.');\n  }\n};\n\nexport default sttJsonAdapter;\nexport { createEntityMap };\n"]},"metadata":{},"sourceType":"module"}