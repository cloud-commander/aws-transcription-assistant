{"ast":null,"code":"import _classCallCheck from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{EditorState,CompositeDecorator,convertFromRaw,convertToRaw,getDefaultKeyBinding,Modifier}from\"draft-js\";import CustomEditor from'./CustomEditor.js';import Word from'./Word';import sttJsonAdapter from'../../stt-adapters';import exportAdapter from'../../export-adapters';import updateTimestamps from'./UpdateTimestamps/index.js';import style from'./index.module.css';var TimedTextEditor=/*#__PURE__*/function(_React$Component){_inherits(TimedTextEditor,_React$Component);var _super=_createSuper(TimedTextEditor);function TimedTextEditor(props){var _this;_classCallCheck(this,TimedTextEditor);_this=_super.call(this,props);_this.shouldComponentUpdate=function(nextProps,nextState){if(nextProps!==_this.props)return true;if(nextState!==_this.state)return true;return false;};_this.onChange=function(editorState){// https://draftjs.org/docs/api-reference-editor-state#lastchangetype\n// https://draftjs.org/docs/api-reference-editor-change-type\n// doing editorStateChangeType === 'insert-characters'  is triggered even\n// outside of draftJS eg when clicking play button so using this instead\n// see issue https://github.com/facebook/draft-js/issues/1060\n// also \"insert-characters\" does not get triggered if you delete text\nif(_this.state.editorState.getCurrentContent()!==editorState.getCurrentContent()){if(_this.props.isPauseWhileTypingOn){if(_this.props.isPlaying()){_this.props.playMedia(false);// Pause video for X seconds\nvar pauseWhileTypingIntervalInMilliseconds=3000;// resets timeout\nclearTimeout(_this.plauseWhileTypingTimeOut);_this.plauseWhileTypingTimeOut=setTimeout(function(){// after timeout starts playing again\nthis.props.playMedia(true);}.bind(_assertThisInitialized(_this)),pauseWhileTypingIntervalInMilliseconds);}}if(_this.saveTimer!==undefined){clearTimeout(_this.saveTimer);}_this.saveTimer=setTimeout(function(){_this.setState(function(){return{editorState:editorState};},function(){// const data = this.updateTimestampsForEditorState();\nvar data=_this.getEditorContent(_this.props.autoSaveContentType,_this.props.title);_this.props.handleAutoSaveChanges(data);});},1000);}if(_this.props.isEditable){_this.setState({editorState:editorState});}};_this.handleDoubleClick=function(event){// nativeEvent --> React giving you the DOM event\nvar element=event.nativeEvent.target;// find the parent in Word that contains span with time-code start attribute\nwhile(!element.hasAttribute(\"data-start\")&&element.parentElement){element=element.parentElement;}if(element.hasAttribute(\"data-start\")){var t=parseFloat(element.getAttribute(\"data-start\"));_this.props.onWordClick(t);}};_this.getWordCount=function(editorState){var plainText=editorState.getCurrentContent().getPlainText('');var regex=/(?:\\r\\n|\\r|\\n)/g;// new line, carriage return, line feed\nvar cleanString=plainText.replace(regex,\" \").trim();// replace above characters w/ space\nvar wordArray=cleanString.match(/\\S+/g);// matches words according to whitespace\nreturn wordArray?wordArray.length:0;};_this.setEditorContentState=function(data){var contentState=convertFromRaw(data);// eslint-disable-next-line no-use-before-define\nvar editorState=EditorState.createWithContent(contentState,decorator);if(_this.props.handleAnalyticsEvents!==undefined){_this.props.handleAnalyticsEvents({category:\"TimedTextEditor\",action:\"setEditorContentState\",name:\"getWordCount\",value:_this.getWordCount(editorState)});}_this.setState({editorState:editorState},function(){_this.forceRenderDecorator();});};_this.forceRenderDecorator=function(){var contentState=_this.state.editorState.getCurrentContent();var decorator=_this.state.editorState.getDecorator();var newState=EditorState.createWithContent(contentState,decorator);var newEditorState=EditorState.push(newState,contentState);_this.setState({editorState:newEditorState});};_this.setEditorNewContentState=function(newContentState){var decorator=_this.state.editorState.getDecorator();var newState=EditorState.createWithContent(newContentState,decorator);var newEditorState=EditorState.push(newState,newContentState);_this.setState({editorState:newEditorState});};_this.setEditorNewContentStateSpeakersUpdate=function(newContentState){var decorator=_this.state.editorState.getDecorator();var newState=EditorState.createWithContent(newContentState,decorator);var editorState=EditorState.push(newState,newContentState);_this.setState(function(){return{editorState:editorState};},function(){var format=_this.props.autoSaveContentType;var title=_this.props.title;var data=exportAdapter(convertToRaw(editorState.getCurrentContent()),format,title);_this.props.handleAutoSaveChanges(data);});};_this.customKeyBindingFn=function(e){var enterKey=13;var spaceKey=32;var kKey=75;var lKey=76;var jKey=74;var equalKey=187;//used for +\nvar minusKey=189;// -\nvar rKey=82;var tKey=84;if(e.keyCode===enterKey){console.log('customKeyBindingFn');return\"split-paragraph\";}// if alt key is pressed in combination with these other keys\nif(e.altKey&&(e.keyCode===spaceKey||e.keyCode===spaceKey||e.keyCode===kKey||e.keyCode===lKey||e.keyCode===jKey||e.keyCode===equalKey||e.keyCode===minusKey||e.keyCode===rKey||e.keyCode===tKey)){e.preventDefault();return\"keyboard-shortcuts\";}return getDefaultKeyBinding(e);};_this.handleKeyCommand=function(command){if(command==='split-paragraph'){_this.splitParagraph();}if(command===\"keyboard-shortcuts\"){return\"handled\";}return'not-handled';};_this.splitParagraph=function(){// https://github.com/facebook/draft-js/issues/723#issuecomment-367918580\n// https://draftjs.org/docs/api-reference-selection-state#start-end-vs-anchor-focus\nvar currentSelection=_this.state.editorState.getSelection();// only perform if selection is not selecting a range of words\n// in that case, we'd expect delete + enter to achieve same result.\nif(currentSelection.isCollapsed()){var currentContent=_this.state.editorState.getCurrentContent();// https://draftjs.org/docs/api-reference-modifier#splitblock\nvar newContentState=Modifier.splitBlock(currentContent,currentSelection);// https://draftjs.org/docs/api-reference-editor-state#push\nvar splitState=EditorState.push(_this.state.editorState,newContentState,'split-block');var targetSelection=splitState.getSelection();var originalBlock=currentContent.blockMap.get(newContentState.selectionBefore.getStartKey());var originalBlockData=originalBlock.getData();var blockSpeaker=originalBlockData.get(\"speaker\");var wordStartTime=\"NA\";// eslint-disable-next-line prefer-const\nvar isEndOfParagraph=false;// identify the entity (word) at the selection/cursor point on split.\n// eslint-disable-next-line prefer-const\nvar entityKey=originalBlock.getEntityAt(currentSelection.getStartOffset());// if there is no word entity associated with a char then there is no entity key\n// at that selection point\nif(entityKey===null){var closestEntityToSelection=_this.findClosestEntityKeyToSelectionPoint(currentSelection,originalBlock);entityKey=closestEntityToSelection.entityKey;isEndOfParagraph=closestEntityToSelection.isEndOfParagraph;// handle edge case when it doesn't find a closest entity (word)\n// eg pres enter on an empty line\nif(entityKey===null){return\"not-handled\";}}// if there is an entityKey at or close to the selection point\n// can get the word startTime. for the new paragraph.\nvar entityInstance=currentContent.getEntity(entityKey);var entityData=entityInstance.getData();if(isEndOfParagraph){// if it's end of paragraph use end time of word for new paragraph\nwordStartTime=entityData.end;}else{wordStartTime=entityData.start;}// split paragraph\n// https://draftjs.org/docs/api-reference-modifier#mergeblockdata\nvar afterMergeContentState=Modifier.mergeBlockData(splitState.getCurrentContent(),targetSelection,{start:wordStartTime,speaker:blockSpeaker});_this.setEditorNewContentState(afterMergeContentState);return\"handled\";}return'not-handled';};_this.findClosestEntityKeyToSelectionPoint=function(currentSelection,originalBlock){// set defaults\nvar entityKey=null;var isEndOfParagraph=false;// selection offset from beginning of the paragraph block\nvar startSelectionOffsetKey=currentSelection.getStartOffset();// length of the plain text for the ContentBlock\nvar lengthPlainTextForTheBlock=originalBlock.getLength();// number of char from selection point to end of paragraph\nvar remainingCharNumber=lengthPlainTextForTheBlock-startSelectionOffsetKey;// if it's the last char in the paragraph - get previous entity\nif(remainingCharNumber===0){isEndOfParagraph=true;for(var j=lengthPlainTextForTheBlock;j>0;j--){entityKey=originalBlock.getEntityAt(j);if(entityKey!==null){// if it finds it then return\nreturn{entityKey:entityKey,isEndOfParagraph:isEndOfParagraph};}}}// if it's first char or another within the block - get next entity\nelse{var initialSelectionOffset=currentSelection.getStartOffset();for(var i=0;i<remainingCharNumber;i++){initialSelectionOffset+=i;entityKey=originalBlock.getEntityAt(initialSelectionOffset);// if it finds it then return\nif(entityKey!==null){return{entityKey:entityKey,isEndOfParagraph:isEndOfParagraph};}}}// cover edge cases where it doesn't find it\nreturn{entityKey:entityKey,isEndOfParagraph:isEndOfParagraph};};_this.getCurrentWord=function(){var currentWord={start:\"NA\",end:\"NA\"};if(_this.props.transcriptData){var contentState=_this.state.editorState.getCurrentContent();// TODO: using convertToRaw here might be slowing down performance(?)\nvar contentStateConvertEdToRaw=convertToRaw(contentState);var entityMap=contentStateConvertEdToRaw.entityMap;for(var entityKey in entityMap){var entity=entityMap[entityKey];var word=entity.data;if(word.start<=_this.props.currentTime&&word.end>=_this.props.currentTime){currentWord.start=word.start;currentWord.end=word.end;}}}if(currentWord.start!==\"NA\"){if(_this.props.isScrollIntoViewOn){var currentWordElement=document.querySelector(\"span.Word[data-start=\\\"\".concat(currentWord.start,\"\\\"]\"));currentWordElement.scrollIntoView({block:'nearest',inline:'center'});}}return currentWord;};_this.onWordClick=function(e){_this.props.onWordClick(e);};_this.state={editorState:EditorState.createEmpty()};return _this;}_createClass(TimedTextEditor,[{key:\"componentDidMount\",value:function componentDidMount(){this.loadData();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){if(prevProps.timecodeOffset!==this.props.timecodeOffset||prevProps.showSpeakers!==this.props.showSpeakers||prevProps.showTimecodes!==this.props.showTimecodes||prevProps.isEditable!==this.props.isEditable){// forcing a re-render is an expensive operation and\n// there might be a way of optimising this at a later refactor (?)\n// the issue is that WrapperBlock is not update on TimedTextEditor\n// state change otherwise.\n// for now compromising on this, as setting timecode offset, and\n// display preferences for speakers and timecodes are not expected to\n// be very frequent operations but rather one time setup in most cases.\nthis.forceRenderDecorator();}}},{key:\"updateTimestampsForEditorState\",value:function updateTimestampsForEditorState(){// Update timestamps according to the original state.\nvar currentContent=convertToRaw(this.state.editorState.getCurrentContent());var updatedContentRaw=updateTimestamps(currentContent,this.state.originalState);var updatedContent=convertFromRaw(updatedContentRaw);// Update editor state\nvar newEditorState=EditorState.push(this.state.editorState,updatedContent);// Re-convert updated content to raw to gain access to block keys\nvar updatedContentBlocks=convertToRaw(updatedContent);// Get current selection state and update block keys\nvar selectionState=this.state.editorState.getSelection();// Check if editor has currently the focus. If yes, keep current selection.\nif(selectionState.getHasFocus()){// Build block map, which maps the block keys of the previous content to the block keys of the\n// updated content.\nvar blockMap={};for(var blockIdx=0;blockIdx<currentContent.blocks.length;blockIdx++){blockMap[currentContent.blocks[blockIdx].key]=updatedContentBlocks.blocks[blockIdx].key;}var selection=selectionState.merge({anchorOffset:selectionState.getAnchorOffset(),anchorKey:blockMap[selectionState.getAnchorKey()],focusOffset:selectionState.getFocusOffset(),focusKey:blockMap[selectionState.getFocusKey()]});// Set the updated selection state on the new editor state\nvar newEditorStateSelected=EditorState.forceSelection(newEditorState,selection);this.setState({editorState:newEditorStateSelected});return newEditorStateSelected;}else{this.setState({editorState:newEditorState});return newEditorState;}}},{key:\"loadData\",value:function loadData(){if(this.props.transcriptData!==null){var blocks=sttJsonAdapter(this.props.transcriptData,this.props.sttJsonType);this.setState({originalState:convertToRaw(convertFromRaw(blocks))});this.setEditorContentState(blocks);}}},{key:\"getEditorContent\",value:function getEditorContent(exportFormat,title){var format=exportFormat||'draftjs';var tmpEditorState=this.updateTimestampsForEditorState();return exportAdapter(convertToRaw(tmpEditorState.getCurrentContent()),format,title);}// click on words - for navigation\n// eslint-disable-next-line class-methods-use-this\n},{key:\"render\",value:function render(){// console.log('render TimedTextEditor');\nvar currentWord=this.getCurrentWord();var highlightColour=\"#69e3c2\";var unplayedColor=\"#767676\";var correctionBorder=\"1px dotted blue\";// Time to the nearest half second\nvar time=Math.round(this.props.currentTime*4.0)/4.0;var editor=/*#__PURE__*/React.createElement(\"section\",{className:style.editor,onDoubleClick:this.handleDoubleClick// TODO: decide if on mobile want to have a way to \"click\" on words\n// to play corresponding media\n// a double tap would be the ideal solution\n// onTouchStart={ event => this.handleDoubleClick(event) }\n},/*#__PURE__*/React.createElement(\"style\",{scoped:true},\"span.Word[data-start=\\\"\".concat(currentWord.start,\"\\\"] { background-color: \").concat(highlightColour,\"; text-shadow: 0 0 0.01px #232F3E }\"),\"span.Word[data-start=\\\"\".concat(currentWord.start,\"\\\"]+span { background-color: \").concat(highlightColour,\" }\"),\"span.Word[data-prev-times~=\\\"\".concat(Math.floor(time),\"\\\"] { color: \").concat(unplayedColor,\" }\"),\"span.Word[data-prev-times~=\\\"\".concat(time,\"\\\"] { color: \").concat(unplayedColor,\" }\"),\"span.Word[data-confidence=\\\"low\\\"] { border-bottom: \".concat(correctionBorder,\" }\")),/*#__PURE__*/React.createElement(CustomEditor,{editorState:this.state.editorState,onChange:this.onChange,stripPastedStyles:true,handleKeyCommand:this.handleKeyCommand,customKeyBindingFn:this.customKeyBindingFn,spellCheck:this.props.spellCheck,showSpeakers:this.props.showSpeakers,showTimecodes:this.props.showTimecodes,timecodeOffset:this.props.timecodeOffset,setEditorNewContentStateSpeakersUpdate:this.setEditorNewContentStateSpeakersUpdate,onWordClick:this.onWordClick,handleAnalyticsEvents:this.props.handleAnalyticsEvents,isEditable:this.props.isEditable}));return/*#__PURE__*/React.createElement(\"section\",null,this.props.transcriptData!==null?editor:null);}}]);return TimedTextEditor;}(React.Component);// DraftJs decorator to recognize which entity is which\n// and know what to apply to what component\nvar getEntityStrategy=function getEntityStrategy(mutability){return function(contentBlock,callback,contentState){contentBlock.findEntityRanges(function(character){var entityKey=character.getEntity();if(entityKey===null){return false;}return contentState.getEntity(entityKey).getMutability()===mutability;},callback);};};// decorator definition - Draftjs\n// defines what to use to render the entity\nvar decorator=new CompositeDecorator([{strategy:getEntityStrategy('MUTABLE'),component:Word}]);export default TimedTextEditor;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/timed-text-editor/index.js"],"names":["React","EditorState","CompositeDecorator","convertFromRaw","convertToRaw","getDefaultKeyBinding","Modifier","CustomEditor","Word","sttJsonAdapter","exportAdapter","updateTimestamps","style","TimedTextEditor","props","shouldComponentUpdate","nextProps","nextState","state","onChange","editorState","getCurrentContent","isPauseWhileTypingOn","isPlaying","playMedia","pauseWhileTypingIntervalInMilliseconds","clearTimeout","plauseWhileTypingTimeOut","setTimeout","bind","saveTimer","undefined","setState","data","getEditorContent","autoSaveContentType","title","handleAutoSaveChanges","isEditable","handleDoubleClick","event","element","nativeEvent","target","hasAttribute","parentElement","t","parseFloat","getAttribute","onWordClick","getWordCount","plainText","getPlainText","regex","cleanString","replace","trim","wordArray","match","length","setEditorContentState","contentState","createWithContent","decorator","handleAnalyticsEvents","category","action","name","value","forceRenderDecorator","getDecorator","newState","newEditorState","push","setEditorNewContentState","newContentState","setEditorNewContentStateSpeakersUpdate","format","customKeyBindingFn","e","enterKey","spaceKey","kKey","lKey","jKey","equalKey","minusKey","rKey","tKey","keyCode","console","log","altKey","preventDefault","handleKeyCommand","command","splitParagraph","currentSelection","getSelection","isCollapsed","currentContent","splitBlock","splitState","targetSelection","originalBlock","blockMap","get","selectionBefore","getStartKey","originalBlockData","getData","blockSpeaker","wordStartTime","isEndOfParagraph","entityKey","getEntityAt","getStartOffset","closestEntityToSelection","findClosestEntityKeyToSelectionPoint","entityInstance","getEntity","entityData","end","start","afterMergeContentState","mergeBlockData","speaker","startSelectionOffsetKey","lengthPlainTextForTheBlock","getLength","remainingCharNumber","j","initialSelectionOffset","i","getCurrentWord","currentWord","transcriptData","contentStateConvertEdToRaw","entityMap","entity","word","currentTime","isScrollIntoViewOn","currentWordElement","document","querySelector","scrollIntoView","block","inline","createEmpty","loadData","prevProps","prevState","timecodeOffset","showSpeakers","showTimecodes","updatedContentRaw","originalState","updatedContent","updatedContentBlocks","selectionState","getHasFocus","blockIdx","blocks","key","selection","merge","anchorOffset","getAnchorOffset","anchorKey","getAnchorKey","focusOffset","getFocusOffset","focusKey","getFocusKey","newEditorStateSelected","forceSelection","sttJsonType","exportFormat","tmpEditorState","updateTimestampsForEditorState","highlightColour","unplayedColor","correctionBorder","time","Math","round","editor","floor","spellCheck","Component","getEntityStrategy","mutability","contentBlock","callback","findEntityRanges","character","getMutability","strategy","component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  EditorState,\n  CompositeDecorator,\n  convertFromRaw,\n  convertToRaw,\n  getDefaultKeyBinding,\n  Modifier\n} from \"draft-js\";\n\n\nimport CustomEditor from './CustomEditor.js';\nimport Word from './Word';\n\nimport sttJsonAdapter from '../../stt-adapters';\nimport exportAdapter from '../../export-adapters';\nimport updateTimestamps from './UpdateTimestamps/index.js';\nimport style from './index.module.css';\n\nclass TimedTextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  shouldComponentUpdate = (nextProps, nextState) => {\n    if (nextProps !== this.props) return true;\n\n    if (nextState !== this.state) return true;\n\n    return false;\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.timecodeOffset !== this.props.timecodeOffset ||\n      prevProps.showSpeakers !== this.props.showSpeakers ||\n      prevProps.showTimecodes !== this.props.showTimecodes ||\n      prevProps.isEditable !== this.props.isEditable\n    ) {\n      // forcing a re-render is an expensive operation and\n      // there might be a way of optimising this at a later refactor (?)\n      // the issue is that WrapperBlock is not update on TimedTextEditor\n      // state change otherwise.\n      // for now compromising on this, as setting timecode offset, and\n      // display preferences for speakers and timecodes are not expected to\n      // be very frequent operations but rather one time setup in most cases.\n      this.forceRenderDecorator();\n    }\n  }\n\n  onChange = editorState => {\n    // https://draftjs.org/docs/api-reference-editor-state#lastchangetype\n    // https://draftjs.org/docs/api-reference-editor-change-type\n    // doing editorStateChangeType === 'insert-characters'  is triggered even\n    // outside of draftJS eg when clicking play button so using this instead\n    // see issue https://github.com/facebook/draft-js/issues/1060\n    // also \"insert-characters\" does not get triggered if you delete text\n    if (this.state.editorState.getCurrentContent() !== editorState.getCurrentContent()) {\n      if (this.props.isPauseWhileTypingOn) {\n        if (this.props.isPlaying()) {\n          this.props.playMedia(false);\n          // Pause video for X seconds\n          const pauseWhileTypingIntervalInMilliseconds = 3000;\n          // resets timeout\n          clearTimeout(this.plauseWhileTypingTimeOut);\n          this.plauseWhileTypingTimeOut = setTimeout(\n            function() {\n              // after timeout starts playing again\n              this.props.playMedia(true);\n            }.bind(this),\n            pauseWhileTypingIntervalInMilliseconds\n          );\n        }\n      }\n\n      if (this.saveTimer !== undefined) {\n        clearTimeout(this.saveTimer);\n      }\n      this.saveTimer = setTimeout(() => {\n        this.setState(\n          () => ({\n            editorState\n          }),\n          () => {\n            // const data = this.updateTimestampsForEditorState();\n            const data = this.getEditorContent( this.props.autoSaveContentType, this.props.title);\n            this.props.handleAutoSaveChanges(data);\n          }\n        );\n      }, 1000);\n    }\n\n    if (this.props.isEditable) {\n      this.setState({ editorState });\n    }\n  };\n\n  updateTimestampsForEditorState() {\n    // Update timestamps according to the original state.\n    const currentContent = convertToRaw(\n      this.state.editorState.getCurrentContent()\n    );\n    const updatedContentRaw = updateTimestamps(\n      currentContent,\n      this.state.originalState\n    );\n    const updatedContent = convertFromRaw(updatedContentRaw);\n\n    // Update editor state\n    const newEditorState = EditorState.push(\n      this.state.editorState,\n      updatedContent\n    );\n\n    // Re-convert updated content to raw to gain access to block keys\n    const updatedContentBlocks = convertToRaw(updatedContent);\n\n    // Get current selection state and update block keys\n    const selectionState = this.state.editorState.getSelection();\n\n    // Check if editor has currently the focus. If yes, keep current selection.\n    if (selectionState.getHasFocus()) {\n      // Build block map, which maps the block keys of the previous content to the block keys of the\n      // updated content.\n      var blockMap = {};\n      for (\n        var blockIdx = 0;\n        blockIdx < currentContent.blocks.length;\n        blockIdx++\n      ) {\n        blockMap[currentContent.blocks[blockIdx].key] =\n          updatedContentBlocks.blocks[blockIdx].key;\n      }\n\n      const selection = selectionState.merge({\n        anchorOffset: selectionState.getAnchorOffset(),\n        anchorKey: blockMap[selectionState.getAnchorKey()],\n        focusOffset: selectionState.getFocusOffset(),\n        focusKey: blockMap[selectionState.getFocusKey()]\n      });\n\n      // Set the updated selection state on the new editor state\n      const newEditorStateSelected = EditorState.forceSelection(\n        newEditorState,\n        selection\n      );\n      this.setState({ editorState: newEditorStateSelected });\n      return newEditorStateSelected;\n    } else {\n      this.setState({ editorState: newEditorState });\n      return newEditorState;\n    }\n  }\n\n  loadData() {\n    if (this.props.transcriptData !== null) {\n      const blocks = sttJsonAdapter(\n        this.props.transcriptData,\n        this.props.sttJsonType\n      );\n      this.setState({ originalState: convertToRaw(convertFromRaw(blocks)) });\n      this.setEditorContentState(blocks);\n    }\n  }\n\n  getEditorContent(exportFormat, title) {\n    const format = exportFormat || 'draftjs';\n    const tmpEditorState = this.updateTimestampsForEditorState();\n\n    return exportAdapter(\n      convertToRaw(tmpEditorState.getCurrentContent()),\n      format,\n      title\n    );\n  }\n\n  // click on words - for navigation\n  // eslint-disable-next-line class-methods-use-this\n  handleDoubleClick = event => {\n    // nativeEvent --> React giving you the DOM event\n    let element = event.nativeEvent.target;\n    // find the parent in Word that contains span with time-code start attribute\n    while (!element.hasAttribute(\"data-start\") && element.parentElement) {\n      element = element.parentElement;\n    }\n\n    if (element.hasAttribute(\"data-start\")) {\n      const t = parseFloat(element.getAttribute(\"data-start\"));\n      this.props.onWordClick(t);\n    }\n  };\n\n  // originally from\n  // https://github.com/draft-js-plugins/draft-js-plugins/blob/master/draft-js-counter-plugin/src/WordCounter/index.js#L12\n  getWordCount = editorState => {\n    const plainText = editorState.getCurrentContent().getPlainText('');\n    const regex = /(?:\\r\\n|\\r|\\n)/g; // new line, carriage return, line feed\n    const cleanString = plainText.replace(regex, \" \").trim(); // replace above characters w/ space\n    const wordArray = cleanString.match(/\\S+/g); // matches words according to whitespace\n\n    return wordArray ? wordArray.length : 0;\n  };\n\n  /**\n   * @param {object} data.entityMap - draftJs entity maps - used by convertFromRaw\n   * @param {object} data.blocks - draftJs blocks - used by convertFromRaw\n   * set DraftJS Editor content state from blocks\n   * contains blocks and entityMap\n   */\n  setEditorContentState = data => {\n    const contentState = convertFromRaw(data);\n    // eslint-disable-next-line no-use-before-define\n    const editorState = EditorState.createWithContent(contentState, decorator);\n\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: \"TimedTextEditor\",\n        action: \"setEditorContentState\",\n        name: \"getWordCount\",\n        value: this.getWordCount(editorState)\n      });\n    }\n\n    this.setState({ editorState }, ()=>{\n      this.forceRenderDecorator();\n    });\n  };\n\n  // Helper function to re-render this component\n  // used to re-render WrapperBlock on timecode offset change\n  // or when show / hide preferences for speaker labels and timecodes change\n  forceRenderDecorator = () => {\n    const contentState = this.state.editorState.getCurrentContent();\n    const decorator = this.state.editorState.getDecorator();\n    const newState = EditorState.createWithContent(contentState, decorator);\n    const newEditorState = EditorState.push(newState, contentState);\n    this.setState({ editorState: newEditorState });\n  };\n\n  /**\n   * Update Editor content state\n   */\n  setEditorNewContentState = newContentState => {\n    const decorator = this.state.editorState.getDecorator();\n    const newState = EditorState.createWithContent(newContentState, decorator);\n    const newEditorState = EditorState.push(\n      newState,\n      newContentState\n    );\n    this.setState({ editorState: newEditorState });\n  };\n\n  setEditorNewContentStateSpeakersUpdate = newContentState => {\n    const decorator = this.state.editorState.getDecorator();\n    const newState = EditorState.createWithContent(newContentState, decorator);\n    const editorState = EditorState.push(\n      newState,\n      newContentState\n    );\n\n    this.setState(\n      () => ({\n        editorState\n      }),\n      () => {\n        const format =  this.props.autoSaveContentType;\n        const title = this.props.title;\n\n        const data = exportAdapter(\n          convertToRaw(editorState.getCurrentContent()),\n          format,\n          title\n        );\n\n        this.props.handleAutoSaveChanges(data);\n      }\n    );\n  };\n\n  /**\n   * Listen for draftJs custom key bindings\n   */\n  customKeyBindingFn = e => {\n    const enterKey = 13;\n    const spaceKey = 32;\n    const kKey = 75;\n    const lKey = 76;\n    const jKey = 74;\n    const equalKey = 187; //used for +\n    const minusKey = 189; // -\n    const rKey = 82;\n    const tKey = 84;\n\n    if (e.keyCode === enterKey) {\n      console.log('customKeyBindingFn');\n\n      return \"split-paragraph\";\n    }\n    // if alt key is pressed in combination with these other keys\n    if (\n      e.altKey &&\n      (e.keyCode === spaceKey ||\n        e.keyCode === spaceKey ||\n        e.keyCode === kKey ||\n        e.keyCode === lKey ||\n        e.keyCode === jKey ||\n        e.keyCode === equalKey ||\n        e.keyCode === minusKey ||\n        e.keyCode === rKey ||\n        e.keyCode === tKey)\n    ) {\n      e.preventDefault();\n\n      return \"keyboard-shortcuts\";\n    }\n\n    return getDefaultKeyBinding(e);\n  };\n\n  /**\n   * Handle draftJs custom key commands\n   */\n  handleKeyCommand = command => {\n    if (command === 'split-paragraph') {\n      this.splitParagraph();\n    }\n\n    if (command === \"keyboard-shortcuts\") {\n      return \"handled\";\n    }\n    return 'not-handled';\n  };\n\n  /**\n   * Helper function to handle splitting paragraphs with return key\n   * on enter key, perform split paragraph at selection point.\n   * Add timecode of next word after split to paragraph\n   * as well as speaker name to new paragraph\n   * TODO: move into its own file as helper function\n   */\n  splitParagraph = () => {\n    // https://github.com/facebook/draft-js/issues/723#issuecomment-367918580\n    // https://draftjs.org/docs/api-reference-selection-state#start-end-vs-anchor-focus\n    const currentSelection = this.state.editorState.getSelection();\n    // only perform if selection is not selecting a range of words\n    // in that case, we'd expect delete + enter to achieve same result.\n    if (currentSelection.isCollapsed()) {\n      const currentContent = this.state.editorState.getCurrentContent();\n      // https://draftjs.org/docs/api-reference-modifier#splitblock\n      const newContentState = Modifier.splitBlock(\n        currentContent,\n        currentSelection\n      );\n      // https://draftjs.org/docs/api-reference-editor-state#push\n      const splitState = EditorState.push(\n        this.state.editorState,\n        newContentState,\n        'split-block'\n      );\n      const targetSelection = splitState.getSelection();\n\n      const originalBlock = currentContent.blockMap.get(\n        newContentState.selectionBefore.getStartKey()\n      );\n      const originalBlockData = originalBlock.getData();\n      const blockSpeaker = originalBlockData.get(\"speaker\");\n\n      let wordStartTime = \"NA\";\n      // eslint-disable-next-line prefer-const\n      let isEndOfParagraph = false;\n      // identify the entity (word) at the selection/cursor point on split.\n      // eslint-disable-next-line prefer-const\n      let entityKey = originalBlock.getEntityAt(\n        currentSelection.getStartOffset()\n      );\n      // if there is no word entity associated with a char then there is no entity key\n      // at that selection point\n      if (entityKey === null) {\n        const closestEntityToSelection = this.findClosestEntityKeyToSelectionPoint(\n          currentSelection,\n          originalBlock\n        );\n        entityKey = closestEntityToSelection.entityKey;\n        isEndOfParagraph = closestEntityToSelection.isEndOfParagraph;\n        // handle edge case when it doesn't find a closest entity (word)\n        // eg pres enter on an empty line\n        if (entityKey === null) {\n          return \"not-handled\";\n        }\n      }\n      // if there is an entityKey at or close to the selection point\n      // can get the word startTime. for the new paragraph.\n      const entityInstance = currentContent.getEntity(entityKey);\n      const entityData = entityInstance.getData();\n      if (isEndOfParagraph) {\n        // if it's end of paragraph use end time of word for new paragraph\n        wordStartTime = entityData.end;\n      } else {\n        wordStartTime = entityData.start;\n      }\n      // split paragraph\n      // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n      const afterMergeContentState = Modifier.mergeBlockData(\n        splitState.getCurrentContent(),\n        targetSelection,\n        {\n          start: wordStartTime,\n          speaker: blockSpeaker\n        }\n      );\n      this.setEditorNewContentState(afterMergeContentState);\n\n      return \"handled\";\n    }\n\n    return 'not-handled';\n  };\n\n  /**\n   * Helper function for splitParagraph\n   * to find the closest entity (word) to a selection point\n   * that does not fall on an entity to begin with\n   * Looks before if it's last char in a paragraph block.\n   * After for everything else.\n   */\n  findClosestEntityKeyToSelectionPoint = (currentSelection, originalBlock) => {\n    // set defaults\n    let entityKey = null;\n    let isEndOfParagraph = false;\n\n    // selection offset from beginning of the paragraph block\n    const startSelectionOffsetKey = currentSelection.getStartOffset();\n    // length of the plain text for the ContentBlock\n    const lengthPlainTextForTheBlock = originalBlock.getLength();\n    // number of char from selection point to end of paragraph\n    const remainingCharNumber =\n      lengthPlainTextForTheBlock - startSelectionOffsetKey;\n    // if it's the last char in the paragraph - get previous entity\n    if (remainingCharNumber === 0) {\n      isEndOfParagraph = true;\n      for (let j = lengthPlainTextForTheBlock; j > 0; j--) {\n        entityKey = originalBlock.getEntityAt(j);\n        if (entityKey !== null) {\n          // if it finds it then return\n          return { entityKey, isEndOfParagraph };\n        }\n      }\n    }\n    // if it's first char or another within the block - get next entity\n    else {\n      let initialSelectionOffset = currentSelection.getStartOffset();\n      for (let i = 0; i < remainingCharNumber; i++) {\n        initialSelectionOffset += i;\n        entityKey = originalBlock.getEntityAt(initialSelectionOffset);\n        // if it finds it then return\n        if (entityKey !== null) {\n          return { entityKey, isEndOfParagraph };\n        }\n      }\n    }\n\n    // cover edge cases where it doesn't find it\n    return { entityKey, isEndOfParagraph };\n  };\n\n  getCurrentWord = () => {\n    const currentWord = {\n      start: \"NA\",\n      end: \"NA\"\n    };\n\n    if (this.props.transcriptData) {\n      const contentState = this.state.editorState.getCurrentContent();\n      // TODO: using convertToRaw here might be slowing down performance(?)\n      const contentStateConvertEdToRaw = convertToRaw(contentState);\n      const entityMap = contentStateConvertEdToRaw.entityMap;\n\n      for (var entityKey in entityMap) {\n        const entity = entityMap[entityKey];\n        const word = entity.data;\n\n        if (\n          word.start <= this.props.currentTime &&\n          word.end >= this.props.currentTime\n        ) {\n          currentWord.start = word.start;\n          currentWord.end = word.end;\n        }\n      }\n    }\n\n    if (currentWord.start !== \"NA\") {\n      if (this.props.isScrollIntoViewOn) {\n        const currentWordElement = document.querySelector(\n          `span.Word[data-start=\"${ currentWord.start }\"]`\n        );\n        currentWordElement.scrollIntoView({\n          block: 'nearest',\n          inline: 'center'\n        });\n      }\n    }\n\n    return currentWord;\n  };\n\n  onWordClick = e => {\n    this.props.onWordClick(e);\n  };\n\n  render() {\n    // console.log('render TimedTextEditor');\n    const currentWord = this.getCurrentWord();\n    const highlightColour = \"#69e3c2\";\n    const unplayedColor = \"#767676\";\n    const correctionBorder = \"1px dotted blue\";\n\n    // Time to the nearest half second\n    const time = Math.round(this.props.currentTime * 4.0) / 4.0;\n\n    const editor = (\n      <section\n        className={style.editor}\n        onDoubleClick={this.handleDoubleClick}\n        // TODO: decide if on mobile want to have a way to \"click\" on words\n        // to play corresponding media\n        // a double tap would be the ideal solution\n        // onTouchStart={ event => this.handleDoubleClick(event) }\n      >\n        <style scoped>\n          {`span.Word[data-start=\"${ currentWord.start }\"] { background-color: ${ highlightColour }; text-shadow: 0 0 0.01px #232F3E }`}\n          {`span.Word[data-start=\"${ currentWord.start }\"]+span { background-color: ${ highlightColour } }`}\n          {`span.Word[data-prev-times~=\"${ Math.floor(\n            time\n          ) }\"] { color: ${ unplayedColor } }`}\n          {`span.Word[data-prev-times~=\"${ time }\"] { color: ${ unplayedColor } }`}\n          {`span.Word[data-confidence=\"low\"] { border-bottom: ${ correctionBorder } }`}\n        </style>\n        <CustomEditor\n          editorState={this.state.editorState}\n          onChange={this.onChange}\n          stripPastedStyles\n          handleKeyCommand={this.handleKeyCommand}\n          customKeyBindingFn={this.customKeyBindingFn}\n          spellCheck={this.props.spellCheck}\n          showSpeakers={this.props.showSpeakers}\n          showTimecodes={this.props.showTimecodes}\n          timecodeOffset={this.props.timecodeOffset}\n          setEditorNewContentStateSpeakersUpdate={this.setEditorNewContentStateSpeakersUpdate}\n          onWordClick={this.onWordClick}\n          handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n          isEditable={this.props.isEditable}\n        />\n      </section>\n    );\n\n    return (\n      <section>{this.props.transcriptData !== null ? editor : null}</section>\n    );\n  }\n}\n\n// DraftJs decorator to recognize which entity is which\n// and know what to apply to what component\nconst getEntityStrategy = mutability => (\n  contentBlock,\n  callback,\n  contentState\n) => {\n  contentBlock.findEntityRanges(character => {\n    const entityKey = character.getEntity();\n    if (entityKey === null) {\n      return false;\n    }\n\n    return contentState.getEntity(entityKey).getMutability() === mutability;\n  }, callback);\n};\n\n// decorator definition - Draftjs\n// defines what to use to render the entity\nconst decorator = new CompositeDecorator([\n  {\n    strategy: getEntityStrategy('MUTABLE'),\n    component: Word\n  }\n]);\n\nTimedTextEditor.propTypes = {\n  transcriptData: PropTypes.object,\n  mediaUrl: PropTypes.string,\n  isEditable: PropTypes.bool,\n  spellCheck: PropTypes.bool,\n  onWordClick: PropTypes.func,\n  sttJsonType: PropTypes.string,\n  isPlaying: PropTypes.func,\n  playMedia: PropTypes.func,\n  currentTime: PropTypes.number,\n  isScrollIntoViewOn: PropTypes.bool,\n  isPauseWhileTypingOn: PropTypes.bool,\n  timecodeOffset: PropTypes.number,\n  handleAnalyticsEvents: PropTypes.func,\n  showSpeakers: PropTypes.bool,\n  showTimecodes: PropTypes.bool,\n  fileName: PropTypes.string\n};\n\nexport default TimedTextEditor;\n"]},"metadata":{},"sourceType":"module"}