{"ast":null,"code":"var _jsxFileName = \"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/video-player/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './index.module.css';\n\nclass VideoPlayer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handlePlayMedia = () => {\n      if (this.props.videoRef.current !== null) {\n        return this.props.videoRef.current.paused ? this.props.videoRef.current.play() : this.props.videoRef.current.pause();\n      }\n    };\n  }\n\n  // to avoid unnecessary re-renders\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.previewIsDisplayed !== this.props.previewIsDisplayed) {\n      return true;\n    }\n\n    if (nextProps.mediaUrl !== this.props.mediaUrl) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const isDisplayed = this.props.previewIsDisplayed ? 'inline' : 'none';\n    return /*#__PURE__*/React.createElement(\"video\", {\n      id: \"video\",\n      playsInline: true,\n      src: this.props.mediaUrl,\n      onTimeUpdate: this.props.onTimeUpdate,\n      \"data-testid\": \"media-player-id\",\n      onClick: this.handlePlayMedia,\n      onLoadedData: this.props.onLoadedDataGetDuration,\n      ref: this.props.videoRef,\n      className: styles.videoEl,\n      preload: \"auto\",\n      style: {\n        display: isDisplayed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nVideoPlayer.propTypes = {\n  mediaUrl: PropTypes.string,\n  onTimeUpdate: PropTypes.func,\n  onClick: PropTypes.func,\n  videoRef: PropTypes.object.isRequired,\n  onLoadedDataGetDuration: PropTypes.func,\n  previewIsDisplayed: PropTypes.bool,\n  previewViewWidth: PropTypes.string\n};\nexport default VideoPlayer;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/video-player/index.js"],"names":["React","PropTypes","styles","VideoPlayer","Component","handlePlayMedia","props","videoRef","current","paused","play","pause","shouldComponentUpdate","nextProps","previewIsDisplayed","mediaUrl","render","isDisplayed","onTimeUpdate","onLoadedDataGetDuration","videoEl","display","propTypes","string","func","onClick","object","isRequired","bool","previewViewWidth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAA0C;AAAA;AAAA;;AAAA,SAexCC,eAfwC,GAetB,MAAM;AACtB,UAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,OAApB,KAAgC,IAApC,EAA0C;AACxC,eAAO,KAAKF,KAAL,CAAWC,QAAX,CAAoBC,OAApB,CAA4BC,MAA5B,GACH,KAAKH,KAAL,CAAWC,QAAX,CAAoBC,OAApB,CAA4BE,IAA5B,EADG,GAEH,KAAKJ,KAAL,CAAWC,QAAX,CAAoBC,OAApB,CAA4BG,KAA5B,EAFJ;AAGD;AACF,KArBuC;AAAA;;AAExC;AACAC,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,QAAIA,SAAS,CAACC,kBAAV,KAAiC,KAAKR,KAAL,CAAWQ,kBAAhD,EAAoE;AAClE,aAAO,IAAP;AACD;;AAED,QAAID,SAAS,CAACE,QAAV,KAAuB,KAAKT,KAAL,CAAWS,QAAtC,EAAgD;AAC9C,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AASDC,EAAAA,MAAM,GAAG;AACP,UAAMC,WAAW,GAAG,KAAKX,KAAL,CAAWQ,kBAAX,GAAgC,QAAhC,GAA2C,MAA/D;AAEA,wBACE;AACE,MAAA,EAAE,EAAC,OADL;AAEE,MAAA,WAAW,MAFb;AAGE,MAAA,GAAG,EAAG,KAAKR,KAAL,CAAWS,QAHnB;AAIE,MAAA,YAAY,EAAG,KAAKT,KAAL,CAAWY,YAJ5B;AAKE,qBAAY,iBALd;AAME,MAAA,OAAO,EAAG,KAAKb,eANjB;AAOE,MAAA,YAAY,EAAG,KAAKC,KAAL,CAAWa,uBAP5B;AAQE,MAAA,GAAG,EAAG,KAAKb,KAAL,CAAWC,QARnB;AASE,MAAA,SAAS,EAAGL,MAAM,CAACkB,OATrB;AAUE,MAAA,OAAO,EAAC,MAVV;AAWE,MAAA,KAAK,EAAG;AACNC,QAAAA,OAAO,EAAEJ;AADH,OAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAiBD;;AA1CuC;;AA6C1Cd,WAAW,CAACmB,SAAZ,GAAwB;AACtBP,EAAAA,QAAQ,EAAEd,SAAS,CAACsB,MADE;AAEtBL,EAAAA,YAAY,EAAEjB,SAAS,CAACuB,IAFF;AAGtBC,EAAAA,OAAO,EAAExB,SAAS,CAACuB,IAHG;AAItBjB,EAAAA,QAAQ,EAAEN,SAAS,CAACyB,MAAV,CAAiBC,UAJL;AAKtBR,EAAAA,uBAAuB,EAAElB,SAAS,CAACuB,IALb;AAMtBV,EAAAA,kBAAkB,EAAEb,SAAS,CAAC2B,IANR;AAOtBC,EAAAA,gBAAgB,EAAE5B,SAAS,CAACsB;AAPN,CAAxB;AAUA,eAAepB,WAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './index.module.css';\n\nclass VideoPlayer extends React.Component {\n\n  // to avoid unnecessary re-renders\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.previewIsDisplayed !== this.props.previewIsDisplayed) {\n      return true;\n    }\n\n    if (nextProps.mediaUrl !== this.props.mediaUrl) {\n      return true;\n    }\n\n    return false;\n  }\n\n  handlePlayMedia = () => {\n    if (this.props.videoRef.current !== null) {\n      return this.props.videoRef.current.paused\n        ? this.props.videoRef.current.play()\n        : this.props.videoRef.current.pause();\n    }\n  };\n  render() {\n    const isDisplayed = this.props.previewIsDisplayed ? 'inline' : 'none';\n\n    return (\n      <video\n        id=\"video\"\n        playsInline\n        src={ this.props.mediaUrl }\n        onTimeUpdate={ this.props.onTimeUpdate }\n        data-testid=\"media-player-id\"\n        onClick={ this.handlePlayMedia }\n        onLoadedData={ this.props.onLoadedDataGetDuration }\n        ref={ this.props.videoRef }\n        className={ styles.videoEl }\n        preload=\"auto\"\n        style={ {\n          display: isDisplayed\n        } }\n      />\n    );\n  }\n}\n\nVideoPlayer.propTypes = {\n  mediaUrl: PropTypes.string,\n  onTimeUpdate: PropTypes.func,\n  onClick: PropTypes.func,\n  videoRef: PropTypes.object.isRequired,\n  onLoadedDataGetDuration: PropTypes.func,\n  previewIsDisplayed: PropTypes.bool,\n  previewViewWidth: PropTypes.string\n};\n\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}