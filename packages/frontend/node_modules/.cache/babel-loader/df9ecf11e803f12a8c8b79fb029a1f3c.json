{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftJsDebugLogging = require(\"./DraftJsDebugLogging\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar getContentEditableContainer = require(\"./getContentEditableContainer\");\n\nvar getDraftEditorSelection = require(\"./getDraftEditorSelection\");\n\nfunction editOnSelect(editor) {\n  if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {\n    if (editor._blockSelectEvents) {\n      var _editorState = editor.props.editorState;\n\n      var selectionState = _editorState.getSelection();\n\n      DraftJsDebugLogging.logBlockedSelectionEvent({\n        // For now I don't think we need any other info\n        anonymizedDom: 'N/A',\n        extraParams: JSON.stringify({\n          stacktrace: new Error().stack\n        }),\n        selectionState: JSON.stringify(selectionState.toJS())\n      });\n    }\n\n    return;\n  }\n\n  var editorState = editor.props.editorState;\n  var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n  var updatedSelectionState = documentSelection.selectionState;\n\n  if (updatedSelectionState !== editorState.getSelection()) {\n    if (documentSelection.needsRecovery) {\n      editorState = EditorState.forceSelection(editorState, updatedSelectionState);\n    } else {\n      editorState = EditorState.acceptSelection(editorState, updatedSelectionState);\n    }\n\n    editor.update(editorState);\n  }\n}\n\nmodule.exports = editOnSelect;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/editOnSelect.js"],"names":["DraftJsDebugLogging","require","EditorState","getContentEditableContainer","getDraftEditorSelection","editOnSelect","editor","_blockSelectEvents","_latestEditorState","props","editorState","_editorState","selectionState","getSelection","logBlockedSelectionEvent","anonymizedDom","extraParams","JSON","stringify","stacktrace","Error","stack","toJS","documentSelection","updatedSelectionState","needsRecovery","forceSelection","acceptSelection","update","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIE,2BAA2B,GAAGF,OAAO,CAAC,+BAAD,CAAzC;;AAEA,IAAIG,uBAAuB,GAAGH,OAAO,CAAC,2BAAD,CAArC;;AAEA,SAASI,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAIA,MAAM,CAACC,kBAAP,IAA6BD,MAAM,CAACE,kBAAP,KAA8BF,MAAM,CAACG,KAAP,CAAaC,WAA5E,EAAyF;AACvF,QAAIJ,MAAM,CAACC,kBAAX,EAA+B;AAC7B,UAAII,YAAY,GAAGL,MAAM,CAACG,KAAP,CAAaC,WAAhC;;AAEA,UAAIE,cAAc,GAAGD,YAAY,CAACE,YAAb,EAArB;;AAEAb,MAAAA,mBAAmB,CAACc,wBAApB,CAA6C;AAC3C;AACAC,QAAAA,aAAa,EAAE,KAF4B;AAG3CC,QAAAA,WAAW,EAAEC,IAAI,CAACC,SAAL,CAAe;AAC1BC,UAAAA,UAAU,EAAE,IAAIC,KAAJ,GAAYC;AADE,SAAf,CAH8B;AAM3CT,QAAAA,cAAc,EAAEK,IAAI,CAACC,SAAL,CAAeN,cAAc,CAACU,IAAf,EAAf;AAN2B,OAA7C;AAQD;;AAED;AACD;;AAED,MAAIZ,WAAW,GAAGJ,MAAM,CAACG,KAAP,CAAaC,WAA/B;AACA,MAAIa,iBAAiB,GAAGnB,uBAAuB,CAACM,WAAD,EAAcP,2BAA2B,CAACG,MAAD,CAAzC,CAA/C;AACA,MAAIkB,qBAAqB,GAAGD,iBAAiB,CAACX,cAA9C;;AAEA,MAAIY,qBAAqB,KAAKd,WAAW,CAACG,YAAZ,EAA9B,EAA0D;AACxD,QAAIU,iBAAiB,CAACE,aAAtB,EAAqC;AACnCf,MAAAA,WAAW,GAAGR,WAAW,CAACwB,cAAZ,CAA2BhB,WAA3B,EAAwCc,qBAAxC,CAAd;AACD,KAFD,MAEO;AACLd,MAAAA,WAAW,GAAGR,WAAW,CAACyB,eAAZ,CAA4BjB,WAA5B,EAAyCc,qBAAzC,CAAd;AACD;;AAEDlB,IAAAA,MAAM,CAACsB,MAAP,CAAclB,WAAd;AACD;AACF;;AAEDmB,MAAM,CAACC,OAAP,GAAiBzB,YAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftJsDebugLogging = require(\"./DraftJsDebugLogging\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar getContentEditableContainer = require(\"./getContentEditableContainer\");\n\nvar getDraftEditorSelection = require(\"./getDraftEditorSelection\");\n\nfunction editOnSelect(editor) {\n  if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {\n    if (editor._blockSelectEvents) {\n      var _editorState = editor.props.editorState;\n\n      var selectionState = _editorState.getSelection();\n\n      DraftJsDebugLogging.logBlockedSelectionEvent({\n        // For now I don't think we need any other info\n        anonymizedDom: 'N/A',\n        extraParams: JSON.stringify({\n          stacktrace: new Error().stack\n        }),\n        selectionState: JSON.stringify(selectionState.toJS())\n      });\n    }\n\n    return;\n  }\n\n  var editorState = editor.props.editorState;\n  var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n  var updatedSelectionState = documentSelection.selectionState;\n\n  if (updatedSelectionState !== editorState.getSelection()) {\n    if (documentSelection.needsRecovery) {\n      editorState = EditorState.forceSelection(editorState, updatedSelectionState);\n    } else {\n      editorState = EditorState.acceptSelection(editorState, updatedSelectionState);\n    }\n\n    editor.update(editorState);\n  }\n}\n\nmodule.exports = editOnSelect;"]},"metadata":{},"sourceType":"script"}