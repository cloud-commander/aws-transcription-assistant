{"ast":null,"code":"import { ConsoleLogger as LoggerClass } from './Logger';\nvar logger = new LoggerClass('Amplify');\n\nvar Amplify =\n/** @class */\nfunction () {\n  function Amplify() {}\n\n  Amplify.register = function (comp) {\n    logger.debug('component registered in amplify', comp);\n\n    this._components.push(comp);\n\n    if (typeof comp.getModuleName === 'function') {\n      Amplify[comp.getModuleName()] = comp;\n    } else {\n      logger.debug('no getModuleName method for component', comp);\n    } // Finally configure this new component(category) loaded\n    // With the new modularization changes in Amplify V3, all the Amplify\n    // component are not loaded/registered right away but when they are\n    // imported (and hence instantiated) in the client's app. This ensures\n    // that all new components imported get correctly configured with the\n    // configuration that Amplify.configure() was called with.\n\n\n    comp.configure(this._config);\n  };\n\n  Amplify.configure = function (config) {\n    var _this = this;\n\n    if (!config) return this._config;\n    this._config = Object.assign(this._config, config);\n    logger.debug('amplify config', this._config);\n\n    this._components.map(function (comp) {\n      comp.configure(_this._config);\n    });\n\n    return this._config;\n  };\n\n  Amplify.addPluggable = function (pluggable) {\n    if (pluggable && pluggable['getCategory'] && typeof pluggable['getCategory'] === 'function') {\n      this._components.map(function (comp) {\n        if (comp['addPluggable'] && typeof comp['addPluggable'] === 'function') {\n          comp.addPluggable(pluggable);\n        }\n      });\n    }\n  };\n\n  Amplify._components = [];\n  Amplify._config = {}; // for backward compatibility to avoid breaking change\n  // if someone is using like Amplify.Auth\n\n  Amplify.Auth = null;\n  Amplify.Analytics = null;\n  Amplify.API = null;\n  Amplify.Storage = null;\n  Amplify.I18n = null;\n  Amplify.Cache = null;\n  Amplify.PubSub = null;\n  Amplify.Interactions = null;\n  Amplify.Pushnotification = null;\n  Amplify.UI = null;\n  Amplify.XR = null;\n  Amplify.Predictions = null;\n  Amplify.DataStore = null;\n  Amplify.Logger = LoggerClass;\n  Amplify.ServiceWorker = null;\n  return Amplify;\n}();\n\nexport { Amplify };\n/**\n * @deprecated use named import\n */\n\nexport default Amplify;","map":{"version":3,"sources":["../src/Amplify.ts"],"names":[],"mappings":"AAAA,SAAS,aAAa,IAAI,WAA1B,QAA6C,UAA7C;AAEA,IAAM,MAAM,GAAG,IAAI,WAAJ,CAAgB,SAAhB,CAAf;;AAEA,IAAA,OAAA;AAAA;AAAA,YAAA;AAAA,WAAA,OAAA,GAAA,CAqEC;;AA9CO,EAAA,OAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAAoB;AACnB,IAAA,MAAM,CAAC,KAAP,CAAa,iCAAb,EAAgD,IAAhD;;AACA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;;AACA,QAAI,OAAO,IAAI,CAAC,aAAZ,KAA8B,UAAlC,EAA8C;AAC7C,MAAA,OAAO,CAAC,IAAI,CAAC,aAAL,EAAD,CAAP,GAAgC,IAAhC;AACA,KAFD,MAEO;AACN,MAAA,MAAM,CAAC,KAAP,CAAa,uCAAb,EAAsD,IAAtD;AACA,KAPkB,CASnB;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAA,IAAI,CAAC,SAAL,CAAe,KAAK,OAApB;AACA,GAhBM;;AAkBA,EAAA,OAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAAuB;AAAvB,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,CAAC,MAAL,EAAa,OAAO,KAAK,OAAZ;AAEb,SAAK,OAAL,GAAe,MAAM,CAAC,MAAP,CAAc,KAAK,OAAnB,EAA4B,MAA5B,CAAf;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,gBAAb,EAA+B,KAAK,OAApC;;AACA,SAAK,WAAL,CAAiB,GAAjB,CAAqB,UAAA,IAAA,EAAI;AACxB,MAAA,IAAI,CAAC,SAAL,CAAe,KAAI,CAAC,OAApB;AACA,KAFD;;AAIA,WAAO,KAAK,OAAZ;AACA,GAVM;;AAYA,EAAA,OAAA,CAAA,YAAA,GAAP,UAAoB,SAApB,EAA6B;AAC5B,QACC,SAAS,IACT,SAAS,CAAC,aAAD,CADT,IAEA,OAAO,SAAS,CAAC,aAAD,CAAhB,KAAoC,UAHrC,EAIE;AACD,WAAK,WAAL,CAAiB,GAAjB,CAAqB,UAAA,IAAA,EAAI;AACxB,YACC,IAAI,CAAC,cAAD,CAAJ,IACA,OAAO,IAAI,CAAC,cAAD,CAAX,KAAgC,UAFjC,EAGE;AACD,UAAA,IAAI,CAAC,YAAL,CAAkB,SAAlB;AACA;AACD,OAPD;AAQA;AACD,GAfM;;AApDQ,EAAA,OAAA,CAAA,WAAA,GAAc,EAAd;AACA,EAAA,OAAA,CAAA,OAAA,GAAU,EAAV,CAFhB,CAIC;AACA;;AACO,EAAA,OAAA,CAAA,IAAA,GAAO,IAAP;AACA,EAAA,OAAA,CAAA,SAAA,GAAY,IAAZ;AACA,EAAA,OAAA,CAAA,GAAA,GAAM,IAAN;AACA,EAAA,OAAA,CAAA,OAAA,GAAU,IAAV;AACA,EAAA,OAAA,CAAA,IAAA,GAAO,IAAP;AACA,EAAA,OAAA,CAAA,KAAA,GAAQ,IAAR;AACA,EAAA,OAAA,CAAA,MAAA,GAAS,IAAT;AACA,EAAA,OAAA,CAAA,YAAA,GAAe,IAAf;AACA,EAAA,OAAA,CAAA,gBAAA,GAAmB,IAAnB;AACA,EAAA,OAAA,CAAA,EAAA,GAAK,IAAL;AACA,EAAA,OAAA,CAAA,EAAA,GAAK,IAAL;AACA,EAAA,OAAA,CAAA,WAAA,GAAc,IAAd;AACA,EAAA,OAAA,CAAA,SAAA,GAAY,IAAZ;AAEA,EAAA,OAAA,CAAA,MAAA,GAAS,WAAT;AACA,EAAA,OAAA,CAAA,aAAA,GAAgB,IAAhB;AAgDR,SAAA,OAAA;AAAC,CArED,EAAA;;SAAa,O;AAuEb;;;;AAGA,eAAe,OAAf","sourceRoot":"","sourcesContent":["import { ConsoleLogger as LoggerClass } from './Logger';\nvar logger = new LoggerClass('Amplify');\nvar Amplify = /** @class */ (function () {\n    function Amplify() {\n    }\n    Amplify.register = function (comp) {\n        logger.debug('component registered in amplify', comp);\n        this._components.push(comp);\n        if (typeof comp.getModuleName === 'function') {\n            Amplify[comp.getModuleName()] = comp;\n        }\n        else {\n            logger.debug('no getModuleName method for component', comp);\n        }\n        // Finally configure this new component(category) loaded\n        // With the new modularization changes in Amplify V3, all the Amplify\n        // component are not loaded/registered right away but when they are\n        // imported (and hence instantiated) in the client's app. This ensures\n        // that all new components imported get correctly configured with the\n        // configuration that Amplify.configure() was called with.\n        comp.configure(this._config);\n    };\n    Amplify.configure = function (config) {\n        var _this = this;\n        if (!config)\n            return this._config;\n        this._config = Object.assign(this._config, config);\n        logger.debug('amplify config', this._config);\n        this._components.map(function (comp) {\n            comp.configure(_this._config);\n        });\n        return this._config;\n    };\n    Amplify.addPluggable = function (pluggable) {\n        if (pluggable &&\n            pluggable['getCategory'] &&\n            typeof pluggable['getCategory'] === 'function') {\n            this._components.map(function (comp) {\n                if (comp['addPluggable'] &&\n                    typeof comp['addPluggable'] === 'function') {\n                    comp.addPluggable(pluggable);\n                }\n            });\n        }\n    };\n    Amplify._components = [];\n    Amplify._config = {};\n    // for backward compatibility to avoid breaking change\n    // if someone is using like Amplify.Auth\n    Amplify.Auth = null;\n    Amplify.Analytics = null;\n    Amplify.API = null;\n    Amplify.Storage = null;\n    Amplify.I18n = null;\n    Amplify.Cache = null;\n    Amplify.PubSub = null;\n    Amplify.Interactions = null;\n    Amplify.Pushnotification = null;\n    Amplify.UI = null;\n    Amplify.XR = null;\n    Amplify.Predictions = null;\n    Amplify.DataStore = null;\n    Amplify.Logger = LoggerClass;\n    Amplify.ServiceWorker = null;\n    return Amplify;\n}());\nexport { Amplify };\n/**\n * @deprecated use named import\n */\nexport default Amplify;\n//# sourceMappingURL=Amplify.js.map"]},"metadata":{},"sourceType":"module"}