{"ast":null,"code":"/**\n *  Convert Speechmatics Json to DraftJs\n *  see `sample` folder for example of input and output as well as `example-usage.js`\n */import generateEntitiesRanges from'../generate-entities-ranges/index.js';/**\n * Determines the speaker of a paragraph by comparing the start time of the paragraph with\n * the speaker times.\n * @param {float} start - Starting point of paragraph\n * @param {array} speakers - list of all speakers with start and end time\n */var getSpeaker=function getSpeaker(start,speakers){for(var speakerIdx in speakers){var speaker=speakers[speakerIdx];var segmentStart=parseFloat(start);if(segmentStart>=speaker.start&segmentStart<speaker.end){return speaker.name;}}return'UNK';};/**\n * groups words list from speechmatics based on speaker change and paragraph length.\n * @param {array} words - array of words objects from speechmatics transcript\n * @param {array} speakers - array of speaker objects from speechmatics transcript\n * @param {int} words - number of words which trigger a paragraph break\n */var groupWordsInParagraphs=function groupWordsInParagraphs(words,speakers,maxParagraphWords){var results=[];var paragraph={words:[],text:[],speaker:''};var oldSpeaker=getSpeaker(words[0].start,speakers);var newSpeaker;var sentenceEnd=false;words.forEach(function(word){newSpeaker=getSpeaker(word.start,speakers);// if speaker changes\nif(newSpeaker!==oldSpeaker||paragraph.words.length>maxParagraphWords&&sentenceEnd){paragraph.speaker=oldSpeaker;results.push(paragraph);oldSpeaker=newSpeaker;// reset paragraph\nparagraph={words:[],text:[]};}paragraph.words.push(word);paragraph.text.push(word.punct);sentenceEnd=/[.?!]/.test(word.punct)?true:false;});paragraph.speaker=oldSpeaker;results.push(paragraph);return results;};/**\n * Speechmatics treats punctuation as own words. This function merges punctuations with\n * the pevious word and adjusts the total duration of the word.\n * @param {array} words - array of words objects from speechmatics transcript\n */var curatePunctuation=function curatePunctuation(words){var curatedWords=[];words.forEach(function(word){if(/[.?!]/.test(word.name)){curatedWords[curatedWords.length-1].name=curatedWords[curatedWords.length-1].name+word.name;curatedWords[curatedWords.length-1].duration=(parseFloat(curatedWords[curatedWords.length-1].duration)+parseFloat(word.duration)).toString();}else{curatedWords.push(word);}});return curatedWords;};var speechmaticsToDraft=function speechmaticsToDraft(speechmaticsJson){var results=[];var tmpWords;tmpWords=curatePunctuation(speechmaticsJson.words);tmpWords=tmpWords.map(function(element,index){return{start:element.time,end:(parseFloat(element.time)+parseFloat(element.duration)).toString(),confidence:element.confidence,word:element.name.toLowerCase().replace(/[.?!]/g,''),punct:element.name,index:index};});var tmpSpeakers;tmpSpeakers=speechmaticsJson.speakers;tmpSpeakers=tmpSpeakers.map(function(element){return{start:parseFloat(element.time),end:parseFloat(element.time)+parseFloat(element.duration),name:element.name};});var wordsByParagraphs=groupWordsInParagraphs(tmpWords,tmpSpeakers,150);wordsByParagraphs.forEach(function(paragraph){var paragraphStart=paragraph.words[0].start;var draftJsContentBlockParagraph={text:paragraph.text.join(' '),type:'paragraph',data:{speaker:paragraph.speaker,words:paragraph.words,start:paragraphStart},// the entities as ranges are each word in the space-joined text,\n// so it needs to be compute for each the offset from the beginning of the paragraph and the length\nentityRanges:generateEntitiesRanges(paragraph.words,'punct')// wordAttributeName\n};results.push(draftJsContentBlockParagraph);});return results;};export default speechmaticsToDraft;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/stt-adapters/speechmatics/index.js"],"names":["generateEntitiesRanges","getSpeaker","start","speakers","speakerIdx","speaker","segmentStart","parseFloat","end","name","groupWordsInParagraphs","words","maxParagraphWords","results","paragraph","text","oldSpeaker","newSpeaker","sentenceEnd","forEach","word","length","push","punct","test","curatePunctuation","curatedWords","duration","toString","speechmaticsToDraft","speechmaticsJson","tmpWords","map","element","index","time","confidence","toLowerCase","replace","tmpSpeakers","wordsByParagraphs","paragraphStart","draftJsContentBlockParagraph","join","type","data","entityRanges"],"mappings":"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","sourcesContent":["/**\n *  Convert Speechmatics Json to DraftJs\n *  see `sample` folder for example of input and output as well as `example-usage.js`\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\n\n/**\n * Determines the speaker of a paragraph by comparing the start time of the paragraph with\n * the speaker times.\n * @param {float} start - Starting point of paragraph\n * @param {array} speakers - list of all speakers with start and end time\n */\nconst getSpeaker = (start, speakers) => {\n  for (var speakerIdx in speakers) {\n    const speaker = speakers[speakerIdx];\n    const segmentStart = parseFloat(start);\n    if (segmentStart >= speaker.start & segmentStart < speaker.end) {\n      return speaker.name;\n    }\n  }\n\n  return 'UNK';\n};\n\n/**\n * groups words list from speechmatics based on speaker change and paragraph length.\n * @param {array} words - array of words objects from speechmatics transcript\n * @param {array} speakers - array of speaker objects from speechmatics transcript\n * @param {int} words - number of words which trigger a paragraph break\n */\nconst groupWordsInParagraphs = (words, speakers, maxParagraphWords) => {\n  const results = [];\n  let paragraph = { words: [], text: [], speaker: '' };\n  let oldSpeaker = getSpeaker(words[0].start, speakers);\n  let newSpeaker;\n  let sentenceEnd = false;\n\n  words.forEach((word) => {\n    newSpeaker = getSpeaker(word.start, speakers);\n    // if speaker changes\n    if (newSpeaker !== oldSpeaker || (paragraph.words.length > maxParagraphWords && sentenceEnd)) {\n      paragraph.speaker = oldSpeaker;\n      results.push(paragraph);\n      oldSpeaker = newSpeaker;\n      // reset paragraph\n      paragraph = { words: [], text: [] };\n    }\n    paragraph.words.push(word);\n    paragraph.text.push(word.punct);\n    sentenceEnd = /[.?!]/.test(word.punct) ? true : false;\n  });\n\n  paragraph.speaker = oldSpeaker;\n  results.push(paragraph);\n\n  return results;\n};\n\n/**\n * Speechmatics treats punctuation as own words. This function merges punctuations with\n * the pevious word and adjusts the total duration of the word.\n * @param {array} words - array of words objects from speechmatics transcript\n */\nconst curatePunctuation = (words) => {\n  const curatedWords = [];\n  words.forEach((word) => {\n    if (/[.?!]/.test(word.name)) {\n      curatedWords[curatedWords.length - 1].name = curatedWords[curatedWords.length - 1].name + word.name;\n      curatedWords[curatedWords.length - 1].duration = (parseFloat(curatedWords[curatedWords.length - 1].duration) + parseFloat(word.duration)).toString();\n    } else {\n      curatedWords.push(word);\n    }\n  }\n  );\n\n  return curatedWords;\n};\n\nconst speechmaticsToDraft = (speechmaticsJson) => {\n  const results = [];\n\n  let tmpWords;\n  tmpWords = curatePunctuation(speechmaticsJson.words);\n  tmpWords = tmpWords.map((element, index) => {\n    return ({\n      start: element.time,\n      end: (parseFloat(element.time) + parseFloat(element.duration)).toString(),\n      confidence: element.confidence,\n      word: element.name.toLowerCase().replace(/[.?!]/g, ''),\n      punct: element.name,\n      index: index,\n    });\n  });\n\n  let tmpSpeakers;\n  tmpSpeakers = speechmaticsJson.speakers;\n  tmpSpeakers = tmpSpeakers.map((element) => {\n    return ({\n      start: parseFloat(element.time),\n      end: (parseFloat(element.time) + parseFloat(element.duration)),\n      name: element.name,\n    });\n  });\n\n  const wordsByParagraphs = groupWordsInParagraphs(tmpWords, tmpSpeakers, 150);\n\n  wordsByParagraphs.forEach((paragraph) => {\n    const paragraphStart = paragraph.words[0].start;\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: paragraph.speaker,\n        words: paragraph.words,\n        start: paragraphStart\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'punct'), // wordAttributeName\n    };\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  return results;\n};\n\nexport default speechmaticsToDraft;\n"]},"metadata":{},"sourceType":"module"}