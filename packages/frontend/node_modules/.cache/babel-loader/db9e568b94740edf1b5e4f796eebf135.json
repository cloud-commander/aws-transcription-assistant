{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List;\nvar DELIMITER = '.';\n/**\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\n * instances to identify sections of a ContentBlock that should be rendered\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\n * be intended to stand out visually, be rendered as anchors, etc.\n *\n * The list of decorators supplied to the constructor will be used in the\n * order they are provided. This allows the caller to specify a priority for\n * string matching, in case of match collisions among decorators.\n *\n * For instance, I may have a link with a `#` in its text. Though this section\n * of text may match our hashtag decorator, it should not be treated as a\n * hashtag. I should therefore list my link DraftDecorator\n * before my hashtag DraftDecorator when constructing this composite\n * decorator instance.\n *\n * Thus, when a collision like this is encountered, the earlier match is\n * preserved and the new match is discarded.\n */\n\nvar CompositeDraftDecorator = /*#__PURE__*/function () {\n  function CompositeDraftDecorator(decorators) {\n    _defineProperty(this, \"_decorators\", void 0); // Copy the decorator array, since we use this array order to determine\n    // precedence of decoration matching. If the array is mutated externally,\n    // we don't want to be affected here.\n\n\n    this._decorators = decorators.slice();\n  }\n\n  var _proto = CompositeDraftDecorator.prototype;\n\n  _proto.getDecorations = function getDecorations(block, contentState) {\n    var decorations = Array(block.getText().length).fill(null);\n\n    this._decorators.forEach(function (\n    /*object*/\n    decorator,\n    /*number*/\n    ii) {\n      var counter = 0;\n      var strategy = decorator.strategy;\n\n      var callback = function callback(\n      /*number*/\n      start,\n      /*number*/\n      end) {\n        // Find out if any of our matching range is already occupied\n        // by another decorator. If so, discard the match. Otherwise, store\n        // the component key for rendering.\n        if (canOccupySlice(decorations, start, end)) {\n          occupySlice(decorations, start, end, ii + DELIMITER + counter);\n          counter++;\n        }\n      };\n\n      strategy(block, callback, contentState);\n    });\n\n    return List(decorations);\n  };\n\n  _proto.getComponentForKey = function getComponentForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].component;\n  };\n\n  _proto.getPropsForKey = function getPropsForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].props;\n  };\n\n  return CompositeDraftDecorator;\n}();\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */\n\n\nfunction canOccupySlice(decorations, start, end) {\n  for (var ii = start; ii < end; ii++) {\n    if (decorations[ii] != null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */\n\n\nfunction occupySlice(targetArr, start, end, componentKey) {\n  for (var ii = start; ii < end; ii++) {\n    targetArr[ii] = componentKey;\n  }\n}\n\nmodule.exports = CompositeDraftDecorator;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/CompositeDraftDecorator.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Immutable","require","List","DELIMITER","CompositeDraftDecorator","decorators","_decorators","slice","_proto","prototype","getDecorations","block","contentState","decorations","Array","getText","length","fill","forEach","decorator","ii","counter","strategy","callback","start","end","canOccupySlice","occupySlice","getComponentForKey","componentKey","parseInt","split","component","getPropsForKey","props","targetArr","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List;\nvar DELIMITER = '.';\n/**\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\n * instances to identify sections of a ContentBlock that should be rendered\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\n * be intended to stand out visually, be rendered as anchors, etc.\n *\n * The list of decorators supplied to the constructor will be used in the\n * order they are provided. This allows the caller to specify a priority for\n * string matching, in case of match collisions among decorators.\n *\n * For instance, I may have a link with a `#` in its text. Though this section\n * of text may match our hashtag decorator, it should not be treated as a\n * hashtag. I should therefore list my link DraftDecorator\n * before my hashtag DraftDecorator when constructing this composite\n * decorator instance.\n *\n * Thus, when a collision like this is encountered, the earlier match is\n * preserved and the new match is discarded.\n */\n\nvar CompositeDraftDecorator = /*#__PURE__*/function () {\n  function CompositeDraftDecorator(decorators) {\n    _defineProperty(this, \"_decorators\", void 0);\n\n    // Copy the decorator array, since we use this array order to determine\n    // precedence of decoration matching. If the array is mutated externally,\n    // we don't want to be affected here.\n    this._decorators = decorators.slice();\n  }\n\n  var _proto = CompositeDraftDecorator.prototype;\n\n  _proto.getDecorations = function getDecorations(block, contentState) {\n    var decorations = Array(block.getText().length).fill(null);\n\n    this._decorators.forEach(function (\n    /*object*/\n    decorator,\n    /*number*/\n    ii) {\n      var counter = 0;\n      var strategy = decorator.strategy;\n\n      var callback = function callback(\n      /*number*/\n      start,\n      /*number*/\n      end) {\n        // Find out if any of our matching range is already occupied\n        // by another decorator. If so, discard the match. Otherwise, store\n        // the component key for rendering.\n        if (canOccupySlice(decorations, start, end)) {\n          occupySlice(decorations, start, end, ii + DELIMITER + counter);\n          counter++;\n        }\n      };\n\n      strategy(block, callback, contentState);\n    });\n\n    return List(decorations);\n  };\n\n  _proto.getComponentForKey = function getComponentForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].component;\n  };\n\n  _proto.getPropsForKey = function getPropsForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].props;\n  };\n\n  return CompositeDraftDecorator;\n}();\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */\n\n\nfunction canOccupySlice(decorations, start, end) {\n  for (var ii = start; ii < end; ii++) {\n    if (decorations[ii] != null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */\n\n\nfunction occupySlice(targetArr, start, end, componentKey) {\n  for (var ii = start; ii < end; ii++) {\n    targetArr[ii] = componentKey;\n  }\n}\n\nmodule.exports = CompositeDraftDecorator;"]},"metadata":{},"sourceType":"script"}