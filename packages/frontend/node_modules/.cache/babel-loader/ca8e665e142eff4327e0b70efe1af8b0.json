{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftRemovableWord = require(\"./DraftRemovableWord\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar moveSelectionForward = require(\"./moveSelectionForward\");\n\nvar removeTextWithStrategy = require(\"./removeTextWithStrategy\");\n/**\n * Delete the word that is right of the cursor, as well as any spaces or\n * punctuation before the word.\n */\n\n\nfunction keyCommandDeleteWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(offset);\n    var toRemove = DraftRemovableWord.getForward(text); // If there are no words in front of the cursor, remove the newline.\n\n    return moveSelectionForward(strategyState, toRemove.length || 1);\n  }, 'forward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandDeleteWord;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/node_modules/draft-js/lib/keyCommandDeleteWord.js"],"names":["DraftRemovableWord","require","EditorState","moveSelectionForward","removeTextWithStrategy","keyCommandDeleteWord","editorState","afterRemoval","strategyState","selection","getSelection","offset","getStartOffset","key","getStartKey","content","getCurrentContent","text","getBlockForKey","getText","slice","toRemove","getForward","length","push","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,0BAAD,CAApC;AACA;;;;;;AAMA,SAASI,oBAAT,CAA8BC,WAA9B,EAA2C;AACzC,MAAIC,YAAY,GAAGH,sBAAsB,CAACE,WAAD,EAAc,UAAUE,aAAV,EAAyB;AAC9E,QAAIC,SAAS,GAAGD,aAAa,CAACE,YAAd,EAAhB;AACA,QAAIC,MAAM,GAAGF,SAAS,CAACG,cAAV,EAAb;AACA,QAAIC,GAAG,GAAGJ,SAAS,CAACK,WAAV,EAAV;AACA,QAAIC,OAAO,GAAGP,aAAa,CAACQ,iBAAd,EAAd;AACA,QAAIC,IAAI,GAAGF,OAAO,CAACG,cAAR,CAAuBL,GAAvB,EAA4BM,OAA5B,GAAsCC,KAAtC,CAA4CT,MAA5C,CAAX;AACA,QAAIU,QAAQ,GAAGrB,kBAAkB,CAACsB,UAAnB,CAA8BL,IAA9B,CAAf,CAN8E,CAM1B;;AAEpD,WAAOd,oBAAoB,CAACK,aAAD,EAAgBa,QAAQ,CAACE,MAAT,IAAmB,CAAnC,CAA3B;AACD,GATwC,EAStC,SATsC,CAAzC;;AAWA,MAAIhB,YAAY,KAAKD,WAAW,CAACU,iBAAZ,EAArB,EAAsD;AACpD,WAAOV,WAAP;AACD;;AAED,SAAOJ,WAAW,CAACsB,IAAZ,CAAiBlB,WAAjB,EAA8BC,YAA9B,EAA4C,cAA5C,CAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBrB,oBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftRemovableWord = require(\"./DraftRemovableWord\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar moveSelectionForward = require(\"./moveSelectionForward\");\n\nvar removeTextWithStrategy = require(\"./removeTextWithStrategy\");\n/**\n * Delete the word that is right of the cursor, as well as any spaces or\n * punctuation before the word.\n */\n\n\nfunction keyCommandDeleteWord(editorState) {\n  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {\n    var selection = strategyState.getSelection();\n    var offset = selection.getStartOffset();\n    var key = selection.getStartKey();\n    var content = strategyState.getCurrentContent();\n    var text = content.getBlockForKey(key).getText().slice(offset);\n    var toRemove = DraftRemovableWord.getForward(text); // If there are no words in front of the cursor, remove the newline.\n\n    return moveSelectionForward(strategyState, toRemove.length || 1);\n  }, 'forward');\n\n  if (afterRemoval === editorState.getCurrentContent()) {\n    return editorState;\n  }\n\n  return EditorState.push(editorState, afterRemoval, 'remove-range');\n}\n\nmodule.exports = keyCommandDeleteWord;"]},"metadata":{},"sourceType":"script"}