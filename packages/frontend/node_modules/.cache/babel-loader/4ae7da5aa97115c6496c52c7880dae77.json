{"ast":null,"code":"/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar FIVE_MINUTES_IN_MS = 1000 * 60 * 5;\nexport var DateUtils = {\n  /**\n   * Milliseconds to offset the date to compensate for clock skew between device & services\n   */\n  clockOffset: 0,\n  getDateWithClockOffset: function getDateWithClockOffset() {\n    if (DateUtils.clockOffset) {\n      return new Date(new Date().getTime() + DateUtils.clockOffset);\n    } else {\n      return new Date();\n    }\n  },\n\n  /**\n   * @returns {number} Clock offset in milliseconds\n   */\n  getClockOffset: function getClockOffset() {\n    return DateUtils.clockOffset;\n  },\n  getHeaderStringFromDate: function getHeaderStringFromDate(date) {\n    if (date === void 0) {\n      date = DateUtils.getDateWithClockOffset();\n    }\n\n    return date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n  },\n  getDateFromHeaderString: function getDateFromHeaderString(header) {\n    var _a = __read(header.match(/^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2}).+/), 7),\n        year = _a[1],\n        month = _a[2],\n        day = _a[3],\n        hour = _a[4],\n        minute = _a[5],\n        second = _a[6];\n\n    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));\n  },\n  isClockSkewed: function isClockSkewed(serverDate) {\n    // API gateway permits client calls that are off by no more than ±5 minutes\n    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;\n  },\n  isClockSkewError: function isClockSkewError(error) {\n    if (!error.response || !error.response.headers) {\n      return false;\n    }\n\n    var headers = error.response.headers;\n    return Boolean(headers['x-amzn-errortype'] === 'BadRequestException' && (headers.date || headers.Date));\n  },\n\n  /**\n   * @param {number} offset Clock offset in milliseconds\n   */\n  setClockOffset: function setClockOffset(offset) {\n    DateUtils.clockOffset = offset;\n  }\n};","map":{"version":3,"sources":["../../src/Util/DateUtils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAM,kBAAkB,GAAG,OAAO,EAAP,GAAY,CAAvC;AAEA,OAAO,IAAM,SAAS,GAAG;AACxB;;;AAGA,EAAA,WAAW,EAAE,CAJW;AAMxB,EAAA,sBAAsB,EAAA,kCAAA;AACrB,QAAI,SAAS,CAAC,WAAd,EAA2B;AAC1B,aAAO,IAAI,IAAJ,CAAS,IAAI,IAAJ,GAAW,OAAX,KAAuB,SAAS,CAAC,WAA1C,CAAP;AACA,KAFD,MAEO;AACN,aAAO,IAAI,IAAJ,EAAP;AACA;AACD,GAZuB;;AAcxB;;;AAGA,EAAA,cAAc,EAAA,0BAAA;AACb,WAAO,SAAS,CAAC,WAAjB;AACA,GAnBuB;AAqBxB,EAAA,uBAAuB,EAAvB,iCAAwB,IAAxB,EAAuE;AAA/C,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAa,SAAS,CAAC,sBAAV,EAAb;AAA+C;;AACtE,WAAO,IAAI,CAAC,WAAL,GAAmB,OAAnB,CAA2B,gBAA3B,EAA6C,EAA7C,CAAP;AACA,GAvBuB;AAyBxB,EAAA,uBAAuB,EAAvB,iCAAwB,MAAxB,EAAsC;AAC/B,QAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,gDAAA,CAAA,EAAA,CAAA,CAAA;AAAA,QAAG,IAAA,GAAA,EAAA,CAAA,CAAA,CAAH;AAAA,QAAS,KAAA,GAAA,EAAA,CAAA,CAAA,CAAT;AAAA,QAAgB,GAAA,GAAA,EAAA,CAAA,CAAA,CAAhB;AAAA,QAAqB,IAAA,GAAA,EAAA,CAAA,CAAA,CAArB;AAAA,QAA2B,MAAA,GAAA,EAAA,CAAA,CAAA,CAA3B;AAAA,QAAmC,MAAA,GAAA,EAAA,CAAA,CAAA,CAAnC;;AAIN,WAAO,IAAI,IAAJ,CACN,IAAI,CAAC,GAAL,CACC,MAAM,CAAC,IAAD,CADP,EAEC,MAAM,CAAC,KAAD,CAAN,GAAgB,CAFjB,EAGC,MAAM,CAAC,GAAD,CAHP,EAIC,MAAM,CAAC,IAAD,CAJP,EAKC,MAAM,CAAC,MAAD,CALP,EAMC,MAAM,CAAC,MAAD,CANP,CADM,CAAP;AAUA,GAxCuB;AA0CxB,EAAA,aAAa,EAAb,uBAAc,UAAd,EAA8B;AAC7B;AACA,WACC,IAAI,CAAC,GAAL,CACC,UAAU,CAAC,OAAX,KAAuB,SAAS,CAAC,sBAAV,GAAmC,OAAnC,EADxB,KAEK,kBAHN;AAKA,GAjDuB;AAmDxB,EAAA,gBAAgB,EAAhB,0BAAiB,KAAjB,EAA2B;AAC1B,QAAI,CAAC,KAAK,CAAC,QAAP,IAAmB,CAAC,KAAK,CAAC,QAAN,CAAe,OAAvC,EAAgD;AAC/C,aAAO,KAAP;AACA;;AAEO,QAAA,OAAA,GAAA,KAAA,CAAA,QAAA,CAAA,OAAA;AAER,WAAO,OAAO,CACb,OAAO,CAAC,kBAAD,CAAP,KAAgC,qBAAhC,KACE,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,IAD1B,CADa,CAAd;AAIA,GA9DuB;;AAgExB;;;AAGA,EAAA,cAAc,EAAd,wBAAe,MAAf,EAA6B;AAC5B,IAAA,SAAS,CAAC,WAAV,GAAwB,MAAxB;AACA;AArEuB,CAAlB","sourceRoot":"","sourcesContent":["/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar FIVE_MINUTES_IN_MS = 1000 * 60 * 5;\nexport var DateUtils = {\n    /**\n     * Milliseconds to offset the date to compensate for clock skew between device & services\n     */\n    clockOffset: 0,\n    getDateWithClockOffset: function () {\n        if (DateUtils.clockOffset) {\n            return new Date(new Date().getTime() + DateUtils.clockOffset);\n        }\n        else {\n            return new Date();\n        }\n    },\n    /**\n     * @returns {number} Clock offset in milliseconds\n     */\n    getClockOffset: function () {\n        return DateUtils.clockOffset;\n    },\n    getHeaderStringFromDate: function (date) {\n        if (date === void 0) { date = DateUtils.getDateWithClockOffset(); }\n        return date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    },\n    getDateFromHeaderString: function (header) {\n        var _a = __read(header.match(/^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2}).+/), 7), year = _a[1], month = _a[2], day = _a[3], hour = _a[4], minute = _a[5], second = _a[6];\n        return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));\n    },\n    isClockSkewed: function (serverDate) {\n        // API gateway permits client calls that are off by no more than ±5 minutes\n        return (Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS);\n    },\n    isClockSkewError: function (error) {\n        if (!error.response || !error.response.headers) {\n            return false;\n        }\n        var headers = error.response.headers;\n        return Boolean(headers['x-amzn-errortype'] === 'BadRequestException' &&\n            (headers.date || headers.Date));\n    },\n    /**\n     * @param {number} offset Clock offset in milliseconds\n     */\n    setClockOffset: function (offset) {\n        DateUtils.clockOffset = offset;\n    },\n};\n//# sourceMappingURL=DateUtils.js.map"]},"metadata":{},"sourceType":"module"}