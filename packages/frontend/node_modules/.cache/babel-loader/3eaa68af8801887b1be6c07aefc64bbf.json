{"ast":null,"code":"/**\n * Helperf unction\n * @param {*} tc\n * @param {*} fps\n */var timecodeToFrames=function timecodeToFrames(tc,fps){// TODO make 29.97 fps drop-frame aware - works for 25 only.\nvar s=tc.split(':');var frames=parseInt(s[3]);frames+=parseInt(s[2])*fps;frames+=parseInt(s[1])*(fps*60);frames+=parseInt(s[0])*(fps*60*60);return frames;};/**\n * Convert broadcast timecodes to seconds\n * @param {*} tc - `hh:mm:ss:ff`\n * @param {*} framePerSeconds - defaults to 25 if not provided\n */var timecodeToSecondsHelper=function timecodeToSecondsHelper(tc,framePerSeconds){var fps=25;if(framePerSeconds!==undefined){fps=framePerSeconds;}var frames=timecodeToFrames(tc,fps);return Number(Number(frames/fps).toFixed(2));};export default timecodeToSecondsHelper;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/util/timecode-converter/src/timecodeToSeconds.js"],"names":["timecodeToFrames","tc","fps","s","split","frames","parseInt","timecodeToSecondsHelper","framePerSeconds","undefined","Number","toFixed"],"mappings":"AAAA;;;;GAKA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAUC,EAAV,CAAcC,GAAd,CAAmB,CAC1C;AAEA,GAAMC,CAAAA,CAAC,CAAGF,EAAE,CAACG,KAAH,CAAS,GAAT,CAAV,CACA,GAAIC,CAAAA,MAAM,CAAGC,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CAArB,CACAE,MAAM,EAAIC,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CAAR,CAAiBD,GAA3B,CACAG,MAAM,EAAIC,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CAAR,EAAkBD,GAAG,CAAG,EAAxB,CAAV,CACAG,MAAM,EAAIC,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CAAR,EAAkBD,GAAG,CAAG,EAAN,CAAW,EAA7B,CAAV,CAEA,MAAOG,CAAAA,MAAP,CACD,CAVD,CAYA;;;;GAKA,GAAME,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAUN,EAAV,CAAcO,eAAd,CAA+B,CAC7D,GAAIN,CAAAA,GAAG,CAAG,EAAV,CACA,GAAIM,eAAe,GAAKC,SAAxB,CAAmC,CACjCP,GAAG,CAAGM,eAAN,CACD,CACD,GAAMH,CAAAA,MAAM,CAAGL,gBAAgB,CAACC,EAAD,CAAKC,GAAL,CAA/B,CAEA,MAAOQ,CAAAA,MAAM,CAACA,MAAM,CAACL,MAAM,CAAGH,GAAV,CAAN,CAAqBS,OAArB,CAA6B,CAA7B,CAAD,CAAb,CACD,CARD,CAUA,cAAeJ,CAAAA,uBAAf","sourcesContent":["/**\n * Helperf unction\n * @param {*} tc\n * @param {*} fps\n */\nconst timecodeToFrames = function (tc, fps) {\n  // TODO make 29.97 fps drop-frame aware - works for 25 only.\n\n  const s = tc.split(':');\n  let frames = parseInt(s[3]);\n  frames += parseInt(s[2]) * fps;\n  frames += parseInt(s[1]) * (fps * 60);\n  frames += parseInt(s[0]) * (fps * 60 * 60);\n\n  return frames;\n};\n\n/**\n * Convert broadcast timecodes to seconds\n * @param {*} tc - `hh:mm:ss:ff`\n * @param {*} framePerSeconds - defaults to 25 if not provided\n */\nconst timecodeToSecondsHelper = function (tc, framePerSeconds) {\n  let fps = 25;\n  if (framePerSeconds !== undefined) {\n    fps = framePerSeconds;\n  }\n  const frames = timecodeToFrames(tc, fps);\n\n  return Number(Number(frames / fps).toFixed(2));\n};\n\nexport default timecodeToSecondsHelper;\n"]},"metadata":{},"sourceType":"module"}