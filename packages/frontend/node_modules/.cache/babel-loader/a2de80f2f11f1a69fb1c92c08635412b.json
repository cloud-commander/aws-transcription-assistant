{"ast":null,"code":"'use strict';\n\nvar help = require('./help');\n\nmodule.exports = evaluateLinear;\n/**\n * Evaluates interpolating line/lines at the set of numbers\n * or at a single number for the function y=f(x)\n *\n * @param {Number|Array} pointsToEvaluate     number or set of numbers\n *                                            for which polynomial is calculated\n * @param {Array} functionValuesX             set of distinct x values\n * @param {Array} functionValuesY             set of distinct y=f(x) values\n * @returns {Array}\n */\n\nfunction evaluateLinear(pointsToEvaluate, functionValuesX, functionValuesY) {\n  var results = [];\n  pointsToEvaluate = help.makeItArrayIfItsNot(pointsToEvaluate);\n  pointsToEvaluate.forEach(function (point) {\n    var index = help.findIntervalLeftBorderIndex(point, functionValuesX);\n    if (index == functionValuesX.length - 1) index--;\n    results.push(linearInterpolation(point, functionValuesX[index], functionValuesY[index], functionValuesX[index + 1], functionValuesY[index + 1]));\n  });\n  return results;\n}\n/**\n *\n * Evaluates y-value at given x point for line that passes\n * through the points (x0,y0) and (y1,y1)\n *\n * @param x\n * @param x0\n * @param y0\n * @param x1\n * @param y1\n * @returns {Number}\n */\n\n\nfunction linearInterpolation(x, x0, y0, x1, y1) {\n  var a = (y1 - y0) / (x1 - x0);\n  var b = -a * x0 + y0;\n  return a * x + b;\n}","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/node_modules/everpolate/lib/linear.js"],"names":["help","require","module","exports","evaluateLinear","pointsToEvaluate","functionValuesX","functionValuesY","results","makeItArrayIfItsNot","forEach","point","index","findIntervalLeftBorderIndex","length","push","linearInterpolation","x","x0","y0","x1","y1","a","b"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,cAAjB;AAEA;;;;;;;;;;;AAWA,SAASA,cAAT,CAAyBC,gBAAzB,EAA2CC,eAA3C,EAA4DC,eAA5D,EAA6E;AAC3E,MAAIC,OAAO,GAAG,EAAd;AACAH,EAAAA,gBAAgB,GAAGL,IAAI,CAACS,mBAAL,CAAyBJ,gBAAzB,CAAnB;AACAA,EAAAA,gBAAgB,CAACK,OAAjB,CAAyB,UAAUC,KAAV,EAAiB;AACxC,QAAIC,KAAK,GAAGZ,IAAI,CAACa,2BAAL,CAAiCF,KAAjC,EAAwCL,eAAxC,CAAZ;AACA,QAAIM,KAAK,IAAIN,eAAe,CAACQ,MAAhB,GAAyB,CAAtC,EACEF,KAAK;AACPJ,IAAAA,OAAO,CAACO,IAAR,CAAaC,mBAAmB,CAACL,KAAD,EAAQL,eAAe,CAACM,KAAD,CAAvB,EAAgCL,eAAe,CAACK,KAAD,CAA/C,EAC5BN,eAAe,CAACM,KAAK,GAAG,CAAT,CADa,EACAL,eAAe,CAACK,KAAK,GAAG,CAAT,CADf,CAAhC;AAED,GAND;AAOA,SAAOJ,OAAP;AACD;AAED;;;;;;;;;;;;;;AAaA,SAASQ,mBAAT,CAA8BC,CAA9B,EAAiCC,EAAjC,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CC,EAA7C,EAAiD;AAC/C,MAAIC,CAAC,GAAG,CAACD,EAAE,GAAGF,EAAN,KAAaC,EAAE,GAAGF,EAAlB,CAAR;AACA,MAAIK,CAAC,GAAG,CAACD,CAAD,GAAKJ,EAAL,GAAUC,EAAlB;AACA,SAAOG,CAAC,GAAGL,CAAJ,GAAQM,CAAf;AACD","sourcesContent":["'use strict';\n\nvar help = require('./help')\n\nmodule.exports = evaluateLinear\n\n/**\n * Evaluates interpolating line/lines at the set of numbers\n * or at a single number for the function y=f(x)\n *\n * @param {Number|Array} pointsToEvaluate     number or set of numbers\n *                                            for which polynomial is calculated\n * @param {Array} functionValuesX             set of distinct x values\n * @param {Array} functionValuesY             set of distinct y=f(x) values\n * @returns {Array}\n */\n\nfunction evaluateLinear (pointsToEvaluate, functionValuesX, functionValuesY) {\n  var results = []\n  pointsToEvaluate = help.makeItArrayIfItsNot(pointsToEvaluate)\n  pointsToEvaluate.forEach(function (point) {\n    var index = help.findIntervalLeftBorderIndex(point, functionValuesX)\n    if (index == functionValuesX.length - 1)\n      index--\n    results.push(linearInterpolation(point, functionValuesX[index], functionValuesY[index]\n      , functionValuesX[index + 1], functionValuesY[index + 1]))\n  })\n  return results\n}\n\n/**\n *\n * Evaluates y-value at given x point for line that passes\n * through the points (x0,y0) and (y1,y1)\n *\n * @param x\n * @param x0\n * @param y0\n * @param x1\n * @param y1\n * @returns {Number}\n */\n\nfunction linearInterpolation (x, x0, y0, x1, y1) {\n  var a = (y1 - y0) / (x1 - x0)\n  var b = -a * x0 + y0\n  return a * x + b\n}\n"]},"metadata":{},"sourceType":"script"}