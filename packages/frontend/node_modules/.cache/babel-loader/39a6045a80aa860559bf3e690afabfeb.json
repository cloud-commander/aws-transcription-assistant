{"ast":null,"code":"import _classCallCheck from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";//import PropTypes from \"prop-types\";\nimport{Editor}from\"draft-js\";import WrapperBlock from'./WrapperBlock';// NOTE: custom editor is in a separate class to minimise re-renders\n// if considering refactoring, removing the separate class, please double check\n// that doing so does not introduce uncessary re-renders first.\nvar CustomEditor=/*#__PURE__*/function(_React$Component){_inherits(CustomEditor,_React$Component);var _super=_createSuper(CustomEditor);function CustomEditor(){var _this;_classCallCheck(this,CustomEditor);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.handleWordClick=function(e){_this.props.onWordClick(e);};_this.renderBlockWithTimecodes=function(){return{component:WrapperBlock,editable:true,props:{showSpeakers:_this.props.showSpeakers,showTimecodes:_this.props.showTimecodes,timecodeOffset:_this.props.timecodeOffset,editorState:_this.props.editorState,setEditorNewContentStateSpeakersUpdate:_this.props.setEditorNewContentStateSpeakersUpdate,onWordClick:_this.handleWordClick,handleAnalyticsEvents:_this.props.handleAnalyticsEvents,isEditable:_this.props.isEditable}};};_this.handleOnChange=function(e){_this.props.onChange(e);};return _this;}_createClass(CustomEditor,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps){// https://stackoverflow.com/questions/39182657/best-performance-method-to-check-if-contentstate-changed-in-draftjs-or-just-edi\nif(nextProps.editorState!==this.props.editorState){return true;}if(nextProps.isEditable!==this.props.isEditable){return true;}return false;}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(Editor,{editorState:this.props.editorState,onChange:this.handleOnChange,stripPastedStyles:true,blockRendererFn:this.renderBlockWithTimecodes,handleKeyCommand:this.props.handleKeyCommand,keyBindingFn:this.props.customKeyBindingFn,spellCheck:this.props.spellCheck});}}]);return CustomEditor;}(React.Component);export default CustomEditor;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/timed-text-editor/CustomEditor.js"],"names":["React","Editor","WrapperBlock","CustomEditor","handleWordClick","e","props","onWordClick","renderBlockWithTimecodes","component","editable","showSpeakers","showTimecodes","timecodeOffset","editorState","setEditorNewContentStateSpeakersUpdate","handleAnalyticsEvents","isEditable","handleOnChange","onChange","nextProps","handleKeyCommand","customKeyBindingFn","spellCheck","Component"],"mappings":"4tBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA;AACA,OAASC,MAAT,KAAuB,UAAvB,CAGA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CAEA;AACA;AACA;GACMC,CAAAA,Y,+VACJC,e,CAAkB,SAAAC,CAAC,CAAI,CACrB,MAAKC,KAAL,CAAWC,WAAX,CAAuBF,CAAvB,EACD,C,OAEDG,wB,CAA2B,UAAM,CAC/B,MAAO,CACLC,SAAS,CAAEP,YADN,CAELQ,QAAQ,CAAE,IAFL,CAGLJ,KAAK,CAAE,CACLK,YAAY,CAAE,MAAKL,KAAL,CAAWK,YADpB,CAELC,aAAa,CAAE,MAAKN,KAAL,CAAWM,aAFrB,CAGLC,cAAc,CAAE,MAAKP,KAAL,CAAWO,cAHtB,CAILC,WAAW,CAAE,MAAKR,KAAL,CAAWQ,WAJnB,CAKLC,sCAAsC,CAAE,MAAKT,KAAL,CAAWS,sCAL9C,CAMLR,WAAW,CAAE,MAAKH,eANb,CAOLY,qBAAqB,CAAE,MAAKV,KAAL,CAAWU,qBAP7B,CAQLC,UAAU,CAAE,MAAKX,KAAL,CAAWW,UARlB,CAHF,CAAP,CAcD,C,OAeDC,c,CAAiB,SAAAb,CAAC,CAAI,CACpB,MAAKC,KAAL,CAAWa,QAAX,CAAoBd,CAApB,EACD,C,4GAfqBe,S,CAAW,CAC/B;AACA,GAAIA,SAAS,CAACN,WAAV,GAA0B,KAAKR,KAAL,CAAWQ,WAAzC,CAAsD,CACpD,MAAO,KAAP,CACD,CAED,GAAIM,SAAS,CAACH,UAAV,GAAyB,KAAKX,KAAL,CAAWW,UAAxC,CAAoD,CAClD,MAAO,KAAP,CACD,CAED,MAAO,MAAP,CACD,C,uCAMQ,CACP,mBACE,oBAAC,MAAD,EACE,WAAW,CAAE,KAAKX,KAAL,CAAWQ,WAD1B,CAEE,QAAQ,CAAE,KAAKI,cAFjB,CAGE,iBAAiB,KAHnB,CAIE,eAAe,CAAE,KAAKV,wBAJxB,CAKE,gBAAgB,CAAE,KAAKF,KAAL,CAAWe,gBAL/B,CAME,YAAY,CAAE,KAAKf,KAAL,CAAWgB,kBAN3B,CAOE,UAAU,CAAE,KAAKhB,KAAL,CAAWiB,UAPzB,EADF,CAWD,C,0BAnDwBvB,KAAK,CAACwB,S,EAsDjC,cAAerB,CAAAA,YAAf","sourcesContent":["import React from \"react\";\n//import PropTypes from \"prop-types\";\nimport { Editor } from \"draft-js\";\n\n\nimport WrapperBlock from './WrapperBlock';\n\n// NOTE: custom editor is in a separate class to minimise re-renders\n// if considering refactoring, removing the separate class, please double check\n// that doing so does not introduce uncessary re-renders first.\nclass CustomEditor extends React.Component {\n  handleWordClick = e => {\n    this.props.onWordClick(e);\n  };\n\n  renderBlockWithTimecodes = () => {\n    return {\n      component: WrapperBlock,\n      editable: true,\n      props: {\n        showSpeakers: this.props.showSpeakers,\n        showTimecodes: this.props.showTimecodes,\n        timecodeOffset: this.props.timecodeOffset,\n        editorState: this.props.editorState,\n        setEditorNewContentStateSpeakersUpdate: this.props.setEditorNewContentStateSpeakersUpdate,\n        onWordClick: this.handleWordClick,\n        handleAnalyticsEvents: this.props.handleAnalyticsEvents,\n        isEditable: this.props.isEditable\n      }\n    };\n  };\n\n  shouldComponentUpdate(nextProps) {\n    // https://stackoverflow.com/questions/39182657/best-performance-method-to-check-if-contentstate-changed-in-draftjs-or-just-edi\n    if (nextProps.editorState !== this.props.editorState) {\n      return true;\n    }\n\n    if (nextProps.isEditable !== this.props.isEditable) {\n      return true;\n    }\n\n    return false;\n  }\n\n  handleOnChange = e => {\n    this.props.onChange(e);\n  };\n\n  render() {\n    return (\n      <Editor\n        editorState={this.props.editorState}\n        onChange={this.handleOnChange}\n        stripPastedStyles\n        blockRendererFn={this.renderBlockWithTimecodes}\n        handleKeyCommand={this.props.handleKeyCommand}\n        keyBindingFn={this.props.customKeyBindingFn}\n        spellCheck={this.props.spellCheck}\n      />\n    );\n  }\n}\n\nexport default CustomEditor;\n"]},"metadata":{},"sourceType":"module"}