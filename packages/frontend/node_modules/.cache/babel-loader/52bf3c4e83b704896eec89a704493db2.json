{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.S3RequestPresigner = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar signature_v4_1 = require(\"@aws-sdk/signature-v4\");\n\nvar constants_1 = require(\"./constants\");\n\nvar S3RequestPresigner =\n/** @class */\nfunction () {\n  function S3RequestPresigner(options) {\n    var resolvedOptions = tslib_1.__assign({\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false\n    }, options);\n\n    this.signer = new signature_v4_1.SignatureV4(resolvedOptions);\n  }\n\n  S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var _b = _a.unsignableHeaders,\n        unsignableHeaders = _b === void 0 ? new Set() : _b,\n        options = tslib_1.__rest(_a, [\"unsignableHeaders\"]);\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_c) {\n        unsignableHeaders.add(\"content-type\");\n        requestToSign.headers[constants_1.SHA256_HEADER] = constants_1.UNSIGNED_PAYLOAD;\n        return [2\n        /*return*/\n        , this.signer.presign(requestToSign, tslib_1.__assign({\n          expiresIn: 900,\n          unsignableHeaders: unsignableHeaders\n        }, options))];\n      });\n    });\n  };\n\n  return S3RequestPresigner;\n}();\n\nexports.S3RequestPresigner = S3RequestPresigner;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,cAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAIA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAcA,IAAA,kBAAA;AAAA;AAAA,YAAA;AAEE,WAAA,kBAAA,CAAY,OAAZ,EAA8C;AAC5C,QAAM,eAAe,GAAA,OAAA,CAAA,QAAA,CAAA;AACnB;AACA;AACA,MAAA,OAAO,EAAE,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,OAA/B,IAA0C,IAHhC;AAInB,MAAA,aAAa,EAAE,OAAO,CAAC,aAAR,IAAyB;AAJrB,KAAA,EAKhB,OALgB,CAArB;;AAOA,SAAK,MAAL,GAAc,IAAI,cAAA,CAAA,WAAJ,CAAgB,eAAhB,CAAd;AACD;;AAEY,EAAA,kBAAA,CAAA,SAAA,CAAA,OAAA,GAAb,UACE,aADF,EAEE,EAFF,EAEgF;AAA9E,QAAA,EAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,EAAA,GAAA,EAAA;AAA8E;;AAA5E,QAAA,EAAA,GAAA,EAAA,CAAA,iBAAA;AAAA,QAAA,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAJ,EAAH,GAAY,EAA7B;AAAA,QAAkC,OAAO,GAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAA3C,CAAA,mBAAA,CAA2C,CAAzC;;;;AAEF,QAAA,iBAAiB,CAAC,GAAlB,CAAsB,cAAtB;AACA,QAAA,aAAa,CAAC,OAAd,CAAsB,WAAA,CAAA,aAAtB,IAAuC,WAAA,CAAA,gBAAvC;AACA,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,MAAL,CAAY,OAAZ,CAAoB,aAApB,EAAiC,OAAA,CAAA,QAAA,CAAA;AACtC,UAAA,SAAS,EAAE,GAD2B;AAEtC,UAAA,iBAAiB,EAAA;AAFqB,SAAA,EAGnC,OAHmC,CAAjC,CAAP,CAAA;;;AAKD,GAXY;;AAYf,SAAA,kBAAA;AAAC,CAzBD,EAAA;;AAAa,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["import { SignatureV4, SignatureV4CryptoInit, SignatureV4Init } from \"@aws-sdk/signature-v4\";\nimport { RequestPresigner, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { HttpRequest as IHttpRequest } from \"@aws-sdk/types\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * PartialBy<T, K> makes properties specified in K optional in interface T\n * see: https://stackoverflow.com/questions/43159887/make-a-single-property-optional-in-typescript\n * */\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type S3RequestPresignerOptions = PartialBy<\n  SignatureV4Init & SignatureV4CryptoInit,\n  \"service\" | \"uriEscapePath\"\n> & { signingName?: string };\n\nexport class S3RequestPresigner implements RequestPresigner {\n  private readonly signer: SignatureV4;\n  constructor(options: S3RequestPresignerOptions) {\n    const resolvedOptions = {\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false,\n      ...options,\n    };\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  public async presign(\n    requestToSign: IHttpRequest,\n    { unsignableHeaders = new Set(), ...options }: RequestPresigningArguments = {}\n  ): Promise<IHttpRequest> {\n    unsignableHeaders.add(\"content-type\");\n    requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n    return this.signer.presign(requestToSign, {\n      expiresIn: 900,\n      unsignableHeaders,\n      ...options,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}