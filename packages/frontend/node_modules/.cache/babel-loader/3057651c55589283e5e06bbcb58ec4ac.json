{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FetchHttpHandler = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\n\nvar querystring_builder_1 = require(\"@aws-sdk/querystring-builder\");\n\nvar request_timeout_1 = require(\"./request-timeout\");\n\nvar FetchHttpHandler =\n/** @class */\nfunction () {\n  function FetchHttpHandler(httpOptions) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n\n    this.httpOptions = httpOptions;\n  }\n\n  FetchHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n\n  FetchHttpHandler.prototype.handle = function (request, options) {\n    var abortSignal = options === null || options === void 0 ? void 0 : options.abortSignal;\n    var requestTimeoutInMs = this.httpOptions.requestTimeout; // if the request was already aborted, prevent doing extra work\n\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      var abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = querystring_builder_1.buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : \"\") + path;\n    var requestOptions = {\n      body: request.body,\n      headers: new Headers(request.headers),\n      method: request.method\n    }; // some browsers support abort signal\n\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n\n    var fetchRequest = new Request(url, requestOptions);\n    var raceOfPromises = [fetch(fetchRequest).then(function (response) {\n      var e_1, _a;\n\n      var fetchHeaders = response.headers;\n      var transformedHeaders = {};\n\n      try {\n        for (var _b = tslib_1.__values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var pair = _c.value;\n          transformedHeaders[pair[0]] = pair[1];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var hasReadableStream = response.body !== undefined; // Return the response with buffered body\n\n      if (!hasReadableStream) {\n        return response.blob().then(function (body) {\n          return {\n            response: new protocol_http_1.HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body: body\n            })\n          };\n        });\n      } // Return the response with streaming body\n\n\n      return {\n        response: new protocol_http_1.HttpResponse({\n          headers: transformedHeaders,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), request_timeout_1.requestTimeout(requestTimeoutInMs)];\n\n    if (abortSignal) {\n      raceOfPromises.push(new Promise(function (resolve, reject) {\n        abortSignal.onabort = function () {\n          var abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n\n    return Promise.race(raceOfPromises);\n  };\n\n  return FetchHttpHandler;\n}();\n\nexports.FetchHttpHandler = FetchHttpHandler;","map":{"version":3,"sources":["../../src/fetch-http-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpHandler, HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HeaderBag, HttpHandlerOptions } from \"@aws-sdk/types\";\n\nimport { requestTimeout } from \"./request-timeout\";\n\ndeclare let AbortController: any;\n\n/**\n * Represents the http options that can be passed to a browser http client.\n */\nexport interface BrowserHttpOptions {\n  /**\n   * The number of milliseconds a request can take before being automatically\n   * terminated.\n   */\n  requestTimeout?: number;\n}\n\nexport class FetchHttpHandler implements HttpHandler {\n  constructor(private readonly httpOptions: BrowserHttpOptions = {}) {}\n\n  destroy(): void {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  }\n\n  handle(request: HttpRequest, options: HttpHandlerOptions): Promise<{ response: HttpResponse }> {\n    const abortSignal = options?.abortSignal;\n    const requestTimeoutInMs = this.httpOptions.requestTimeout;\n\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    let path = request.path;\n    if (request.query) {\n      const queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += `?${queryString}`;\n      }\n    }\n\n    const port = request.port;\n    const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    const requestOptions: RequestInit = {\n      body: request.body,\n      headers: new Headers(request.headers),\n      method: request.method,\n    };\n\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      (requestOptions as any)[\"signal\"] = abortSignal;\n    }\n\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [\n      fetch(fetchRequest).then((response) => {\n        const fetchHeaders: any = response.headers;\n        const transformedHeaders: HeaderBag = {};\n\n        for (const pair of <Array<string[]>>fetchHeaders.entries()) {\n          transformedHeaders[pair[0]] = pair[1];\n        }\n\n        const hasReadableStream = response.body !== undefined;\n\n        // Return the response with buffered body\n        if (!hasReadableStream) {\n          return response.blob().then((body) => ({\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body,\n            }),\n          }));\n        }\n        // Return the response with streaming body\n        return {\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            statusCode: response.status,\n            body: response.body,\n          }),\n        };\n      }),\n      requestTimeout(requestTimeoutInMs),\n    ];\n    if (abortSignal) {\n      raceOfPromises.push(\n        new Promise<never>((resolve, reject) => {\n          abortSignal.onabort = () => {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n          };\n        })\n      );\n    }\n    return Promise.race(raceOfPromises);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}