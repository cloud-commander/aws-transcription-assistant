{"ast":null,"code":"\"use strict\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\n\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n\n  while (stack.length) {\n    var _block = stack.pop();\n\n    fn(_block);\n    var children = _block.children;\n    !Array.isArray(children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\n\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n\n  var type = block.type;\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\n\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _objectSpread({}, child, {\n        depth: (block.depth || 0) + 1\n      }) : child;\n    });\n  }\n};\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */\n\n\nvar DraftTreeAdapter = {\n  /**\n   * Converts from a tree raw state back to draft raw state\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n    var transformedBlocks = [];\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _objectSpread({}, block);\n\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block); // if it's a non-leaf node, we don't do anything else\n\n        if (block.children != null && block.children.length > 0) {\n          return;\n        }\n      }\n\n      delete newBlock.children;\n      transformedBlocks.push(newBlock);\n    });\n    draftTreeState.blocks = transformedBlocks;\n    return _objectSpread({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n\n  /**\n   * Converts from draft raw state to tree draft state\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var transformedBlocks = [];\n    var parentStack = [];\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n\n      var treeBlock = _objectSpread({}, block, {\n        children: []\n      });\n\n      if (!isList) {\n        transformedBlocks.push(treeBlock);\n        return;\n      }\n\n      var lastParent = parentStack[0]; // block is non-nested & there are no nested blocks, directly push block\n\n      if (lastParent == null && depth === 0) {\n        transformedBlocks.push(treeBlock); // block is first nested block or previous nested block is at a lower level\n      } else if (lastParent == null || lastParent.depth < depth - 1) {\n        // create new parent block\n        var newParent = {\n          key: generateRandomKey(),\n          text: '',\n          depth: depth - 1,\n          type: block.type,\n          children: [],\n          entityRanges: [],\n          inlineStyleRanges: []\n        };\n        parentStack.unshift(newParent);\n\n        if (depth === 1) {\n          // add as a root-level block\n          transformedBlocks.push(newParent);\n        } else if (lastParent != null) {\n          // depth > 1 => also add as previous parent's child\n          lastParent.children.push(newParent);\n        }\n\n        newParent.children.push(treeBlock);\n      } else if (lastParent.depth === depth - 1) {\n        // add as child of last parent\n        lastParent.children.push(treeBlock);\n      } else {\n        // pop out parents at levels above this one from the parent stack\n        while (lastParent != null && lastParent.depth >= depth) {\n          parentStack.shift();\n          lastParent = parentStack[0];\n        }\n\n        if (depth > 0) {\n          lastParent.children.push(treeBlock);\n        } else {\n          transformedBlocks.push(treeBlock);\n        }\n      }\n    });\n    return _objectSpread({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\nmodule.exports = DraftTreeAdapter;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/DraftTreeAdapter.js"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","generateRandomKey","require","invariant","traverseInDepthOrder","blocks","fn","stack","reverse","_block","pop","children","Array","isArray","process","env","NODE_ENV","isListBlock","block","type","addDepthToChildren","map","child","depth","DraftTreeAdapter","fromRawTreeStateToRawState","draftTreeState","transformedBlocks","newBlock","push","fromRawStateToRawTreeState","draftState","parentStack","isList","treeBlock","lastParent","newParent","text","entityRanges","inlineStyleRanges","unshift","shift","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n\n  while (stack.length) {\n    var _block = stack.pop();\n\n    fn(_block);\n    var children = _block.children;\n    !Array.isArray(children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\n\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n\n  var type = block.type;\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\n\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _objectSpread({}, child, {\n        depth: (block.depth || 0) + 1\n      }) : child;\n    });\n  }\n};\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */\n\n\nvar DraftTreeAdapter = {\n  /**\n   * Converts from a tree raw state back to draft raw state\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n    var transformedBlocks = [];\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _objectSpread({}, block);\n\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block); // if it's a non-leaf node, we don't do anything else\n\n        if (block.children != null && block.children.length > 0) {\n          return;\n        }\n      }\n\n      delete newBlock.children;\n      transformedBlocks.push(newBlock);\n    });\n    draftTreeState.blocks = transformedBlocks;\n    return _objectSpread({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n\n  /**\n   * Converts from draft raw state to tree draft state\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var transformedBlocks = [];\n    var parentStack = [];\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n\n      var treeBlock = _objectSpread({}, block, {\n        children: []\n      });\n\n      if (!isList) {\n        transformedBlocks.push(treeBlock);\n        return;\n      }\n\n      var lastParent = parentStack[0]; // block is non-nested & there are no nested blocks, directly push block\n\n      if (lastParent == null && depth === 0) {\n        transformedBlocks.push(treeBlock); // block is first nested block or previous nested block is at a lower level\n      } else if (lastParent == null || lastParent.depth < depth - 1) {\n        // create new parent block\n        var newParent = {\n          key: generateRandomKey(),\n          text: '',\n          depth: depth - 1,\n          type: block.type,\n          children: [],\n          entityRanges: [],\n          inlineStyleRanges: []\n        };\n        parentStack.unshift(newParent);\n\n        if (depth === 1) {\n          // add as a root-level block\n          transformedBlocks.push(newParent);\n        } else if (lastParent != null) {\n          // depth > 1 => also add as previous parent's child\n          lastParent.children.push(newParent);\n        }\n\n        newParent.children.push(treeBlock);\n      } else if (lastParent.depth === depth - 1) {\n        // add as child of last parent\n        lastParent.children.push(treeBlock);\n      } else {\n        // pop out parents at levels above this one from the parent stack\n        while (lastParent != null && lastParent.depth >= depth) {\n          parentStack.shift();\n          lastParent = parentStack[0];\n        }\n\n        if (depth > 0) {\n          lastParent.children.push(treeBlock);\n        } else {\n          transformedBlocks.push(treeBlock);\n        }\n      }\n    });\n    return _objectSpread({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\nmodule.exports = DraftTreeAdapter;"]},"metadata":{},"sourceType":"script"}