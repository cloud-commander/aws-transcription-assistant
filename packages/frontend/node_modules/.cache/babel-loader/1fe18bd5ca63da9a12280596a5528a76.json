{"ast":null,"code":"var _jsxFileName = \"/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/timed-text-editor/WrapperBlock.js\";\nimport React from 'react';\nimport { EditorBlock, Modifier, EditorState, SelectionState, convertFromRaw, convertToRaw } from 'draft-js';\nimport SpeakerLabel from './SpeakerLabel'; // import { shortTimecode, secondsToTimecode } from '../../Util/timecode-converter/';\n\nimport { shortTimecode, secondsToTimecode } from '../../util/timecode-converter';\nimport style from './WrapperBlock.module.css';\n\nconst updateSpeakerName = (oldName, newName, state) => {\n  const contentToUpdate = convertToRaw(state);\n  contentToUpdate.blocks.forEach(block => {\n    if (block.data.speaker === oldName) {\n      block.data.speaker = newName;\n    }\n  });\n  return convertFromRaw(contentToUpdate);\n};\n\nclass WrapperBlock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = (nextProps, nextState) => {\n      if (nextProps.block.getText() !== this.props.block.getText()) {\n        return true;\n      }\n\n      if (nextProps.blockProps.showSpeakers !== this.props.blockProps.showSpeakers) {\n        return true;\n      }\n\n      if (nextProps.blockProps.showTimecodes !== this.props.blockProps.showTimecodes) {\n        return true;\n      }\n\n      if (nextProps.blockProps.timecodeOffset !== this.props.blockProps.timecodeOffset) {\n        return true;\n      }\n\n      if (nextState.speaker !== this.state.speaker) {\n        return true;\n      }\n\n      if (nextProps.blockProps.isEditable !== this.props.blockProps.isEditable) {\n        return true;\n      }\n\n      if (nextProps.block.getData().get('speaker') !== this.state.speaker) {\n        console.log('shouldComponentUpdate wrapper speaker', nextProps.block.getData().get('speaker'), this.state.speaker);\n        return true;\n      }\n\n      return false;\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.block.getData().get('speaker') !== prevState.speaker) {\n        console.log('componentDidUpdate wrapper speaker', prevProps.block.getData().get('speaker'), prevState.speaker);\n        this.setState({\n          speaker: prevProps.block.getData().get('speaker')\n        });\n        return true;\n      }\n    };\n\n    this.handleOnClickEdit = () => {\n      const oldSpeakerName = this.state.speaker;\n      const newSpeakerName = prompt('New Speaker Name?', this.state.speaker);\n\n      if (newSpeakerName !== '' && newSpeakerName !== null) {\n        this.setState({\n          speaker: newSpeakerName\n        });\n        const isUpdateAllSpeakerInstances = window.confirm(`Would you like to replace all occurrences of ${oldSpeakerName} with ${newSpeakerName}?`);\n\n        if (this.props.blockProps.handleAnalyticsEvents) {\n          this.props.blockProps.handleAnalyticsEvents({\n            category: 'WrapperBlock',\n            action: 'handleOnClickEdit',\n            name: 'newSpeakerName',\n            value: newSpeakerName\n          });\n        }\n\n        if (isUpdateAllSpeakerInstances) {\n          const ContentState = this.props.blockProps.editorState.getCurrentContent();\n          const contentToUpdateWithSpekaers = updateSpeakerName(oldSpeakerName, newSpeakerName, ContentState);\n          this.props.blockProps.setEditorNewContentStateSpeakersUpdate(contentToUpdateWithSpekaers);\n        } else {\n          // From docs: https://draftjs.org/docs/api-reference-selection-state#keys-and-offsets\n          // selection points are tracked as key/offset pairs,\n          // where the key value is the key of the ContentBlock where the point is positioned\n          // and the offset value is the character offset within the block.\n          // Get key of the currentBlock\n          const keyForCurrentCurrentBlock = this.props.block.getKey(); // create empty selection for current block\n          // https://draftjs.org/docs/api-reference-selection-state#createempty\n\n          const currentBlockSelection = SelectionState.createEmpty(keyForCurrentCurrentBlock);\n          const editorStateWithSelectedCurrentBlock = EditorState.acceptSelection(this.props.blockProps.editorState, currentBlockSelection);\n          const currentBlockSelectionState = editorStateWithSelectedCurrentBlock.getSelection();\n          const newBlockDataWithSpeakerName = {\n            speaker: newSpeakerName\n          }; // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n\n          const newContentState = Modifier.mergeBlockData(this.props.contentState, currentBlockSelectionState, newBlockDataWithSpeakerName);\n          this.props.blockProps.setEditorNewContentStateSpeakersUpdate(newContentState);\n        }\n      }\n    };\n\n    this.handleTimecodeClick = () => {\n      this.props.blockProps.onWordClick(this.state.start);\n\n      if (this.props.blockProps.handleAnalyticsEvents) {\n        this.props.blockProps.handleAnalyticsEvents({\n          category: 'WrapperBlock',\n          action: 'handleTimecodeClick',\n          name: 'onWordClick',\n          value: secondsToTimecode(this.state.start)\n        });\n      }\n    };\n\n    this.state = {\n      speaker: '',\n      start: 0,\n      timecodeOffset: this.props.blockProps.timecodeOffset\n    };\n  }\n\n  componentDidMount() {\n    const {\n      block\n    } = this.props;\n    const speaker = block.getData().get('speaker');\n    const start = block.getData().get('start');\n    this.setState({\n      speaker: speaker,\n      start: start\n    });\n  } // reducing unnecessary re-renders\n\n\n  render() {\n    let startTimecode = this.state.start;\n\n    if (this.props.blockProps.timecodeOffset) {\n      startTimecode += this.props.blockProps.timecodeOffset;\n    }\n\n    const speakerElement = /*#__PURE__*/React.createElement(SpeakerLabel, {\n      name: this.state.speaker,\n      handleOnClickEdit: this.handleOnClickEdit,\n      isEditable: this.props.blockProps.isEditable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    });\n    const timecodeElement = /*#__PURE__*/React.createElement(\"span\", {\n      className: style.time,\n      onClick: this.handleTimecodeClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, shortTimecode(startTimecode));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: style.WrapperBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: [style.markers, style.unselectable].join(' '),\n      contentEditable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }, this.props.blockProps.showSpeakers ? speakerElement : '', this.props.blockProps.showTimecodes ? timecodeElement : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: style.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EditorBlock, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nexport default WrapperBlock;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/components/timed-text-editor/WrapperBlock.js"],"names":["React","EditorBlock","Modifier","EditorState","SelectionState","convertFromRaw","convertToRaw","SpeakerLabel","shortTimecode","secondsToTimecode","style","updateSpeakerName","oldName","newName","state","contentToUpdate","blocks","forEach","block","data","speaker","WrapperBlock","Component","constructor","props","shouldComponentUpdate","nextProps","nextState","getText","blockProps","showSpeakers","showTimecodes","timecodeOffset","isEditable","getData","get","console","log","componentDidUpdate","prevProps","prevState","setState","handleOnClickEdit","oldSpeakerName","newSpeakerName","prompt","isUpdateAllSpeakerInstances","window","confirm","handleAnalyticsEvents","category","action","name","value","ContentState","editorState","getCurrentContent","contentToUpdateWithSpekaers","setEditorNewContentStateSpeakersUpdate","keyForCurrentCurrentBlock","getKey","currentBlockSelection","createEmpty","editorStateWithSelectedCurrentBlock","acceptSelection","currentBlockSelectionState","getSelection","newBlockDataWithSpeakerName","newContentState","mergeBlockData","contentState","handleTimecodeClick","onWordClick","start","componentDidMount","render","startTimecode","speakerElement","timecodeElement","time","markers","unselectable","join","text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  EditorBlock,\n  Modifier,\n  EditorState,\n  SelectionState,\n  convertFromRaw,\n  convertToRaw\n } from 'draft-js';\n\nimport SpeakerLabel from './SpeakerLabel';\n// import { shortTimecode, secondsToTimecode } from '../../Util/timecode-converter/';\n\nimport {\n  shortTimecode,\n  secondsToTimecode\n} from '../../util/timecode-converter';\n\nimport style from './WrapperBlock.module.css';\n\nconst updateSpeakerName = (oldName, newName, state) => {\n  const contentToUpdate = convertToRaw(state);\n\n  contentToUpdate.blocks.forEach(block => {\n    if (block.data.speaker === oldName) {\n      block.data.speaker = newName;\n    }\n  })\n\n  return convertFromRaw(contentToUpdate);\n}\n\n\nclass WrapperBlock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      speaker: '',\n      start: 0,\n      timecodeOffset: this.props.blockProps.timecodeOffset\n    };\n  }\n\n  componentDidMount() {\n    const { block } = this.props;\n    const speaker = block.getData().get('speaker');\n\n    const start = block.getData().get('start');\n\n    this.setState({\n      speaker: speaker,\n      start: start\n    });\n  }\n  // reducing unnecessary re-renders\n  shouldComponentUpdate = (nextProps, nextState) => {\n    if (nextProps.block.getText() !== this.props.block.getText()) {\n      return true;\n    }\n\n    if (nextProps.blockProps.showSpeakers !== this.props.blockProps.showSpeakers) {\n      return true;\n    }\n\n    if (nextProps.blockProps.showTimecodes !== this.props.blockProps.showTimecodes) {\n      return true;\n    }\n\n    if (nextProps.blockProps.timecodeOffset !== this.props.blockProps.timecodeOffset) {\n      return true;\n    }\n\n    if (nextState.speaker !== this.state.speaker) {\n      return true;\n    }\n\n    if (nextProps.blockProps.isEditable !== this.props.blockProps.isEditable) {\n      return true;\n    }\n\n    if(nextProps.block.getData().get('speaker') !== this.state.speaker){\n      console.log('shouldComponentUpdate wrapper speaker', nextProps.block.getData().get('speaker') , this.state.speaker )\n      return true;\n    }\n    return false;\n  };\n\n  componentDidUpdate  = (prevProps, prevState) =>{\n\n    if(prevProps.block.getData().get('speaker') !== prevState.speaker){\n        console.log('componentDidUpdate wrapper speaker', prevProps.block.getData().get('speaker') , prevState.speaker );\n\n        this.setState({\n          speaker: prevProps.block.getData().get('speaker')\n        })\n\n        return true;\n      }\n  }\n\n  handleOnClickEdit = () => {\n    const oldSpeakerName = this.state.speaker;\n    const newSpeakerName = prompt('New Speaker Name?', this.state.speaker);\n    if (newSpeakerName !== '' && newSpeakerName !== null) {\n      this.setState({ speaker: newSpeakerName });\n      const isUpdateAllSpeakerInstances = window.confirm(`Would you like to replace all occurrences of ${oldSpeakerName} with ${newSpeakerName}?`);\n\n      if (this.props.blockProps.handleAnalyticsEvents) {\n        this.props.blockProps.handleAnalyticsEvents({\n          category: 'WrapperBlock',\n          action: 'handleOnClickEdit',\n          name: 'newSpeakerName',\n          value: newSpeakerName\n        });\n      }\n\n      if(isUpdateAllSpeakerInstances){\n        const ContentState = this.props.blockProps.editorState.getCurrentContent();\n        const contentToUpdateWithSpekaers = updateSpeakerName(oldSpeakerName, newSpeakerName, ContentState);\n        this.props.blockProps.setEditorNewContentStateSpeakersUpdate(contentToUpdateWithSpekaers);\n      }\n      else{\n       // From docs: https://draftjs.org/docs/api-reference-selection-state#keys-and-offsets\n        // selection points are tracked as key/offset pairs,\n        // where the key value is the key of the ContentBlock where the point is positioned\n        // and the offset value is the character offset within the block.\n\n        // Get key of the currentBlock\n        const keyForCurrentCurrentBlock = this.props.block.getKey();\n        // create empty selection for current block\n        // https://draftjs.org/docs/api-reference-selection-state#createempty\n        const currentBlockSelection = SelectionState.createEmpty(\n          keyForCurrentCurrentBlock\n        );\n        const editorStateWithSelectedCurrentBlock = EditorState.acceptSelection(\n          this.props.blockProps.editorState,\n          currentBlockSelection\n        );\n\n        const currentBlockSelectionState = editorStateWithSelectedCurrentBlock.getSelection();\n        const newBlockDataWithSpeakerName = { speaker: newSpeakerName };\n\n        // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n        const newContentState = Modifier.mergeBlockData(\n          this.props.contentState,\n          currentBlockSelectionState,\n          newBlockDataWithSpeakerName\n        );\n\n        this.props.blockProps.setEditorNewContentStateSpeakersUpdate(newContentState);\n      }\n    }\n  };\n\n  handleTimecodeClick = () => {\n    this.props.blockProps.onWordClick(this.state.start);\n    if (this.props.blockProps.handleAnalyticsEvents) {\n      this.props.blockProps.handleAnalyticsEvents({\n        category: 'WrapperBlock',\n        action: 'handleTimecodeClick',\n        name: 'onWordClick',\n        value: secondsToTimecode(this.state.start)\n      });\n    }\n  };\n\n  render() {\n    let startTimecode = this.state.start;\n    if (this.props.blockProps.timecodeOffset) {\n      startTimecode += this.props.blockProps.timecodeOffset;\n    }\n\n    const speakerElement = (\n      <SpeakerLabel\n        name={ this.state.speaker }\n        handleOnClickEdit={ this.handleOnClickEdit }\n        isEditable={this.props.blockProps.isEditable}\n      />\n    );\n\n    const timecodeElement = (\n      <span className={ style.time } onClick={ this.handleTimecodeClick }>\n        {shortTimecode(startTimecode)}\n      </span>\n    );\n\n    return (\n      <div className={ style.WrapperBlock }>\n        <div\n          className={ [ style.markers, style.unselectable ].join(' ') }\n          contentEditable={ false }\n        >\n          {this.props.blockProps.showSpeakers ? speakerElement : ''}\n\n          {this.props.blockProps.showTimecodes ? timecodeElement : ''}\n        </div>\n        <div className={ style.text }>\n          <EditorBlock { ...this.props } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WrapperBlock;\n"]},"metadata":{},"sourceType":"module"}