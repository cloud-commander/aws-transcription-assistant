{"ast":null,"code":"// Partition default templates\nvar AWS_TEMPLATE = \"s3.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"s3.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"s3.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"s3.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"s3.{region}.amazonaws.com\"; // Partition regions\n\nvar AWS_REGIONS = new Set([\"ap-south-1\", \"eu-north-1\", \"eu-west-3\", \"eu-west-2\", \"eu-west-1\", \"ap-northeast-2\", \"ap-northeast-1\", \"me-south-1\", \"ca-central-1\", \"sa-east-1\", \"ap-east-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"eu-central-1\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\"]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-west-1\", \"us-gov-east-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n  var regionInfo = undefined;\n\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-east-1\":\n      regionInfo = {\n        hostname: \"s3.ap-east-1.amazonaws.com\"\n      };\n      break;\n\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"s3.ap-northeast-1.amazonaws.com\"\n      };\n      break;\n\n    case \"ap-northeast-2\":\n      regionInfo = {\n        hostname: \"s3.ap-northeast-2.amazonaws.com\"\n      };\n      break;\n\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"s3.ap-south-1.amazonaws.com\"\n      };\n      break;\n\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"s3.ap-southeast-1.amazonaws.com\"\n      };\n      break;\n\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"s3.ap-southeast-2.amazonaws.com\"\n      };\n      break;\n\n    case \"ca-central-1\":\n      regionInfo = {\n        hostname: \"s3.ca-central-1.amazonaws.com\"\n      };\n      break;\n\n    case \"cn-north-1\":\n      regionInfo = {\n        hostname: \"s3.cn-north-1.amazonaws.com.cn\"\n      };\n      break;\n\n    case \"cn-northwest-1\":\n      regionInfo = {\n        hostname: \"s3.cn-northwest-1.amazonaws.com.cn\"\n      };\n      break;\n\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"s3.eu-central-1.amazonaws.com\"\n      };\n      break;\n\n    case \"eu-north-1\":\n      regionInfo = {\n        hostname: \"s3.eu-north-1.amazonaws.com\"\n      };\n      break;\n\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"s3.eu-west-1.amazonaws.com\"\n      };\n      break;\n\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"s3.eu-west-2.amazonaws.com\"\n      };\n      break;\n\n    case \"eu-west-3\":\n      regionInfo = {\n        hostname: \"s3.eu-west-3.amazonaws.com\"\n      };\n      break;\n\n    case \"fips-us-gov-west-1\":\n      regionInfo = {\n        hostname: \"s3-fips-us-gov-west-1.amazonaws.com\",\n        signingRegion: \"us-gov-west-1\"\n      };\n      break;\n\n    case \"me-south-1\":\n      regionInfo = {\n        hostname: \"s3.me-south-1.amazonaws.com\"\n      };\n      break;\n\n    case \"s3-external-1\":\n      regionInfo = {\n        hostname: \"s3-external-1.amazonaws.com\",\n        signingRegion: \"us-east-1\"\n      };\n      break;\n\n    case \"sa-east-1\":\n      regionInfo = {\n        hostname: \"s3.sa-east-1.amazonaws.com\"\n      };\n      break;\n\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"s3.amazonaws.com\"\n      };\n      break;\n\n    case \"us-east-2\":\n      regionInfo = {\n        hostname: \"s3.us-east-2.amazonaws.com\"\n      };\n      break;\n\n    case \"us-gov-east-1\":\n      regionInfo = {\n        hostname: \"s3.us-gov-east-1.amazonaws.com\"\n      };\n      break;\n\n    case \"us-gov-west-1\":\n      regionInfo = {\n        hostname: \"s3.us-gov-west-1.amazonaws.com\"\n      };\n      break;\n\n    case \"us-iso-east-1\":\n      regionInfo = {\n        hostname: \"s3.us-iso-east-1.c2s.ic.gov\"\n      };\n      break;\n\n    case \"us-isob-east-1\":\n      regionInfo = {\n        hostname: \"s3.us-isob-east-1.sc2s.sgov.gov\"\n      };\n      break;\n\n    case \"us-west-1\":\n      regionInfo = {\n        hostname: \"s3.us-west-1.amazonaws.com\"\n      };\n      break;\n\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"s3.us-west-2.amazonaws.com\"\n      };\n      break;\n    // Next, try to match partition endpoints.\n\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region)\n        };\n      }\n\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region)\n        };\n      }\n\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region)\n        };\n      }\n\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region)\n        };\n      }\n\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region)\n        };\n      } // Finally, assume it's an AWS partition endpoint.\n\n\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region)\n        };\n      }\n\n  }\n\n  return Promise.resolve(regionInfo);\n};","map":{"version":3,"sources":["../../endpoints.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Partition default templates\nvar AWS_TEMPLATE = \"s3.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"s3.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"s3.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"s3.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"s3.{region}.amazonaws.com\";\n// Partition regions\nvar AWS_REGIONS = new Set([\n    \"ap-south-1\",\n    \"eu-north-1\",\n    \"eu-west-3\",\n    \"eu-west-2\",\n    \"eu-west-1\",\n    \"ap-northeast-2\",\n    \"ap-northeast-1\",\n    \"me-south-1\",\n    \"ca-central-1\",\n    \"sa-east-1\",\n    \"ap-east-1\",\n    \"ap-southeast-1\",\n    \"ap-southeast-2\",\n    \"eu-central-1\",\n    \"us-east-1\",\n    \"us-east-2\",\n    \"us-west-1\",\n    \"us-west-2\",\n]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-west-1\", \"us-gov-east-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n    var regionInfo = undefined;\n    switch (region) {\n        // First, try to match exact region names.\n        case \"ap-east-1\":\n            regionInfo = {\n                hostname: \"s3.ap-east-1.amazonaws.com\",\n            };\n            break;\n        case \"ap-northeast-1\":\n            regionInfo = {\n                hostname: \"s3.ap-northeast-1.amazonaws.com\",\n            };\n            break;\n        case \"ap-northeast-2\":\n            regionInfo = {\n                hostname: \"s3.ap-northeast-2.amazonaws.com\",\n            };\n            break;\n        case \"ap-south-1\":\n            regionInfo = {\n                hostname: \"s3.ap-south-1.amazonaws.com\",\n            };\n            break;\n        case \"ap-southeast-1\":\n            regionInfo = {\n                hostname: \"s3.ap-southeast-1.amazonaws.com\",\n            };\n            break;\n        case \"ap-southeast-2\":\n            regionInfo = {\n                hostname: \"s3.ap-southeast-2.amazonaws.com\",\n            };\n            break;\n        case \"ca-central-1\":\n            regionInfo = {\n                hostname: \"s3.ca-central-1.amazonaws.com\",\n            };\n            break;\n        case \"cn-north-1\":\n            regionInfo = {\n                hostname: \"s3.cn-north-1.amazonaws.com.cn\",\n            };\n            break;\n        case \"cn-northwest-1\":\n            regionInfo = {\n                hostname: \"s3.cn-northwest-1.amazonaws.com.cn\",\n            };\n            break;\n        case \"eu-central-1\":\n            regionInfo = {\n                hostname: \"s3.eu-central-1.amazonaws.com\",\n            };\n            break;\n        case \"eu-north-1\":\n            regionInfo = {\n                hostname: \"s3.eu-north-1.amazonaws.com\",\n            };\n            break;\n        case \"eu-west-1\":\n            regionInfo = {\n                hostname: \"s3.eu-west-1.amazonaws.com\",\n            };\n            break;\n        case \"eu-west-2\":\n            regionInfo = {\n                hostname: \"s3.eu-west-2.amazonaws.com\",\n            };\n            break;\n        case \"eu-west-3\":\n            regionInfo = {\n                hostname: \"s3.eu-west-3.amazonaws.com\",\n            };\n            break;\n        case \"fips-us-gov-west-1\":\n            regionInfo = {\n                hostname: \"s3-fips-us-gov-west-1.amazonaws.com\",\n                signingRegion: \"us-gov-west-1\",\n            };\n            break;\n        case \"me-south-1\":\n            regionInfo = {\n                hostname: \"s3.me-south-1.amazonaws.com\",\n            };\n            break;\n        case \"s3-external-1\":\n            regionInfo = {\n                hostname: \"s3-external-1.amazonaws.com\",\n                signingRegion: \"us-east-1\",\n            };\n            break;\n        case \"sa-east-1\":\n            regionInfo = {\n                hostname: \"s3.sa-east-1.amazonaws.com\",\n            };\n            break;\n        case \"us-east-1\":\n            regionInfo = {\n                hostname: \"s3.amazonaws.com\",\n            };\n            break;\n        case \"us-east-2\":\n            regionInfo = {\n                hostname: \"s3.us-east-2.amazonaws.com\",\n            };\n            break;\n        case \"us-gov-east-1\":\n            regionInfo = {\n                hostname: \"s3.us-gov-east-1.amazonaws.com\",\n            };\n            break;\n        case \"us-gov-west-1\":\n            regionInfo = {\n                hostname: \"s3.us-gov-west-1.amazonaws.com\",\n            };\n            break;\n        case \"us-iso-east-1\":\n            regionInfo = {\n                hostname: \"s3.us-iso-east-1.c2s.ic.gov\",\n            };\n            break;\n        case \"us-isob-east-1\":\n            regionInfo = {\n                hostname: \"s3.us-isob-east-1.sc2s.sgov.gov\",\n            };\n            break;\n        case \"us-west-1\":\n            regionInfo = {\n                hostname: \"s3.us-west-1.amazonaws.com\",\n            };\n            break;\n        case \"us-west-2\":\n            regionInfo = {\n                hostname: \"s3.us-west-2.amazonaws.com\",\n            };\n            break;\n        // Next, try to match partition endpoints.\n        default:\n            if (AWS_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n                };\n            }\n            if (AWS_CN_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n                };\n            }\n            if (AWS_ISO_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n                };\n            }\n            if (AWS_ISO_B_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n                };\n            }\n            if (AWS_US_GOV_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n                };\n            }\n            // Finally, assume it's an AWS partition endpoint.\n            if (regionInfo === undefined) {\n                regionInfo = {\n                    hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n                };\n            }\n    }\n    return Promise.resolve(regionInfo);\n};\n//# sourceMappingURL=endpoints.js.map"]},"metadata":{},"sourceType":"module"}