{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar findRangesImmutable = require(\"./findRangesImmutable\");\n\nvar getOwnObjectValues = require(\"./getOwnObjectValues\");\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\nvar returnTrue = function returnTrue() {\n  return true;\n};\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({\n          start: 0,\n          end: 0\n        }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n    var chars = block.getCharacterList();\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n    return List(leafSets);\n  },\n  fromJS: function fromJS(_ref) {\n    var leaves = _ref.leaves,\n        other = _objectWithoutPropertiesLoose(_ref, [\"leaves\"]);\n\n    return new DecoratorRange(_objectSpread({}, other, {\n      leaves: leaves != null ? List(Array.isArray(leaves) ? leaves : getOwnObjectValues(leaves)).map(function (leaf) {\n        return LeafRange(leaf);\n      }) : null\n    }));\n  }\n};\n/**\n * Generate LeafRange records for a given character list.\n */\n\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/BlockTree.js"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","_objectWithoutPropertiesLoose","excluded","sourceKeys","indexOf","findRangesImmutable","require","getOwnObjectValues","Immutable","List","Repeat","Record","returnTrue","defaultLeafRange","start","end","LeafRange","defaultDecoratorRange","decoratorKey","leaves","DecoratorRange","BlockTree","generate","contentState","block","decorator","textLength","getLength","of","leafSets","decorations","getDecorations","chars","getCharacterList","areEqual","push","get","generateLeaves","slice","toList","fromJS","_ref","other","Array","isArray","map","leaf","characters","offset","inlineStyles","c","getStyle","a","b","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar findRangesImmutable = require(\"./findRangesImmutable\");\n\nvar getOwnObjectValues = require(\"./getOwnObjectValues\");\n\nvar Immutable = require(\"immutable\");\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\nvar returnTrue = function returnTrue() {\n  return true;\n};\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({\n          start: 0,\n          end: 0\n        }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n    var chars = block.getCharacterList();\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n    return List(leafSets);\n  },\n  fromJS: function fromJS(_ref) {\n    var leaves = _ref.leaves,\n        other = _objectWithoutPropertiesLoose(_ref, [\"leaves\"]);\n\n    return new DecoratorRange(_objectSpread({}, other, {\n      leaves: leaves != null ? List(Array.isArray(leaves) ? leaves : getOwnObjectValues(leaves)).map(function (leaf) {\n        return LeafRange(leaf);\n      }) : null\n    }));\n  }\n};\n/**\n * Generate LeafRange records for a given character list.\n */\n\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;"]},"metadata":{},"sourceType":"script"}