{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveRegionConfig = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nfunction resolveRegionConfig(input) {\n  var region = input.region || input.regionDefaultProvider(input);\n  return tslib_1.__assign(tslib_1.__assign({}, input), {\n    region: normalizeRegion(region)\n  });\n}\n\nexports.resolveRegionConfig = resolveRegionConfig;\n\nfunction normalizeRegion(region) {\n  if (typeof region === \"string\") {\n    var promisified_1 = Promise.resolve(region);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return region;\n}","map":{"version":3,"sources":["../../src/RegionConfig.ts"],"names":[],"mappings":";;;;;;;;;AAcA,SAAgB,mBAAhB,CAAuC,KAAvC,EAAwF;AACtF,MAAM,MAAM,GAAG,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,qBAAN,CAA4B,KAA5B,CAA/B;AACA,SAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,IAAA,MAAM,EAAE,eAAe,CAAC,MAAD;AADf,GADV,CAAA;AAID;;AAND,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAQA,SAAS,eAAT,CAAyB,MAAzB,EAA0D;AACxD,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAM,aAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAApB;AACA,WAAO,YAAA;AAAM,aAAA,aAAA;AAAW,KAAxB;AACD;;AACD,SAAO,MAAP;AACD","sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\nexport interface RegionInputConfig {\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | Provider<string>;\n}\ninterface PreviouslyResolved {\n  regionDefaultProvider: (input: any) => Provider<string>;\n}\nexport interface RegionResolvedConfig {\n  region: Provider<string>;\n}\nexport function resolveRegionConfig<T>(input: T & RegionInputConfig & PreviouslyResolved): T & RegionResolvedConfig {\n  const region = input.region || input.regionDefaultProvider(input as any);\n  return {\n    ...input,\n    region: normalizeRegion(region),\n  };\n}\n\nfunction normalizeRegion(region: string | Provider<string>): Provider<string> {\n  if (typeof region === \"string\") {\n    const promisified = Promise.resolve(region);\n    return () => promisified;\n  }\n  return region as Provider<string>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}