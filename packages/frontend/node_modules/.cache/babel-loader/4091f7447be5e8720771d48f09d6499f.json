{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toUtf8 = exports.fromUtf8 = void 0;\n/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\n\nfunction fromUtf8(input) {\n  var bytes = [];\n\n  for (var i = 0, len = input.length; i < len; i++) {\n    var value = input.charCodeAt(i);\n\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push(value >> 6 | 192, value & 63 | 128);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);\n      bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);\n    } else {\n      bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);\n    }\n  }\n\n  return Uint8Array.from(bytes);\n}\n\nexports.fromUtf8 = fromUtf8;\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\n\nfunction toUtf8(input) {\n  var decoded = \"\";\n\n  for (var i = 0, len = input.length; i < len; i++) {\n    var byte = input[i];\n\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (192 <= byte && byte < 224) {\n      var nextByte = input[++i];\n      decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);\n    } else if (240 <= byte && byte < 365) {\n      var surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      var encoded = \"%\" + surrogatePair.map(function (byteValue) {\n        return byteValue.toString(16);\n      }).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);\n    }\n  }\n\n  return decoded;\n}\n\nexports.toUtf8 = toUtf8;","map":{"version":3,"sources":["../../src/pureJs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport function fromUtf8(input: string): Uint8Array {\n  const bytes: Array<number> = [];\n  for (let i = 0, len = input.length; i < len; i++) {\n    const value = input.charCodeAt(i);\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n      bytes.push(\n        (surrogatePair >> 18) | 0b11110000,\n        ((surrogatePair >> 12) & 0b111111) | 0b10000000,\n        ((surrogatePair >> 6) & 0b111111) | 0b10000000,\n        (surrogatePair & 0b111111) | 0b10000000\n      );\n    } else {\n      bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\n    }\n  }\n\n  return Uint8Array.from(bytes);\n}\n\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nexport function toUtf8(input: Uint8Array): string {\n  let decoded = \"\";\n  for (let i = 0, len = input.length; i < len; i++) {\n    const byte = input[i];\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (0b11000000 <= byte && byte < 0b11100000) {\n      const nextByte = input[++i];\n      decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\n    } else if (0b11110000 <= byte && byte < 0b101101101) {\n      const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode(\n        ((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111)\n      );\n    }\n  }\n\n  return decoded;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}