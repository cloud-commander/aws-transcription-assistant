{"ast":null,"code":"//@ts-nocheck\nimport bbcKaldiToDraft from './bbc-kaldi/index';\nimport autoEdit2ToDraft from './autoEdit2/index';\nimport speechmaticsToDraft from './speechmatics/index'; //@ts-nocheck\n\nimport amazonTranscribeToDraft from './amazon-transcribe/index';\nimport ibmToDraft from './ibm/index';\nimport digitalPaperEditToDraft from './digital-paper-edit/index';\nimport createEntityMap from './create-entity-map/index';\nimport gcpSttToDraft from './google-stt/index';\n/**\n * Adapters for STT conversion\n * @param {json} transcriptData - A json transcript with some word accurate timecode\n * @param {string} sttJsonType - the type of transcript supported by the available adapters\n */\n\nconst sttJsonAdapter = (transcriptData, sttJsonType) => {\n  let blocks;\n\n  switch (sttJsonType) {\n    case 'bbckaldi':\n      blocks = bbcKaldiToDraft(transcriptData);\n      return {\n        blocks,\n        entityMap: createEntityMap(blocks)\n      };\n\n    case 'autoedit2':\n      blocks = autoEdit2ToDraft(transcriptData);\n      return {\n        blocks,\n        entityMap: createEntityMap(blocks)\n      };\n\n    case 'speechmatics':\n      blocks = speechmaticsToDraft(transcriptData);\n      return {\n        blocks,\n        entityMap: createEntityMap(blocks)\n      };\n\n    case 'ibm':\n      blocks = ibmToDraft(transcriptData);\n      return {\n        blocks,\n        entityMap: createEntityMap(blocks)\n      };\n\n    case 'draftjs':\n      return transcriptData;\n    // (typeof transcriptData === 'string')? JSON.parse(transcriptData): transcriptData;\n\n    case 'amazontranscribe':\n      blocks = amazonTranscribeToDraft(transcriptData);\n      return {\n        blocks,\n        entityMap: createEntityMap(blocks)\n      };\n\n    case 'digitalpaperedit':\n      blocks = digitalPaperEditToDraft(transcriptData);\n      return {\n        blocks,\n        entityMap: createEntityMap(blocks)\n      };\n\n    case 'google-stt':\n      blocks = gcpSttToDraft(transcriptData);\n      return {\n        blocks,\n        entityMap: createEntityMap(blocks)\n      };\n\n    default:\n      // code block\n      console.error('Did not recognize the stt engine.');\n  }\n};\n\nexport default sttJsonAdapter;\nexport { createEntityMap };","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/stt-adapters/index.js"],"names":["bbcKaldiToDraft","autoEdit2ToDraft","speechmaticsToDraft","amazonTranscribeToDraft","ibmToDraft","digitalPaperEditToDraft","createEntityMap","gcpSttToDraft","sttJsonAdapter","transcriptData","sttJsonType","blocks","entityMap","console","error"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,mBAAP,MAAgC,sBAAhC,C,CACA;;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,uBAAP,MAAoC,4BAApC;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA;;;;;;AAKA,MAAMC,cAAc,GAAG,CAACC,cAAD,EAAiBC,WAAjB,KAAiC;AACtD,MAAIC,MAAJ;;AACA,UAAQD,WAAR;AACA,SAAK,UAAL;AACEC,MAAAA,MAAM,GAAGX,eAAe,CAACS,cAAD,CAAxB;AAEA,aAAO;AAAEE,QAAAA,MAAF;AAAUC,QAAAA,SAAS,EAAEN,eAAe,CAACK,MAAD;AAApC,OAAP;;AACF,SAAK,WAAL;AACEA,MAAAA,MAAM,GAAGV,gBAAgB,CAACQ,cAAD,CAAzB;AAEA,aAAO;AAAEE,QAAAA,MAAF;AAAUC,QAAAA,SAAS,EAAEN,eAAe,CAACK,MAAD;AAApC,OAAP;;AACF,SAAK,cAAL;AACEA,MAAAA,MAAM,GAAGT,mBAAmB,CAACO,cAAD,CAA5B;AAEA,aAAO;AAAEE,QAAAA,MAAF;AAAUC,QAAAA,SAAS,EAAEN,eAAe,CAACK,MAAD;AAApC,OAAP;;AACF,SAAK,KAAL;AACEA,MAAAA,MAAM,GAAGP,UAAU,CAACK,cAAD,CAAnB;AAEA,aAAO;AAAEE,QAAAA,MAAF;AAAUC,QAAAA,SAAS,EAAEN,eAAe,CAACK,MAAD;AAApC,OAAP;;AACF,SAAK,SAAL;AACE,aAAOF,cAAP;AAAuB;;AAEzB,SAAK,kBAAL;AACEE,MAAAA,MAAM,GAAGR,uBAAuB,CAACM,cAAD,CAAhC;AAEA,aAAO;AAAEE,QAAAA,MAAF;AAAUC,QAAAA,SAAS,EAAEN,eAAe,CAACK,MAAD;AAApC,OAAP;;AACF,SAAK,kBAAL;AACEA,MAAAA,MAAM,GAAGN,uBAAuB,CAACI,cAAD,CAAhC;AAEA,aAAO;AAAEE,QAAAA,MAAF;AAAUC,QAAAA,SAAS,EAAEN,eAAe,CAACK,MAAD;AAApC,OAAP;;AAEF,SAAK,YAAL;AACEA,MAAAA,MAAM,GAAGJ,aAAa,CAACE,cAAD,CAAtB;AAEA,aAAO;AAAEE,QAAAA,MAAF;AAAUC,QAAAA,SAAS,EAAEN,eAAe,CAACK,MAAD;AAApC,OAAP;;AAEF;AACE;AACAE,MAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd;AApCF;AAsCD,CAxCD;;AA0CA,eAAeN,cAAf;AACA,SAASF,eAAT","sourcesContent":["//@ts-nocheck\nimport bbcKaldiToDraft from './bbc-kaldi/index';\nimport autoEdit2ToDraft from './autoEdit2/index';\nimport speechmaticsToDraft from './speechmatics/index';\n//@ts-nocheck\nimport amazonTranscribeToDraft from './amazon-transcribe/index';\nimport ibmToDraft from './ibm/index';\nimport digitalPaperEditToDraft from './digital-paper-edit/index';\nimport createEntityMap from './create-entity-map/index';\nimport gcpSttToDraft from './google-stt/index';\n\n/**\n * Adapters for STT conversion\n * @param {json} transcriptData - A json transcript with some word accurate timecode\n * @param {string} sttJsonType - the type of transcript supported by the available adapters\n */\nconst sttJsonAdapter = (transcriptData, sttJsonType) => {\n  let blocks;\n  switch (sttJsonType) {\n  case 'bbckaldi':\n    blocks = bbcKaldiToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'autoedit2':\n    blocks = autoEdit2ToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'speechmatics':\n    blocks = speechmaticsToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'ibm':\n    blocks = ibmToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'draftjs':\n    return transcriptData; // (typeof transcriptData === 'string')? JSON.parse(transcriptData): transcriptData;\n\n  case 'amazontranscribe':\n    blocks = amazonTranscribeToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'digitalpaperedit':\n    blocks = digitalPaperEditToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n\n  case 'google-stt':\n    blocks = gcpSttToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n\n  default:\n    // code block\n    console.error('Did not recognize the stt engine.');\n  }\n};\n\nexport default sttJsonAdapter;\nexport { createEntityMap };\n"]},"metadata":{},"sourceType":"module"}