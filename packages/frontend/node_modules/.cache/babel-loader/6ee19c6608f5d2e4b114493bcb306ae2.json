{"ast":null,"code":"/**\n * Converts GCP Speech to Text Json to DraftJs\n * see `sample` folder for example of input and output as well as `example-usage.js`\n */import generateEntitiesRanges from'../generate-entities-ranges/index.js';var NANO_SECOND=1000000000;/**\n * attribute for the sentences object containing the text. eg sentences ={ punct:'helo', ... }\n *  or eg sentences ={ text:'hello', ... }\n * @param sentences\n */export var getBestAlternativeSentence=function getBestAlternativeSentence(sentences){if(sentences.alternatives.length===0){return sentences[0];}var sentenceWithHighestConfidence=sentences.alternatives.reduce(function(prev,current){return parseFloat(prev.confidence)>parseFloat(current.confidence)?prev:current;});return sentenceWithHighestConfidence;};export var trimLeadingAndTailingWhiteSpace=function trimLeadingAndTailingWhiteSpace(text){return text.trim();};/**\n * GCP does not provide a nanosecond attribute if the word starts at 0 nanosecond\n * @param startSecond\n * @param nanoSecond\n * @returns {number}\n */var computeTimeInSeconds=function computeTimeInSeconds(startSecond,nanoSecond){var seconds=parseFloat(startSecond);if(nanoSecond!==undefined){seconds=seconds+parseFloat(nanoSecond/NANO_SECOND);}return seconds;};/**\n * Normalizes words so they can be used in\n * the generic generateEntitiesRanges() method\n **/var normalizeWord=function normalizeWord(currentWord,confidence){return{start:computeTimeInSeconds(currentWord.startTime.seconds,currentWord.startTime.nanos),end:computeTimeInSeconds(currentWord.endTime.seconds,currentWord.endTime.nanos),text:currentWord.word,confidence:confidence};};/**\n * groups words list from GCP Speech to Text response.\n * @param {array} sentences - array of sentence objects from GCP STT\n */var groupWordsInParagraphs=function groupWordsInParagraphs(sentences){var results=[];var paragraph={words:[],text:[]};sentences.forEach(function(sentence){var bestAlternative=getBestAlternativeSentence(sentence);paragraph.text.push(trimLeadingAndTailingWhiteSpace(bestAlternative.transcript));bestAlternative.words.forEach(function(word){paragraph.words.push(normalizeWord(word,bestAlternative.confidence));});results.push(paragraph);paragraph={words:[],text:[]};});return results;};var gcpSttToDraft=function gcpSttToDraft(gcpSttJson){var results=[];// const speakerLabels = gcpSttJson.results[0]['alternatives'][0]['words'][0]['speakerTag']\n// let speakerSegmentation = typeof(speakerLabels) != 'undefined';\nvar wordsByParagraphs=groupWordsInParagraphs(gcpSttJson.results);wordsByParagraphs.forEach(function(paragraph,i){var draftJsContentBlockParagraph={text:paragraph.text.join(' '),type:'paragraph',data:{speaker:paragraph.speaker?\"Speaker \".concat(paragraph.speaker):\"TBC \".concat(i),words:paragraph.words,start:parseFloat(paragraph.words[0].start)},// the entities as ranges are each word in the space-joined text,\n// so it needs to be compute for each the offset from the beginning of the paragraph and the length\nentityRanges:generateEntitiesRanges(paragraph.words,'text')// wordAttributeName\n};results.push(draftJsContentBlockParagraph);});return results;};export default gcpSttToDraft;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/stt-adapters/google-stt/index.js"],"names":["generateEntitiesRanges","NANO_SECOND","getBestAlternativeSentence","sentences","alternatives","length","sentenceWithHighestConfidence","reduce","prev","current","parseFloat","confidence","trimLeadingAndTailingWhiteSpace","text","trim","computeTimeInSeconds","startSecond","nanoSecond","seconds","undefined","normalizeWord","currentWord","start","startTime","nanos","end","endTime","word","groupWordsInParagraphs","results","paragraph","words","forEach","sentence","bestAlternative","push","transcript","gcpSttToDraft","gcpSttJson","wordsByParagraphs","i","draftJsContentBlockParagraph","join","type","data","speaker","entityRanges"],"mappings":"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","sourcesContent":["/**\n * Converts GCP Speech to Text Json to DraftJs\n * see `sample` folder for example of input and output as well as `example-usage.js`\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\n\nconst NANO_SECOND = 1000000000;\n\n/**\n * attribute for the sentences object containing the text. eg sentences ={ punct:'helo', ... }\n *  or eg sentences ={ text:'hello', ... }\n * @param sentences\n */\nexport const getBestAlternativeSentence = sentences => {\n  if (sentences.alternatives.length === 0) {\n    return sentences[0];\n  }\n\n  const sentenceWithHighestConfidence = sentences.alternatives.reduce(function(\n    prev,\n    current\n  ) {\n    return parseFloat(prev.confidence) > parseFloat(current.confidence)\n      ? prev\n      : current;\n  });\n\n  return sentenceWithHighestConfidence;\n};\n\nexport const trimLeadingAndTailingWhiteSpace = text => {\n  return text.trim();\n};\n\n/**\n * GCP does not provide a nanosecond attribute if the word starts at 0 nanosecond\n * @param startSecond\n * @param nanoSecond\n * @returns {number}\n */\nconst computeTimeInSeconds = (startSecond, nanoSecond) => {\n\n  let seconds = parseFloat(startSecond);\n\n  if (nanoSecond !== undefined) {\n    seconds = seconds + parseFloat(nanoSecond / NANO_SECOND);\n  }\n\n  return seconds;\n};\n\n/**\n * Normalizes words so they can be used in\n * the generic generateEntitiesRanges() method\n **/\nconst normalizeWord = (currentWord, confidence) => {\n\n  return {\n    start: computeTimeInSeconds(currentWord.startTime.seconds, currentWord.startTime.nanos),\n    end: computeTimeInSeconds(currentWord.endTime.seconds, currentWord.endTime.nanos),\n    text: currentWord.word,\n    confidence: confidence\n  };\n};\n\n/**\n * groups words list from GCP Speech to Text response.\n * @param {array} sentences - array of sentence objects from GCP STT\n */\nconst groupWordsInParagraphs = sentences => {\n  const results = [];\n  let paragraph = {\n    words: [],\n    text: []\n  };\n\n  sentences.forEach((sentence) => {\n    const bestAlternative = getBestAlternativeSentence(sentence);\n    paragraph.text.push(trimLeadingAndTailingWhiteSpace(bestAlternative.transcript));\n\n    bestAlternative.words.forEach((word) => {\n      paragraph.words.push(normalizeWord(word, bestAlternative.confidence));\n    });\n    results.push(paragraph);\n    paragraph = { words: [], text: [] };\n  });\n\n  return results;\n};\n\nconst gcpSttToDraft = gcpSttJson => {\n  const results = [];\n  // const speakerLabels = gcpSttJson.results[0]['alternatives'][0]['words'][0]['speakerTag']\n  // let speakerSegmentation = typeof(speakerLabels) != 'undefined';\n\n  const wordsByParagraphs = groupWordsInParagraphs(gcpSttJson.results);\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: paragraph.speaker ? `Speaker ${ paragraph.speaker }` : `TBC ${ i }`,\n        words: paragraph.words,\n        start: parseFloat(paragraph.words[0].start)\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'text') // wordAttributeName\n    };\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  return results;\n};\n\nexport default gcpSttToDraft;\n"]},"metadata":{},"sourceType":"module"}