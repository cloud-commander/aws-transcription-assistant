{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\n\nvar findAncestorOffsetKey = require(\"./findAncestorOffsetKey\");\n\nvar getWindowForNode = require(\"./getWindowForNode\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n\nvar Map = Immutable.Map; // Heavily based on Prosemirror's DOMObserver https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\n\nvar DOM_OBSERVER_OPTIONS = {\n  subtree: true,\n  characterData: true,\n  childList: true,\n  characterDataOldValue: false,\n  attributes: false\n}; // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\n\nvar USE_CHAR_DATA = UserAgent.isBrowser('IE <= 11');\n\nvar DOMObserver = /*#__PURE__*/function () {\n  function DOMObserver(container) {\n    var _this = this;\n\n    _defineProperty(this, \"observer\", void 0);\n\n    _defineProperty(this, \"container\", void 0);\n\n    _defineProperty(this, \"mutations\", void 0);\n\n    _defineProperty(this, \"onCharData\", void 0);\n\n    this.container = container;\n    this.mutations = Map();\n    var containerWindow = getWindowForNode(container);\n\n    if (containerWindow.MutationObserver && !USE_CHAR_DATA) {\n      this.observer = new containerWindow.MutationObserver(function (mutations) {\n        return _this.registerMutations(mutations);\n      });\n    } else {\n      this.onCharData = function (e) {\n        !(e.target instanceof Node) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected target to be an instance of Node') : invariant(false) : void 0;\n\n        _this.registerMutation({\n          type: 'characterData',\n          target: e.target\n        });\n      };\n    }\n  }\n\n  var _proto = DOMObserver.prototype;\n\n  _proto.start = function start() {\n    if (this.observer) {\n      this.observer.observe(this.container, DOM_OBSERVER_OPTIONS);\n    } else {\n      /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */\n      this.container.addEventListener('DOMCharacterDataModified', this.onCharData);\n    }\n  };\n\n  _proto.stopAndFlushMutations = function stopAndFlushMutations() {\n    var observer = this.observer;\n\n    if (observer) {\n      this.registerMutations(observer.takeRecords());\n      observer.disconnect();\n    } else {\n      /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */\n      this.container.removeEventListener('DOMCharacterDataModified', this.onCharData);\n    }\n\n    var mutations = this.mutations;\n    this.mutations = Map();\n    return mutations;\n  };\n\n  _proto.registerMutations = function registerMutations(mutations) {\n    for (var i = 0; i < mutations.length; i++) {\n      this.registerMutation(mutations[i]);\n    }\n  };\n\n  _proto.getMutationTextContent = function getMutationTextContent(mutation) {\n    var type = mutation.type,\n        target = mutation.target,\n        removedNodes = mutation.removedNodes;\n\n    if (type === 'characterData') {\n      // When `textContent` is '', there is a race condition that makes\n      // getting the offsetKey from the target not possible.\n      // These events are also followed by a `childList`, which is the one\n      // we are able to retrieve the offsetKey and apply the '' text.\n      if (target.textContent !== '') {\n        // IE 11 considers the enter keypress that concludes the composition\n        // as an input char. This strips that newline character so the draft\n        // state does not receive spurious newlines.\n        if (USE_CHAR_DATA) {\n          return target.textContent.replace('\\n', '');\n        }\n\n        return target.textContent;\n      }\n    } else if (type === 'childList') {\n      if (removedNodes && removedNodes.length) {\n        // `characterData` events won't happen or are ignored when\n        // removing the last character of a leaf node, what happens\n        // instead is a `childList` event with a `removedNodes` array.\n        // For this case the textContent should be '' and\n        // `DraftModifier.replaceText` will make sure the content is\n        // updated properly.\n        return '';\n      } else if (target.textContent !== '') {\n        // Typing Chinese in an empty block in MS Edge results in a\n        // `childList` event with non-empty textContent.\n        // See https://github.com/facebook/draft-js/issues/2082\n        return target.textContent;\n      }\n    }\n\n    return null;\n  };\n\n  _proto.registerMutation = function registerMutation(mutation) {\n    var textContent = this.getMutationTextContent(mutation);\n\n    if (textContent != null) {\n      var offsetKey = nullthrows(findAncestorOffsetKey(mutation.target));\n      this.mutations = this.mutations.set(offsetKey, textContent);\n    }\n  };\n\n  return DOMObserver;\n}();\n\nmodule.exports = DOMObserver;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/node_modules/draft-js/lib/DOMObserver.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","UserAgent","require","findAncestorOffsetKey","getWindowForNode","Immutable","invariant","nullthrows","Map","DOM_OBSERVER_OPTIONS","subtree","characterData","childList","characterDataOldValue","attributes","USE_CHAR_DATA","isBrowser","DOMObserver","container","_this","mutations","containerWindow","MutationObserver","observer","registerMutations","onCharData","e","target","Node","process","env","NODE_ENV","registerMutation","type","_proto","prototype","start","observe","addEventListener","stopAndFlushMutations","takeRecords","disconnect","removeEventListener","i","length","getMutationTextContent","mutation","removedNodes","textContent","replace","offsetKey","set","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;;AAEjN,IAAIQ,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAAnC;;AAEA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAII,SAAS,GAAGJ,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIK,UAAU,GAAGL,OAAO,CAAC,qBAAD,CAAxB;;AAEA,IAAIM,GAAG,GAAGH,SAAS,CAACG,GAApB,C,CACA;;AACA,IAAIC,oBAAoB,GAAG;AACzBC,EAAAA,OAAO,EAAE,IADgB;AAEzBC,EAAAA,aAAa,EAAE,IAFU;AAGzBC,EAAAA,SAAS,EAAE,IAHc;AAIzBC,EAAAA,qBAAqB,EAAE,KAJE;AAKzBC,EAAAA,UAAU,EAAE;AALa,CAA3B,C,CAMG;;AAEH,IAAIC,aAAa,GAAGd,SAAS,CAACe,SAAV,CAAoB,UAApB,CAApB;;AAEA,IAAIC,WAAW,GAAG,aAAa,YAAY;AACzC,WAASA,WAAT,CAAqBC,SAArB,EAAgC;AAC9B,QAAIC,KAAK,GAAG,IAAZ;;AAEA3B,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,WAAP,EAAoB,KAAK,CAAzB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,WAAP,EAAoB,KAAK,CAAzB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,YAAP,EAAqB,KAAK,CAA1B,CAAf;;AAEA,SAAK0B,SAAL,GAAiBA,SAAjB;AACA,SAAKE,SAAL,GAAiBZ,GAAG,EAApB;AACA,QAAIa,eAAe,GAAGjB,gBAAgB,CAACc,SAAD,CAAtC;;AAEA,QAAIG,eAAe,CAACC,gBAAhB,IAAoC,CAACP,aAAzC,EAAwD;AACtD,WAAKQ,QAAL,GAAgB,IAAIF,eAAe,CAACC,gBAApB,CAAqC,UAAUF,SAAV,EAAqB;AACxE,eAAOD,KAAK,CAACK,iBAAN,CAAwBJ,SAAxB,CAAP;AACD,OAFe,CAAhB;AAGD,KAJD,MAIO;AACL,WAAKK,UAAL,GAAkB,UAAUC,CAAV,EAAa;AAC7B,UAAEA,CAAC,CAACC,MAAF,YAAoBC,IAAtB,IAA8BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCzB,SAAS,CAAC,KAAD,EAAQ,2CAAR,CAAjD,GAAwGA,SAAS,CAAC,KAAD,CAA/I,GAAyJ,KAAK,CAA9J;;AAEAa,QAAAA,KAAK,CAACa,gBAAN,CAAuB;AACrBC,UAAAA,IAAI,EAAE,eADe;AAErBN,UAAAA,MAAM,EAAED,CAAC,CAACC;AAFW,SAAvB;AAID,OAPD;AAQD;AACF;;AAED,MAAIO,MAAM,GAAGjB,WAAW,CAACkB,SAAzB;;AAEAD,EAAAA,MAAM,CAACE,KAAP,GAAe,SAASA,KAAT,GAAiB;AAC9B,QAAI,KAAKb,QAAT,EAAmB;AACjB,WAAKA,QAAL,CAAcc,OAAd,CAAsB,KAAKnB,SAA3B,EAAsCT,oBAAtC;AACD,KAFD,MAEO;AACL;;AAEA,WAAKS,SAAL,CAAeoB,gBAAf,CAAgC,0BAAhC,EAA4D,KAAKb,UAAjE;AACD;AACF,GARD;;AAUAS,EAAAA,MAAM,CAACK,qBAAP,GAA+B,SAASA,qBAAT,GAAiC;AAC9D,QAAIhB,QAAQ,GAAG,KAAKA,QAApB;;AAEA,QAAIA,QAAJ,EAAc;AACZ,WAAKC,iBAAL,CAAuBD,QAAQ,CAACiB,WAAT,EAAvB;AACAjB,MAAAA,QAAQ,CAACkB,UAAT;AACD,KAHD,MAGO;AACL;;AAEA,WAAKvB,SAAL,CAAewB,mBAAf,CAAmC,0BAAnC,EAA+D,KAAKjB,UAApE;AACD;;AAED,QAAIL,SAAS,GAAG,KAAKA,SAArB;AACA,SAAKA,SAAL,GAAiBZ,GAAG,EAApB;AACA,WAAOY,SAAP;AACD,GAfD;;AAiBAc,EAAAA,MAAM,CAACV,iBAAP,GAA2B,SAASA,iBAAT,CAA2BJ,SAA3B,EAAsC;AAC/D,SAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,SAAS,CAACwB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,WAAKX,gBAAL,CAAsBZ,SAAS,CAACuB,CAAD,CAA/B;AACD;AACF,GAJD;;AAMAT,EAAAA,MAAM,CAACW,sBAAP,GAAgC,SAASA,sBAAT,CAAgCC,QAAhC,EAA0C;AACxE,QAAIb,IAAI,GAAGa,QAAQ,CAACb,IAApB;AAAA,QACIN,MAAM,GAAGmB,QAAQ,CAACnB,MADtB;AAAA,QAEIoB,YAAY,GAAGD,QAAQ,CAACC,YAF5B;;AAIA,QAAId,IAAI,KAAK,eAAb,EAA8B;AAC5B;AACA;AACA;AACA;AACA,UAAIN,MAAM,CAACqB,WAAP,KAAuB,EAA3B,EAA+B;AAC7B;AACA;AACA;AACA,YAAIjC,aAAJ,EAAmB;AACjB,iBAAOY,MAAM,CAACqB,WAAP,CAAmBC,OAAnB,CAA2B,IAA3B,EAAiC,EAAjC,CAAP;AACD;;AAED,eAAOtB,MAAM,CAACqB,WAAd;AACD;AACF,KAfD,MAeO,IAAIf,IAAI,KAAK,WAAb,EAA0B;AAC/B,UAAIc,YAAY,IAAIA,YAAY,CAACH,MAAjC,EAAyC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,eAAO,EAAP;AACD,OARD,MAQO,IAAIjB,MAAM,CAACqB,WAAP,KAAuB,EAA3B,EAA+B;AACpC;AACA;AACA;AACA,eAAOrB,MAAM,CAACqB,WAAd;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAtCD;;AAwCAd,EAAAA,MAAM,CAACF,gBAAP,GAA0B,SAASA,gBAAT,CAA0Bc,QAA1B,EAAoC;AAC5D,QAAIE,WAAW,GAAG,KAAKH,sBAAL,CAA4BC,QAA5B,CAAlB;;AAEA,QAAIE,WAAW,IAAI,IAAnB,EAAyB;AACvB,UAAIE,SAAS,GAAG3C,UAAU,CAACJ,qBAAqB,CAAC2C,QAAQ,CAACnB,MAAV,CAAtB,CAA1B;AACA,WAAKP,SAAL,GAAiB,KAAKA,SAAL,CAAe+B,GAAf,CAAmBD,SAAnB,EAA8BF,WAA9B,CAAjB;AACD;AACF,GAPD;;AASA,SAAO/B,WAAP;AACD,CArH8B,EAA/B;;AAuHAmC,MAAM,CAACC,OAAP,GAAiBpC,WAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\n\nvar findAncestorOffsetKey = require(\"./findAncestorOffsetKey\");\n\nvar getWindowForNode = require(\"./getWindowForNode\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n\nvar Map = Immutable.Map;\n// Heavily based on Prosemirror's DOMObserver https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\nvar DOM_OBSERVER_OPTIONS = {\n  subtree: true,\n  characterData: true,\n  childList: true,\n  characterDataOldValue: false,\n  attributes: false\n}; // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\n\nvar USE_CHAR_DATA = UserAgent.isBrowser('IE <= 11');\n\nvar DOMObserver = /*#__PURE__*/function () {\n  function DOMObserver(container) {\n    var _this = this;\n\n    _defineProperty(this, \"observer\", void 0);\n\n    _defineProperty(this, \"container\", void 0);\n\n    _defineProperty(this, \"mutations\", void 0);\n\n    _defineProperty(this, \"onCharData\", void 0);\n\n    this.container = container;\n    this.mutations = Map();\n    var containerWindow = getWindowForNode(container);\n\n    if (containerWindow.MutationObserver && !USE_CHAR_DATA) {\n      this.observer = new containerWindow.MutationObserver(function (mutations) {\n        return _this.registerMutations(mutations);\n      });\n    } else {\n      this.onCharData = function (e) {\n        !(e.target instanceof Node) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected target to be an instance of Node') : invariant(false) : void 0;\n\n        _this.registerMutation({\n          type: 'characterData',\n          target: e.target\n        });\n      };\n    }\n  }\n\n  var _proto = DOMObserver.prototype;\n\n  _proto.start = function start() {\n    if (this.observer) {\n      this.observer.observe(this.container, DOM_OBSERVER_OPTIONS);\n    } else {\n      /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */\n      this.container.addEventListener('DOMCharacterDataModified', this.onCharData);\n    }\n  };\n\n  _proto.stopAndFlushMutations = function stopAndFlushMutations() {\n    var observer = this.observer;\n\n    if (observer) {\n      this.registerMutations(observer.takeRecords());\n      observer.disconnect();\n    } else {\n      /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */\n      this.container.removeEventListener('DOMCharacterDataModified', this.onCharData);\n    }\n\n    var mutations = this.mutations;\n    this.mutations = Map();\n    return mutations;\n  };\n\n  _proto.registerMutations = function registerMutations(mutations) {\n    for (var i = 0; i < mutations.length; i++) {\n      this.registerMutation(mutations[i]);\n    }\n  };\n\n  _proto.getMutationTextContent = function getMutationTextContent(mutation) {\n    var type = mutation.type,\n        target = mutation.target,\n        removedNodes = mutation.removedNodes;\n\n    if (type === 'characterData') {\n      // When `textContent` is '', there is a race condition that makes\n      // getting the offsetKey from the target not possible.\n      // These events are also followed by a `childList`, which is the one\n      // we are able to retrieve the offsetKey and apply the '' text.\n      if (target.textContent !== '') {\n        // IE 11 considers the enter keypress that concludes the composition\n        // as an input char. This strips that newline character so the draft\n        // state does not receive spurious newlines.\n        if (USE_CHAR_DATA) {\n          return target.textContent.replace('\\n', '');\n        }\n\n        return target.textContent;\n      }\n    } else if (type === 'childList') {\n      if (removedNodes && removedNodes.length) {\n        // `characterData` events won't happen or are ignored when\n        // removing the last character of a leaf node, what happens\n        // instead is a `childList` event with a `removedNodes` array.\n        // For this case the textContent should be '' and\n        // `DraftModifier.replaceText` will make sure the content is\n        // updated properly.\n        return '';\n      } else if (target.textContent !== '') {\n        // Typing Chinese in an empty block in MS Edge results in a\n        // `childList` event with non-empty textContent.\n        // See https://github.com/facebook/draft-js/issues/2082\n        return target.textContent;\n      }\n    }\n\n    return null;\n  };\n\n  _proto.registerMutation = function registerMutation(mutation) {\n    var textContent = this.getMutationTextContent(mutation);\n\n    if (textContent != null) {\n      var offsetKey = nullthrows(findAncestorOffsetKey(mutation.target));\n      this.mutations = this.mutations.set(offsetKey, textContent);\n    }\n  };\n\n  return DOMObserver;\n}();\n\nmodule.exports = DOMObserver;"]},"metadata":{},"sourceType":"script"}