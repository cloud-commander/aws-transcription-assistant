{"ast":null,"code":"/**\n * Convert autoEdit2 Json to draftJS\n * see `sample` folder for example of input and output as well as `example-usage.js`\n */import generateEntitiesRanges from'../generate-entities-ranges/index';/**\n * groups words list from autoEdit transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words objects from autoEdit transcript\n */var groupWordsInParagraphs=function groupWordsInParagraphs(autoEditText){var results=[];var paragraph={words:[],text:[]};autoEditText.forEach(function(autoEditparagraph){autoEditparagraph.paragraph.forEach(function(autoEditLine){autoEditLine.line.forEach(function(word){// adjusting time reference attributes from\n// `startTime` `endTime` to `start` `end`\n// for word object\nvar tmpWord={text:word.text,start:word.startTime,end:word.endTime};//  if word contains punctuation\nif(/[.?!]/.test(word.text)){paragraph.words.push(tmpWord);paragraph.text.push(word.text);results.push(paragraph);// reset paragraph\nparagraph={words:[],text:[]};}else{paragraph.words.push(tmpWord);paragraph.text.push(word.text);}});});});return results;};var autoEdit2ToDraft=function autoEdit2ToDraft(autoEdit2Json){var results=[];var tmpWords=autoEdit2Json.text;var wordsByParagraphs=groupWordsInParagraphs(tmpWords);wordsByParagraphs.forEach(function(paragraph,i){var draftJsContentBlockParagraph={text:paragraph.text.join(' '),type:'paragraph',data:{speaker:\"TBC \".concat(i),words:paragraph.words,start:paragraph.words[0].start},// the entities as ranges are each word in the space-joined text,\n// so it needs to be compute for each the offset from the beginning of the paragraph and the length\nentityRanges:generateEntitiesRanges(paragraph.words,'text')};// console.log(JSON.stringify(draftJsContentBlockParagraph,null,2))\nresults.push(draftJsContentBlockParagraph);});// console.log(JSON.stringify(results,null,2))\nreturn results;};export default autoEdit2ToDraft;","map":{"version":3,"sources":["/home/cmsgdiav/Desktop/React Projects/aws-transcription-assistant-05/packages/frontend/src/packages/stt-adapters/autoEdit2/index.js"],"names":["generateEntitiesRanges","groupWordsInParagraphs","autoEditText","results","paragraph","words","text","forEach","autoEditparagraph","autoEditLine","line","word","tmpWord","start","startTime","end","endTime","test","push","autoEdit2ToDraft","autoEdit2Json","tmpWords","wordsByParagraphs","i","draftJsContentBlockParagraph","join","type","data","speaker","entityRanges"],"mappings":"AAAA;;;GAKA,MAAOA,CAAAA,sBAAP,KAAmC,mCAAnC,CAEA;;;;GAMA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,YAAD,CAAkB,CAC/C,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CACA,GAAIC,CAAAA,SAAS,CAAG,CAAEC,KAAK,CAAE,EAAT,CAAaC,IAAI,CAAE,EAAnB,CAAhB,CAEAJ,YAAY,CAACK,OAAb,CAAqB,SAACC,iBAAD,CAAuB,CAC1CA,iBAAiB,CAACJ,SAAlB,CAA4BG,OAA5B,CAAoC,SAACE,YAAD,CAAkB,CACpDA,YAAY,CAACC,IAAb,CAAkBH,OAAlB,CAA0B,SAACI,IAAD,CAAU,CAClC;AACA;AACA;AACA,GAAMC,CAAAA,OAAO,CAAG,CACdN,IAAI,CAAEK,IAAI,CAACL,IADG,CAEdO,KAAK,CAAEF,IAAI,CAACG,SAFE,CAGdC,GAAG,CAAEJ,IAAI,CAACK,OAHI,CAAhB,CAKA;AACA,GAAI,QAAQC,IAAR,CAAaN,IAAI,CAACL,IAAlB,CAAJ,CAA6B,CAC3BF,SAAS,CAACC,KAAV,CAAgBa,IAAhB,CAAqBN,OAArB,EACAR,SAAS,CAACE,IAAV,CAAeY,IAAf,CAAoBP,IAAI,CAACL,IAAzB,EACAH,OAAO,CAACe,IAAR,CAAad,SAAb,EACA;AACAA,SAAS,CAAG,CAAEC,KAAK,CAAE,EAAT,CAAaC,IAAI,CAAE,EAAnB,CAAZ,CACD,CAND,IAMO,CACLF,SAAS,CAACC,KAAV,CAAgBa,IAAhB,CAAqBN,OAArB,EACAR,SAAS,CAACE,IAAV,CAAeY,IAAf,CAAoBP,IAAI,CAACL,IAAzB,EACD,CACF,CApBD,EAqBD,CAtBD,EAuBD,CAxBD,EA0BA,MAAOH,CAAAA,OAAP,CACD,CA/BD,CAiCA,GAAMgB,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,aAAD,CAAmB,CAC1C,GAAMjB,CAAAA,OAAO,CAAG,EAAhB,CACA,GAAMkB,CAAAA,QAAQ,CAAGD,aAAa,CAACd,IAA/B,CACA,GAAMgB,CAAAA,iBAAiB,CAAGrB,sBAAsB,CAACoB,QAAD,CAAhD,CAEAC,iBAAiB,CAACf,OAAlB,CAA0B,SAACH,SAAD,CAAYmB,CAAZ,CAAkB,CAC1C,GAAMC,CAAAA,4BAA4B,CAAG,CACnClB,IAAI,CAAEF,SAAS,CAACE,IAAV,CAAemB,IAAf,CAAoB,GAApB,CAD6B,CAEnCC,IAAI,CAAE,WAF6B,CAGnCC,IAAI,CAAE,CACJC,OAAO,eAAUL,CAAV,CADH,CAEJlB,KAAK,CAAED,SAAS,CAACC,KAFb,CAGJQ,KAAK,CAAET,SAAS,CAACC,KAAV,CAAgB,CAAhB,EAAmBQ,KAHtB,CAH6B,CAQnC;AACA;AACAgB,YAAY,CAAE7B,sBAAsB,CAACI,SAAS,CAACC,KAAX,CAAkB,MAAlB,CAVD,CAArC,CAYA;AACAF,OAAO,CAACe,IAAR,CAAaM,4BAAb,EACD,CAfD,EAiBA;AACA,MAAOrB,CAAAA,OAAP,CACD,CAxBD,CA0BA,cAAegB,CAAAA,gBAAf","sourcesContent":["/**\n * Convert autoEdit2 Json to draftJS\n * see `sample` folder for example of input and output as well as `example-usage.js`\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index';\n\n/**\n * groups words list from autoEdit transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words objects from autoEdit transcript\n */\n\nconst groupWordsInParagraphs = (autoEditText) => {\n  const results = [];\n  let paragraph = { words: [], text: [] };\n\n  autoEditText.forEach((autoEditparagraph) => {\n    autoEditparagraph.paragraph.forEach((autoEditLine) => {\n      autoEditLine.line.forEach((word) => {\n        // adjusting time reference attributes from\n        // `startTime` `endTime` to `start` `end`\n        // for word object\n        const tmpWord = {\n          text: word.text,\n          start: word.startTime,\n          end: word.endTime,\n        };\n        //  if word contains punctuation\n        if (/[.?!]/.test(word.text)) {\n          paragraph.words.push(tmpWord);\n          paragraph.text.push(word.text);\n          results.push(paragraph);\n          // reset paragraph\n          paragraph = { words: [], text: [] };\n        } else {\n          paragraph.words.push(tmpWord);\n          paragraph.text.push(word.text);\n        }\n      });\n    });\n  });\n\n  return results;\n};\n\nconst autoEdit2ToDraft = (autoEdit2Json) => {\n  const results = [];\n  const tmpWords = autoEdit2Json.text;\n  const wordsByParagraphs = groupWordsInParagraphs(tmpWords);\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: `TBC ${ i }`,\n        words: paragraph.words,\n        start: paragraph.words[0].start\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'text'),\n    };\n    // console.log(JSON.stringify(draftJsContentBlockParagraph,null,2))\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  // console.log(JSON.stringify(results,null,2))\n  return results;\n};\n\nexport default autoEdit2ToDraft;\n"]},"metadata":{},"sourceType":"module"}